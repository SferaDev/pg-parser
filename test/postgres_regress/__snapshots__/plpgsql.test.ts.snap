// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`plpgsql.sql > line 25 1`] = `
[
  "create table Room (
    roomno	char(8),
    comment	text
)",
  {
    "stmts": [
      {
        "stmt": {
          "CreateStmt": {
            "oncommit": "ONCOMMIT_NOOP",
            "relation": {
              "inh": true,
              "location": 13,
              "relname": "room",
              "relpersistence": "p",
            },
            "tableElts": [
              {
                "ColumnDef": {
                  "colname": "roomno",
                  "is_local": true,
                  "location": 24,
                  "typeName": {
                    "location": 31,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "bpchar",
                        },
                      },
                    ],
                    "typemod": -1,
                    "typmods": [
                      {
                        "A_Const": {
                          "ival": {
                            "ival": 8,
                          },
                          "location": 36,
                        },
                      },
                    ],
                  },
                },
              },
              {
                "ColumnDef": {
                  "colname": "comment",
                  "is_local": true,
                  "location": 44,
                  "typeName": {
                    "location": 52,
                    "names": [
                      {
                        "String": {
                          "sval": "text",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 30 1`] = `
[
  "create unique index Room_rno on Room using btree (roomno bpchar_ops)",
  {
    "stmts": [
      {
        "stmt": {
          "IndexStmt": {
            "accessMethod": "btree",
            "idxname": "room_rno",
            "indexParams": [
              {
                "IndexElem": {
                  "name": "roomno",
                  "nulls_ordering": "SORTBY_NULLS_DEFAULT",
                  "opclass": [
                    {
                      "String": {
                        "sval": "bpchar_ops",
                      },
                    },
                  ],
                  "ordering": "SORTBY_DEFAULT",
                },
              },
            ],
            "relation": {
              "inh": true,
              "location": 32,
              "relname": "room",
              "relpersistence": "p",
            },
            "unique": true,
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 40 1`] = `
[
  "create unique index WSlot_name on WSlot using btree (slotname bpchar_ops)",
  {
    "stmts": [
      {
        "stmt": {
          "IndexStmt": {
            "accessMethod": "btree",
            "idxname": "wslot_name",
            "indexParams": [
              {
                "IndexElem": {
                  "name": "slotname",
                  "nulls_ordering": "SORTBY_NULLS_DEFAULT",
                  "opclass": [
                    {
                      "String": {
                        "sval": "bpchar_ops",
                      },
                    },
                  ],
                  "ordering": "SORTBY_DEFAULT",
                },
              },
            ],
            "relation": {
              "inh": true,
              "location": 34,
              "relname": "wslot",
              "relpersistence": "p",
            },
            "unique": true,
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 48 1`] = `
[
  "create unique index PField_name on PField using btree (name text_ops)",
  {
    "stmts": [
      {
        "stmt": {
          "IndexStmt": {
            "accessMethod": "btree",
            "idxname": "pfield_name",
            "indexParams": [
              {
                "IndexElem": {
                  "name": "name",
                  "nulls_ordering": "SORTBY_NULLS_DEFAULT",
                  "opclass": [
                    {
                      "String": {
                        "sval": "text_ops",
                      },
                    },
                  ],
                  "ordering": "SORTBY_DEFAULT",
                },
              },
            ],
            "relation": {
              "inh": true,
              "location": 35,
              "relname": "pfield",
              "relpersistence": "p",
            },
            "unique": true,
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 58 1`] = `
[
  "create unique index PSlot_name on PSlot using btree (slotname bpchar_ops)",
  {
    "stmts": [
      {
        "stmt": {
          "IndexStmt": {
            "accessMethod": "btree",
            "idxname": "pslot_name",
            "indexParams": [
              {
                "IndexElem": {
                  "name": "slotname",
                  "nulls_ordering": "SORTBY_NULLS_DEFAULT",
                  "opclass": [
                    {
                      "String": {
                        "sval": "bpchar_ops",
                      },
                    },
                  ],
                  "ordering": "SORTBY_DEFAULT",
                },
              },
            ],
            "relation": {
              "inh": true,
              "location": 34,
              "relname": "pslot",
              "relpersistence": "p",
            },
            "unique": true,
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 68 1`] = `
[
  "create unique index PLine_name on PLine using btree (slotname bpchar_ops)",
  {
    "stmts": [
      {
        "stmt": {
          "IndexStmt": {
            "accessMethod": "btree",
            "idxname": "pline_name",
            "indexParams": [
              {
                "IndexElem": {
                  "name": "slotname",
                  "nulls_ordering": "SORTBY_NULLS_DEFAULT",
                  "opclass": [
                    {
                      "String": {
                        "sval": "bpchar_ops",
                      },
                    },
                  ],
                  "ordering": "SORTBY_DEFAULT",
                },
              },
            ],
            "relation": {
              "inh": true,
              "location": 34,
              "relname": "pline",
              "relpersistence": "p",
            },
            "unique": true,
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 77 1`] = `
[
  "create unique index Hub_name on Hub using btree (name bpchar_ops)",
  {
    "stmts": [
      {
        "stmt": {
          "IndexStmt": {
            "accessMethod": "btree",
            "idxname": "hub_name",
            "indexParams": [
              {
                "IndexElem": {
                  "name": "name",
                  "nulls_ordering": "SORTBY_NULLS_DEFAULT",
                  "opclass": [
                    {
                      "String": {
                        "sval": "bpchar_ops",
                      },
                    },
                  ],
                  "ordering": "SORTBY_DEFAULT",
                },
              },
            ],
            "relation": {
              "inh": true,
              "location": 32,
              "relname": "hub",
              "relpersistence": "p",
            },
            "unique": true,
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 87 1`] = `
[
  "create unique index HSlot_name on HSlot using btree (slotname bpchar_ops)",
  {
    "stmts": [
      {
        "stmt": {
          "IndexStmt": {
            "accessMethod": "btree",
            "idxname": "hslot_name",
            "indexParams": [
              {
                "IndexElem": {
                  "name": "slotname",
                  "nulls_ordering": "SORTBY_NULLS_DEFAULT",
                  "opclass": [
                    {
                      "String": {
                        "sval": "bpchar_ops",
                      },
                    },
                  ],
                  "ordering": "SORTBY_DEFAULT",
                },
              },
            ],
            "relation": {
              "inh": true,
              "location": 34,
              "relname": "hslot",
              "relpersistence": "p",
            },
            "unique": true,
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 96 1`] = `
[
  "create unique index System_name on System using btree (name text_ops)",
  {
    "stmts": [
      {
        "stmt": {
          "IndexStmt": {
            "accessMethod": "btree",
            "idxname": "system_name",
            "indexParams": [
              {
                "IndexElem": {
                  "name": "name",
                  "nulls_ordering": "SORTBY_NULLS_DEFAULT",
                  "opclass": [
                    {
                      "String": {
                        "sval": "text_ops",
                      },
                    },
                  ],
                  "ordering": "SORTBY_DEFAULT",
                },
              },
            ],
            "relation": {
              "inh": true,
              "location": 35,
              "relname": "system",
              "relpersistence": "p",
            },
            "unique": true,
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 106 1`] = `
[
  "create unique index IFace_name on IFace using btree (slotname bpchar_ops)",
  {
    "stmts": [
      {
        "stmt": {
          "IndexStmt": {
            "accessMethod": "btree",
            "idxname": "iface_name",
            "indexParams": [
              {
                "IndexElem": {
                  "name": "slotname",
                  "nulls_ordering": "SORTBY_NULLS_DEFAULT",
                  "opclass": [
                    {
                      "String": {
                        "sval": "bpchar_ops",
                      },
                    },
                  ],
                  "ordering": "SORTBY_DEFAULT",
                },
              },
            ],
            "relation": {
              "inh": true,
              "location": 34,
              "relname": "iface",
              "relpersistence": "p",
            },
            "unique": true,
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 115 1`] = `
[
  "create unique index PHone_name on PHone using btree (slotname bpchar_ops)",
  {
    "stmts": [
      {
        "stmt": {
          "IndexStmt": {
            "accessMethod": "btree",
            "idxname": "phone_name",
            "indexParams": [
              {
                "IndexElem": {
                  "name": "slotname",
                  "nulls_ordering": "SORTBY_NULLS_DEFAULT",
                  "opclass": [
                    {
                      "String": {
                        "sval": "bpchar_ops",
                      },
                    },
                  ],
                  "ordering": "SORTBY_DEFAULT",
                },
              },
            ],
            "relation": {
              "inh": true,
              "location": 34,
              "relname": "phone",
              "relpersistence": "p",
            },
            "unique": true,
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 130 1`] = `
[
  "create function tg_room_au() returns trigger as '
begin
    if new.roomno != old.roomno then
        update WSlot set roomno = new.roomno where roomno = old.roomno;
    end if;
    return new;
end;
' language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "tg_room_au",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
begin
    if new.roomno != old.roomno then
        update WSlot set roomno = new.roomno where roomno = old.roomno;
    end if;
    return new;
end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 45,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 200,
                },
              },
            ],
            "returnType": {
              "location": 37,
              "names": [
                {
                  "String": {
                    "sval": "trigger",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 139 1`] = `
[
  "create trigger tg_room_au after update
    on Room for each row execute procedure tg_room_au()",
  {
    "stmts": [
      {
        "stmt": {
          "CreateTrigStmt": {
            "events": 16,
            "funcname": [
              {
                "String": {
                  "sval": "tg_room_au",
                },
              },
            ],
            "relation": {
              "inh": true,
              "location": 46,
              "relname": "room",
              "relpersistence": "p",
            },
            "row": true,
            "trigname": "tg_room_au",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 147 1`] = `
[
  "create function tg_room_ad() returns trigger as '
begin
    delete from WSlot where roomno = old.roomno;
    return old;
end;
' language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "tg_room_ad",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
begin
    delete from WSlot where roomno = old.roomno;
    return old;
end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 45,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 128,
                },
              },
            ],
            "returnType": {
              "location": 37,
              "names": [
                {
                  "String": {
                    "sval": "trigger",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 154 1`] = `
[
  "create trigger tg_room_ad after delete
    on Room for each row execute procedure tg_room_ad()",
  {
    "stmts": [
      {
        "stmt": {
          "CreateTrigStmt": {
            "events": 8,
            "funcname": [
              {
                "String": {
                  "sval": "tg_room_ad",
                },
              },
            ],
            "relation": {
              "inh": true,
              "location": 46,
              "relname": "room",
              "relpersistence": "p",
            },
            "row": true,
            "trigname": "tg_room_ad",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 162 1`] = `
[
  "create function tg_wslot_biu() returns trigger as $$
begin
    if count(*) = 0 from Room where roomno = new.roomno then
        raise exception 'Room % does not exist', new.roomno;
    end if;
    return new;
end;
$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "tg_wslot_biu",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
begin
    if count(*) = 0 from Room where roomno = new.roomno then
        raise exception 'Room % does not exist', new.roomno;
    end if;
    return new;
end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 47,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 217,
                },
              },
            ],
            "returnType": {
              "location": 39,
              "names": [
                {
                  "String": {
                    "sval": "trigger",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 171 1`] = `
[
  "create trigger tg_wslot_biu before insert or update
    on WSlot for each row execute procedure tg_wslot_biu()",
  {
    "stmts": [
      {
        "stmt": {
          "CreateTrigStmt": {
            "events": 20,
            "funcname": [
              {
                "String": {
                  "sval": "tg_wslot_biu",
                },
              },
            ],
            "relation": {
              "inh": true,
              "location": 59,
              "relname": "wslot",
              "relpersistence": "p",
            },
            "row": true,
            "timing": 2,
            "trigname": "tg_wslot_biu",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 179 1`] = `
[
  "create function tg_pfield_au() returns trigger as '
begin
    if new.name != old.name then
        update PSlot set pfname = new.name where pfname = old.name;
    end if;
    return new;
end;
' language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "tg_pfield_au",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
begin
    if new.name != old.name then
        update PSlot set pfname = new.name where pfname = old.name;
    end if;
    return new;
end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 47,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 194,
                },
              },
            ],
            "returnType": {
              "location": 39,
              "names": [
                {
                  "String": {
                    "sval": "trigger",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 188 1`] = `
[
  "create trigger tg_pfield_au after update
    on PField for each row execute procedure tg_pfield_au()",
  {
    "stmts": [
      {
        "stmt": {
          "CreateTrigStmt": {
            "events": 16,
            "funcname": [
              {
                "String": {
                  "sval": "tg_pfield_au",
                },
              },
            ],
            "relation": {
              "inh": true,
              "location": 48,
              "relname": "pfield",
              "relpersistence": "p",
            },
            "row": true,
            "trigname": "tg_pfield_au",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 196 1`] = `
[
  "create function tg_pfield_ad() returns trigger as '
begin
    delete from PSlot where pfname = old.name;
    return old;
end;
' language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "tg_pfield_ad",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
begin
    delete from PSlot where pfname = old.name;
    return old;
end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 47,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 128,
                },
              },
            ],
            "returnType": {
              "location": 39,
              "names": [
                {
                  "String": {
                    "sval": "trigger",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 203 1`] = `
[
  "create trigger tg_pfield_ad after delete
    on PField for each row execute procedure tg_pfield_ad()",
  {
    "stmts": [
      {
        "stmt": {
          "CreateTrigStmt": {
            "events": 8,
            "funcname": [
              {
                "String": {
                  "sval": "tg_pfield_ad",
                },
              },
            ],
            "relation": {
              "inh": true,
              "location": 48,
              "relname": "pfield",
              "relpersistence": "p",
            },
            "row": true,
            "trigname": "tg_pfield_ad",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 211 1`] = `
[
  "create function tg_pslot_biu() returns trigger as $proc$
declare
    pfrec	record;
    ps          alias for new;
begin
    select into pfrec * from PField where name = ps.pfname;
    if not found then
        raise exception $$Patchfield "%" does not exist$$, ps.pfname;
    end if;
    return ps;
end;
$proc$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "tg_pslot_biu",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare
    pfrec	record;
    ps          alias for new;
begin
    select into pfrec * from PField where name = ps.pfname;
    if not found then
        raise exception $$Patchfield "%" does not exist$$, ps.pfname;
    end if;
    return ps;
end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 47,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 311,
                },
              },
            ],
            "returnType": {
              "location": 39,
              "names": [
                {
                  "String": {
                    "sval": "trigger",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 224 1`] = `
[
  "create trigger tg_pslot_biu before insert or update
    on PSlot for each row execute procedure tg_pslot_biu()",
  {
    "stmts": [
      {
        "stmt": {
          "CreateTrigStmt": {
            "events": 20,
            "funcname": [
              {
                "String": {
                  "sval": "tg_pslot_biu",
                },
              },
            ],
            "relation": {
              "inh": true,
              "location": 59,
              "relname": "pslot",
              "relpersistence": "p",
            },
            "row": true,
            "timing": 2,
            "trigname": "tg_pslot_biu",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 232 1`] = `
[
  "create function tg_system_au() returns trigger as '
begin
    if new.name != old.name then
        update IFace set sysname = new.name where sysname = old.name;
    end if;
    return new;
end;
' language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "tg_system_au",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
begin
    if new.name != old.name then
        update IFace set sysname = new.name where sysname = old.name;
    end if;
    return new;
end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 47,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 196,
                },
              },
            ],
            "returnType": {
              "location": 39,
              "names": [
                {
                  "String": {
                    "sval": "trigger",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 241 1`] = `
[
  "create trigger tg_system_au after update
    on System for each row execute procedure tg_system_au()",
  {
    "stmts": [
      {
        "stmt": {
          "CreateTrigStmt": {
            "events": 16,
            "funcname": [
              {
                "String": {
                  "sval": "tg_system_au",
                },
              },
            ],
            "relation": {
              "inh": true,
              "location": 48,
              "relname": "system",
              "relpersistence": "p",
            },
            "row": true,
            "trigname": "tg_system_au",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 249 1`] = `
[
  "create function tg_iface_biu() returns trigger as $$
declare
    sname	text;
    sysrec	record;
begin
    select into sysrec * from system where name = new.sysname;
    if not found then
        raise exception $q$system "%" does not exist$q$, new.sysname;
    end if;
    sname := 'IF.' || new.sysname;
    sname := sname || '.';
    sname := sname || new.ifname;
    if length(sname) > 20 then
        raise exception 'IFace slotname "%" too long (20 char max)', sname;
    end if;
    new.slotname := sname;
    return new;
end;
$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "tg_iface_biu",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare
    sname	text;
    sysrec	record;
begin
    select into sysrec * from system where name = new.sysname;
    if not found then
        raise exception $q$system "%" does not exist$q$, new.sysname;
    end if;
    sname := 'IF.' || new.sysname;
    sname := sname || '.';
    sname := sname || new.ifname;
    if length(sname) > 20 then
        raise exception 'IFace slotname "%" too long (20 char max)', sname;
    end if;
    new.slotname := sname;
    return new;
end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 47,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 535,
                },
              },
            ],
            "returnType": {
              "location": 39,
              "names": [
                {
                  "String": {
                    "sval": "trigger",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 269 1`] = `
[
  "create trigger tg_iface_biu before insert or update
    on IFace for each row execute procedure tg_iface_biu()",
  {
    "stmts": [
      {
        "stmt": {
          "CreateTrigStmt": {
            "events": 20,
            "funcname": [
              {
                "String": {
                  "sval": "tg_iface_biu",
                },
              },
            ],
            "relation": {
              "inh": true,
              "location": 59,
              "relname": "iface",
              "relpersistence": "p",
            },
            "row": true,
            "timing": 2,
            "trigname": "tg_iface_biu",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 277 1`] = `
[
  "create function tg_hub_a() returns trigger as '
declare
    hname	text;
    dummy	integer;
begin
    if tg_op = ''INSERT'' then
	dummy := tg_hub_adjustslots(new.name, 0, new.nslots);
	return new;
    end if;
    if tg_op = ''UPDATE'' then
	if new.name != old.name then
	    update HSlot set hubname = new.name where hubname = old.name;
	end if;
	dummy := tg_hub_adjustslots(new.name, old.nslots, new.nslots);
	return new;
    end if;
    if tg_op = ''DELETE'' then
	dummy := tg_hub_adjustslots(old.name, old.nslots, 0);
	return old;
    end if;
end;
' language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "tg_hub_a",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare
    hname	text;
    dummy	integer;
begin
    if tg_op = 'INSERT' then
	dummy := tg_hub_adjustslots(new.name, 0, new.nslots);
	return new;
    end if;
    if tg_op = 'UPDATE' then
	if new.name != old.name then
	    update HSlot set hubname = new.name where hubname = old.name;
	end if;
	dummy := tg_hub_adjustslots(new.name, old.nslots, new.nslots);
	return new;
    end if;
    if tg_op = 'DELETE' then
	dummy := tg_hub_adjustslots(old.name, old.nslots, 0);
	return old;
    end if;
end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 43,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 552,
                },
              },
            ],
            "returnType": {
              "location": 35,
              "names": [
                {
                  "String": {
                    "sval": "trigger",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 300 1`] = `
[
  "create trigger tg_hub_a after insert or update or delete
    on Hub for each row execute procedure tg_hub_a()",
  {
    "stmts": [
      {
        "stmt": {
          "CreateTrigStmt": {
            "events": 28,
            "funcname": [
              {
                "String": {
                  "sval": "tg_hub_a",
                },
              },
            ],
            "relation": {
              "inh": true,
              "location": 64,
              "relname": "hub",
              "relpersistence": "p",
            },
            "row": true,
            "trigname": "tg_hub_a",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 307 1`] = `
[
  "create function tg_hub_adjustslots(hname bpchar,
                                   oldnslots integer,
                                   newnslots integer)
returns integer as '
begin
    if newnslots = oldnslots then
        return 0;
    end if;
    if newnslots < oldnslots then
        delete from HSlot where hubname = hname and slotno > newnslots;
	return 0;
    end if;
    for i in oldnslots + 1 .. newnslots loop
        insert into HSlot (slotname, hubname, slotno, slotlink)
		values (''HS.dummy'', hname, i, '''');
    end loop;
    return 0;
end
' language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "tg_hub_adjustslots",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
begin
    if newnslots = oldnslots then
        return 0;
    end if;
    if newnslots < oldnslots then
        delete from HSlot where hubname = hname and slotno > newnslots;
	return 0;
    end if;
    for i in oldnslots + 1 .. newnslots loop
        insert into HSlot (slotname, hubname, slotno, slotlink)
		values ('HS.dummy', hname, i, '');
    end loop;
    return 0;
end
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 173,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 561,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 41,
                    "names": [
                      {
                        "String": {
                          "sval": "bpchar",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                  "name": "hname",
                },
              },
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 94,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                  "name": "oldnslots",
                },
              },
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 148,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                  "name": "newnslots",
                },
              },
            ],
            "returnType": {
              "location": 165,
              "names": [
                {
                  "String": {
                    "sval": "pg_catalog",
                  },
                },
                {
                  "String": {
                    "sval": "int4",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 328 1`] = `
[
  "COMMENT ON FUNCTION tg_hub_adjustslots_wrong(bpchar, integer, integer) IS 'function with args'",
  {
    "stmts": [
      {
        "stmt": {
          "CommentStmt": {
            "comment": "function with args",
            "object": {
              "ObjectWithArgs": {
                "objargs": [
                  {
                    "TypeName": {
                      "location": 45,
                      "names": [
                        {
                          "String": {
                            "sval": "bpchar",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                  {
                    "TypeName": {
                      "location": 53,
                      "names": [
                        {
                          "String": {
                            "sval": "pg_catalog",
                          },
                        },
                        {
                          "String": {
                            "sval": "int4",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                  {
                    "TypeName": {
                      "location": 62,
                      "names": [
                        {
                          "String": {
                            "sval": "pg_catalog",
                          },
                        },
                        {
                          "String": {
                            "sval": "int4",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                  },
                ],
                "objfuncargs": [
                  {
                    "FunctionParameter": {
                      "argType": {
                        "location": 45,
                        "names": [
                          {
                            "String": {
                              "sval": "bpchar",
                            },
                          },
                        ],
                        "typemod": -1,
                      },
                      "mode": "FUNC_PARAM_DEFAULT",
                    },
                  },
                  {
                    "FunctionParameter": {
                      "argType": {
                        "location": 53,
                        "names": [
                          {
                            "String": {
                              "sval": "pg_catalog",
                            },
                          },
                          {
                            "String": {
                              "sval": "int4",
                            },
                          },
                        ],
                        "typemod": -1,
                      },
                      "mode": "FUNC_PARAM_DEFAULT",
                    },
                  },
                  {
                    "FunctionParameter": {
                      "argType": {
                        "location": 62,
                        "names": [
                          {
                            "String": {
                              "sval": "pg_catalog",
                            },
                          },
                          {
                            "String": {
                              "sval": "int4",
                            },
                          },
                        ],
                        "typemod": -1,
                      },
                      "mode": "FUNC_PARAM_DEFAULT",
                    },
                  },
                ],
                "objname": [
                  {
                    "String": {
                      "sval": "tg_hub_adjustslots_wrong",
                    },
                  },
                ],
              },
            },
            "objtype": "OBJECT_FUNCTION",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 337 1`] = `
[
  "create function tg_hslot_biu() returns trigger as '
declare
    sname	text;
    xname	HSlot.slotname%TYPE;
    hubrec	record;
begin
    select into hubrec * from Hub where name = new.hubname;
    if not found then
        raise exception ''no manual manipulation of HSlot'';
    end if;
    if new.slotno < 1 or new.slotno > hubrec.nslots then
        raise exception ''no manual manipulation of HSlot'';
    end if;
    if tg_op = ''UPDATE'' and new.hubname != old.hubname then
	if count(*) > 0 from Hub where name = old.hubname then
	    raise exception ''no manual manipulation of HSlot'';
	end if;
    end if;
    sname := ''HS.'' || trim(new.hubname);
    sname := sname || ''.'';
    sname := sname || new.slotno::text;
    if length(sname) > 20 then
        raise exception ''HSlot slotname "%" too long (20 char max)'', sname;
    end if;
    new.slotname := sname;
    return new;
end;
' language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "tg_hslot_biu",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare
    sname	text;
    xname	HSlot.slotname%TYPE;
    hubrec	record;
begin
    select into hubrec * from Hub where name = new.hubname;
    if not found then
        raise exception 'no manual manipulation of HSlot';
    end if;
    if new.slotno < 1 or new.slotno > hubrec.nslots then
        raise exception 'no manual manipulation of HSlot';
    end if;
    if tg_op = 'UPDATE' and new.hubname != old.hubname then
	if count(*) > 0 from Hub where name = old.hubname then
	    raise exception 'no manual manipulation of HSlot';
	end if;
    end if;
    sname := 'HS.' || trim(new.hubname);
    sname := sname || '.';
    sname := sname || new.slotno::text;
    if length(sname) > 20 then
        raise exception 'HSlot slotname "%" too long (20 char max)', sname;
    end if;
    new.slotname := sname;
    return new;
end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 47,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 897,
                },
              },
            ],
            "returnType": {
              "location": 39,
              "names": [
                {
                  "String": {
                    "sval": "trigger",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 366 1`] = `
[
  "create trigger tg_hslot_biu before insert or update
    on HSlot for each row execute procedure tg_hslot_biu()",
  {
    "stmts": [
      {
        "stmt": {
          "CreateTrigStmt": {
            "events": 20,
            "funcname": [
              {
                "String": {
                  "sval": "tg_hslot_biu",
                },
              },
            ],
            "relation": {
              "inh": true,
              "location": 59,
              "relname": "hslot",
              "relpersistence": "p",
            },
            "row": true,
            "timing": 2,
            "trigname": "tg_hslot_biu",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 374 1`] = `
[
  "create function tg_hslot_bd() returns trigger as '
declare
    hubrec	record;
begin
    select into hubrec * from Hub where name = old.hubname;
    if not found then
        return old;
    end if;
    if old.slotno > hubrec.nslots then
        return old;
    end if;
    raise exception ''no manual manipulation of HSlot'';
end;
' language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "tg_hslot_bd",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare
    hubrec	record;
begin
    select into hubrec * from Hub where name = old.hubname;
    if not found then
        return old;
    end if;
    if old.slotno > hubrec.nslots then
        return old;
    end if;
    raise exception 'no manual manipulation of HSlot';
end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 46,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 333,
                },
              },
            ],
            "returnType": {
              "location": 38,
              "names": [
                {
                  "String": {
                    "sval": "trigger",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 389 1`] = `
[
  "create trigger tg_hslot_bd before delete
    on HSlot for each row execute procedure tg_hslot_bd()",
  {
    "stmts": [
      {
        "stmt": {
          "CreateTrigStmt": {
            "events": 8,
            "funcname": [
              {
                "String": {
                  "sval": "tg_hslot_bd",
                },
              },
            ],
            "relation": {
              "inh": true,
              "location": 48,
              "relname": "hslot",
              "relpersistence": "p",
            },
            "row": true,
            "timing": 2,
            "trigname": "tg_hslot_bd",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 397 1`] = `
[
  "create function tg_chkslotname() returns trigger as '
begin
    if substr(new.slotname, 1, 2) != tg_argv[0] then
        raise exception ''slotname must begin with %'', tg_argv[0];
    end if;
    return new;
end;
' language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "tg_chkslotname",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
begin
    if substr(new.slotname, 1, 2) != tg_argv[0] then
        raise exception 'slotname must begin with %', tg_argv[0];
    end if;
    return new;
end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 49,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 216,
                },
              },
            ],
            "returnType": {
              "location": 41,
              "names": [
                {
                  "String": {
                    "sval": "trigger",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 406 1`] = `
[
  "create trigger tg_chkslotname before insert
    on PSlot for each row execute procedure tg_chkslotname('PS')",
  {
    "stmts": [
      {
        "stmt": {
          "CreateTrigStmt": {
            "args": [
              {
                "String": {
                  "sval": "PS",
                },
              },
            ],
            "events": 4,
            "funcname": [
              {
                "String": {
                  "sval": "tg_chkslotname",
                },
              },
            ],
            "relation": {
              "inh": true,
              "location": 51,
              "relname": "pslot",
              "relpersistence": "p",
            },
            "row": true,
            "timing": 2,
            "trigname": "tg_chkslotname",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 409 1`] = `
[
  "create trigger tg_chkslotname before insert
    on WSlot for each row execute procedure tg_chkslotname('WS')",
  {
    "stmts": [
      {
        "stmt": {
          "CreateTrigStmt": {
            "args": [
              {
                "String": {
                  "sval": "WS",
                },
              },
            ],
            "events": 4,
            "funcname": [
              {
                "String": {
                  "sval": "tg_chkslotname",
                },
              },
            ],
            "relation": {
              "inh": true,
              "location": 51,
              "relname": "wslot",
              "relpersistence": "p",
            },
            "row": true,
            "timing": 2,
            "trigname": "tg_chkslotname",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 412 1`] = `
[
  "create trigger tg_chkslotname before insert
    on PLine for each row execute procedure tg_chkslotname('PL')",
  {
    "stmts": [
      {
        "stmt": {
          "CreateTrigStmt": {
            "args": [
              {
                "String": {
                  "sval": "PL",
                },
              },
            ],
            "events": 4,
            "funcname": [
              {
                "String": {
                  "sval": "tg_chkslotname",
                },
              },
            ],
            "relation": {
              "inh": true,
              "location": 51,
              "relname": "pline",
              "relpersistence": "p",
            },
            "row": true,
            "timing": 2,
            "trigname": "tg_chkslotname",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 415 1`] = `
[
  "create trigger tg_chkslotname before insert
    on IFace for each row execute procedure tg_chkslotname('IF')",
  {
    "stmts": [
      {
        "stmt": {
          "CreateTrigStmt": {
            "args": [
              {
                "String": {
                  "sval": "IF",
                },
              },
            ],
            "events": 4,
            "funcname": [
              {
                "String": {
                  "sval": "tg_chkslotname",
                },
              },
            ],
            "relation": {
              "inh": true,
              "location": 51,
              "relname": "iface",
              "relpersistence": "p",
            },
            "row": true,
            "timing": 2,
            "trigname": "tg_chkslotname",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 418 1`] = `
[
  "create trigger tg_chkslotname before insert
    on PHone for each row execute procedure tg_chkslotname('PH')",
  {
    "stmts": [
      {
        "stmt": {
          "CreateTrigStmt": {
            "args": [
              {
                "String": {
                  "sval": "PH",
                },
              },
            ],
            "events": 4,
            "funcname": [
              {
                "String": {
                  "sval": "tg_chkslotname",
                },
              },
            ],
            "relation": {
              "inh": true,
              "location": 51,
              "relname": "phone",
              "relpersistence": "p",
            },
            "row": true,
            "timing": 2,
            "trigname": "tg_chkslotname",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 426 1`] = `
[
  "create function tg_chkslotlink() returns trigger as '
begin
    if new.slotlink isnull then
        new.slotlink := '''';
    end if;
    return new;
end;
' language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "tg_chkslotlink",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
begin
    if new.slotlink isnull then
        new.slotlink := '';
    end if;
    return new;
end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 49,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 157,
                },
              },
            ],
            "returnType": {
              "location": 41,
              "names": [
                {
                  "String": {
                    "sval": "trigger",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 435 1`] = `
[
  "create trigger tg_chkslotlink before insert or update
    on PSlot for each row execute procedure tg_chkslotlink()",
  {
    "stmts": [
      {
        "stmt": {
          "CreateTrigStmt": {
            "events": 20,
            "funcname": [
              {
                "String": {
                  "sval": "tg_chkslotlink",
                },
              },
            ],
            "relation": {
              "inh": true,
              "location": 61,
              "relname": "pslot",
              "relpersistence": "p",
            },
            "row": true,
            "timing": 2,
            "trigname": "tg_chkslotlink",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 438 1`] = `
[
  "create trigger tg_chkslotlink before insert or update
    on WSlot for each row execute procedure tg_chkslotlink()",
  {
    "stmts": [
      {
        "stmt": {
          "CreateTrigStmt": {
            "events": 20,
            "funcname": [
              {
                "String": {
                  "sval": "tg_chkslotlink",
                },
              },
            ],
            "relation": {
              "inh": true,
              "location": 61,
              "relname": "wslot",
              "relpersistence": "p",
            },
            "row": true,
            "timing": 2,
            "trigname": "tg_chkslotlink",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 441 1`] = `
[
  "create trigger tg_chkslotlink before insert or update
    on IFace for each row execute procedure tg_chkslotlink()",
  {
    "stmts": [
      {
        "stmt": {
          "CreateTrigStmt": {
            "events": 20,
            "funcname": [
              {
                "String": {
                  "sval": "tg_chkslotlink",
                },
              },
            ],
            "relation": {
              "inh": true,
              "location": 61,
              "relname": "iface",
              "relpersistence": "p",
            },
            "row": true,
            "timing": 2,
            "trigname": "tg_chkslotlink",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 444 1`] = `
[
  "create trigger tg_chkslotlink before insert or update
    on HSlot for each row execute procedure tg_chkslotlink()",
  {
    "stmts": [
      {
        "stmt": {
          "CreateTrigStmt": {
            "events": 20,
            "funcname": [
              {
                "String": {
                  "sval": "tg_chkslotlink",
                },
              },
            ],
            "relation": {
              "inh": true,
              "location": 61,
              "relname": "hslot",
              "relpersistence": "p",
            },
            "row": true,
            "timing": 2,
            "trigname": "tg_chkslotlink",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 447 1`] = `
[
  "create trigger tg_chkslotlink before insert or update
    on PHone for each row execute procedure tg_chkslotlink()",
  {
    "stmts": [
      {
        "stmt": {
          "CreateTrigStmt": {
            "events": 20,
            "funcname": [
              {
                "String": {
                  "sval": "tg_chkslotlink",
                },
              },
            ],
            "relation": {
              "inh": true,
              "location": 61,
              "relname": "phone",
              "relpersistence": "p",
            },
            "row": true,
            "timing": 2,
            "trigname": "tg_chkslotlink",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 455 1`] = `
[
  "create function tg_chkbacklink() returns trigger as '
begin
    if new.backlink isnull then
        new.backlink := '''';
    end if;
    return new;
end;
' language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "tg_chkbacklink",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
begin
    if new.backlink isnull then
        new.backlink := '';
    end if;
    return new;
end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 49,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 157,
                },
              },
            ],
            "returnType": {
              "location": 41,
              "names": [
                {
                  "String": {
                    "sval": "trigger",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 464 1`] = `
[
  "create trigger tg_chkbacklink before insert or update
    on PSlot for each row execute procedure tg_chkbacklink()",
  {
    "stmts": [
      {
        "stmt": {
          "CreateTrigStmt": {
            "events": 20,
            "funcname": [
              {
                "String": {
                  "sval": "tg_chkbacklink",
                },
              },
            ],
            "relation": {
              "inh": true,
              "location": 61,
              "relname": "pslot",
              "relpersistence": "p",
            },
            "row": true,
            "timing": 2,
            "trigname": "tg_chkbacklink",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 467 1`] = `
[
  "create trigger tg_chkbacklink before insert or update
    on WSlot for each row execute procedure tg_chkbacklink()",
  {
    "stmts": [
      {
        "stmt": {
          "CreateTrigStmt": {
            "events": 20,
            "funcname": [
              {
                "String": {
                  "sval": "tg_chkbacklink",
                },
              },
            ],
            "relation": {
              "inh": true,
              "location": 61,
              "relname": "wslot",
              "relpersistence": "p",
            },
            "row": true,
            "timing": 2,
            "trigname": "tg_chkbacklink",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 470 1`] = `
[
  "create trigger tg_chkbacklink before insert or update
    on PLine for each row execute procedure tg_chkbacklink()",
  {
    "stmts": [
      {
        "stmt": {
          "CreateTrigStmt": {
            "events": 20,
            "funcname": [
              {
                "String": {
                  "sval": "tg_chkbacklink",
                },
              },
            ],
            "relation": {
              "inh": true,
              "location": 61,
              "relname": "pline",
              "relpersistence": "p",
            },
            "row": true,
            "timing": 2,
            "trigname": "tg_chkbacklink",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 478 1`] = `
[
  "create function tg_pslot_bu() returns trigger as '
begin
    if new.slotname != old.slotname then
        delete from PSlot where slotname = old.slotname;
	insert into PSlot (
		    slotname,
		    pfname,
		    slotlink,
		    backlink
		) values (
		    new.slotname,
		    new.pfname,
		    new.slotlink,
		    new.backlink
		);
        return null;
    end if;
    return new;
end;
' language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "tg_pslot_bu",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
begin
    if new.slotname != old.slotname then
        delete from PSlot where slotname = old.slotname;
	insert into PSlot (
		    slotname,
		    pfname,
		    slotlink,
		    backlink
		) values (
		    new.slotname,
		    new.pfname,
		    new.slotlink,
		    new.backlink
		);
        return null;
    end if;
    return new;
end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 46,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 388,
                },
              },
            ],
            "returnType": {
              "location": 38,
              "names": [
                {
                  "String": {
                    "sval": "trigger",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 499 1`] = `
[
  "create trigger tg_pslot_bu before update
    on PSlot for each row execute procedure tg_pslot_bu()",
  {
    "stmts": [
      {
        "stmt": {
          "CreateTrigStmt": {
            "events": 16,
            "funcname": [
              {
                "String": {
                  "sval": "tg_pslot_bu",
                },
              },
            ],
            "relation": {
              "inh": true,
              "location": 48,
              "relname": "pslot",
              "relpersistence": "p",
            },
            "row": true,
            "timing": 2,
            "trigname": "tg_pslot_bu",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 507 1`] = `
[
  "create function tg_wslot_bu() returns trigger as '
begin
    if new.slotname != old.slotname then
        delete from WSlot where slotname = old.slotname;
	insert into WSlot (
		    slotname,
		    roomno,
		    slotlink,
		    backlink
		) values (
		    new.slotname,
		    new.roomno,
		    new.slotlink,
		    new.backlink
		);
        return null;
    end if;
    return new;
end;
' language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "tg_wslot_bu",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
begin
    if new.slotname != old.slotname then
        delete from WSlot where slotname = old.slotname;
	insert into WSlot (
		    slotname,
		    roomno,
		    slotlink,
		    backlink
		) values (
		    new.slotname,
		    new.roomno,
		    new.slotlink,
		    new.backlink
		);
        return null;
    end if;
    return new;
end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 46,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 388,
                },
              },
            ],
            "returnType": {
              "location": 38,
              "names": [
                {
                  "String": {
                    "sval": "trigger",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 528 1`] = `
[
  "create trigger tg_wslot_bu before update
    on WSlot for each row execute procedure tg_Wslot_bu()",
  {
    "stmts": [
      {
        "stmt": {
          "CreateTrigStmt": {
            "events": 16,
            "funcname": [
              {
                "String": {
                  "sval": "tg_wslot_bu",
                },
              },
            ],
            "relation": {
              "inh": true,
              "location": 48,
              "relname": "wslot",
              "relpersistence": "p",
            },
            "row": true,
            "timing": 2,
            "trigname": "tg_wslot_bu",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 536 1`] = `
[
  "create function tg_pline_bu() returns trigger as '
begin
    if new.slotname != old.slotname then
        delete from PLine where slotname = old.slotname;
	insert into PLine (
		    slotname,
		    phonenumber,
		    comment,
		    backlink
		) values (
		    new.slotname,
		    new.phonenumber,
		    new.comment,
		    new.backlink
		);
        return null;
    end if;
    return new;
end;
' language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "tg_pline_bu",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
begin
    if new.slotname != old.slotname then
        delete from PLine where slotname = old.slotname;
	insert into PLine (
		    slotname,
		    phonenumber,
		    comment,
		    backlink
		) values (
		    new.slotname,
		    new.phonenumber,
		    new.comment,
		    new.backlink
		);
        return null;
    end if;
    return new;
end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 46,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 396,
                },
              },
            ],
            "returnType": {
              "location": 38,
              "names": [
                {
                  "String": {
                    "sval": "trigger",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 557 1`] = `
[
  "create trigger tg_pline_bu before update
    on PLine for each row execute procedure tg_pline_bu()",
  {
    "stmts": [
      {
        "stmt": {
          "CreateTrigStmt": {
            "events": 16,
            "funcname": [
              {
                "String": {
                  "sval": "tg_pline_bu",
                },
              },
            ],
            "relation": {
              "inh": true,
              "location": 48,
              "relname": "pline",
              "relpersistence": "p",
            },
            "row": true,
            "timing": 2,
            "trigname": "tg_pline_bu",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 565 1`] = `
[
  "create function tg_iface_bu() returns trigger as '
begin
    if new.slotname != old.slotname then
        delete from IFace where slotname = old.slotname;
	insert into IFace (
		    slotname,
		    sysname,
		    ifname,
		    slotlink
		) values (
		    new.slotname,
		    new.sysname,
		    new.ifname,
		    new.slotlink
		);
        return null;
    end if;
    return new;
end;
' language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "tg_iface_bu",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
begin
    if new.slotname != old.slotname then
        delete from IFace where slotname = old.slotname;
	insert into IFace (
		    slotname,
		    sysname,
		    ifname,
		    slotlink
		) values (
		    new.slotname,
		    new.sysname,
		    new.ifname,
		    new.slotlink
		);
        return null;
    end if;
    return new;
end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 46,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 386,
                },
              },
            ],
            "returnType": {
              "location": 38,
              "names": [
                {
                  "String": {
                    "sval": "trigger",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 586 1`] = `
[
  "create trigger tg_iface_bu before update
    on IFace for each row execute procedure tg_iface_bu()",
  {
    "stmts": [
      {
        "stmt": {
          "CreateTrigStmt": {
            "events": 16,
            "funcname": [
              {
                "String": {
                  "sval": "tg_iface_bu",
                },
              },
            ],
            "relation": {
              "inh": true,
              "location": 48,
              "relname": "iface",
              "relpersistence": "p",
            },
            "row": true,
            "timing": 2,
            "trigname": "tg_iface_bu",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 594 1`] = `
[
  "create function tg_hslot_bu() returns trigger as '
begin
    if new.slotname != old.slotname or new.hubname != old.hubname then
        delete from HSlot where slotname = old.slotname;
	insert into HSlot (
		    slotname,
		    hubname,
		    slotno,
		    slotlink
		) values (
		    new.slotname,
		    new.hubname,
		    new.slotno,
		    new.slotlink
		);
        return null;
    end if;
    return new;
end;
' language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "tg_hslot_bu",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
begin
    if new.slotname != old.slotname or new.hubname != old.hubname then
        delete from HSlot where slotname = old.slotname;
	insert into HSlot (
		    slotname,
		    hubname,
		    slotno,
		    slotlink
		) values (
		    new.slotname,
		    new.hubname,
		    new.slotno,
		    new.slotlink
		);
        return null;
    end if;
    return new;
end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 46,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 416,
                },
              },
            ],
            "returnType": {
              "location": 38,
              "names": [
                {
                  "String": {
                    "sval": "trigger",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 615 1`] = `
[
  "create trigger tg_hslot_bu before update
    on HSlot for each row execute procedure tg_hslot_bu()",
  {
    "stmts": [
      {
        "stmt": {
          "CreateTrigStmt": {
            "events": 16,
            "funcname": [
              {
                "String": {
                  "sval": "tg_hslot_bu",
                },
              },
            ],
            "relation": {
              "inh": true,
              "location": 48,
              "relname": "hslot",
              "relpersistence": "p",
            },
            "row": true,
            "timing": 2,
            "trigname": "tg_hslot_bu",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 623 1`] = `
[
  "create function tg_phone_bu() returns trigger as '
begin
    if new.slotname != old.slotname then
        delete from PHone where slotname = old.slotname;
	insert into PHone (
		    slotname,
		    comment,
		    slotlink
		) values (
		    new.slotname,
		    new.comment,
		    new.slotlink
		);
        return null;
    end if;
    return new;
end;
' language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "tg_phone_bu",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
begin
    if new.slotname != old.slotname then
        delete from PHone where slotname = old.slotname;
	insert into PHone (
		    slotname,
		    comment,
		    slotlink
		) values (
		    new.slotname,
		    new.comment,
		    new.slotlink
		);
        return null;
    end if;
    return new;
end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 46,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 354,
                },
              },
            ],
            "returnType": {
              "location": 38,
              "names": [
                {
                  "String": {
                    "sval": "trigger",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 642 1`] = `
[
  "create trigger tg_phone_bu before update
    on PHone for each row execute procedure tg_phone_bu()",
  {
    "stmts": [
      {
        "stmt": {
          "CreateTrigStmt": {
            "events": 16,
            "funcname": [
              {
                "String": {
                  "sval": "tg_phone_bu",
                },
              },
            ],
            "relation": {
              "inh": true,
              "location": 48,
              "relname": "phone",
              "relpersistence": "p",
            },
            "row": true,
            "timing": 2,
            "trigname": "tg_phone_bu",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 650 1`] = `
[
  "create function tg_backlink_a() returns trigger as '
declare
    dummy	integer;
begin
    if tg_op = ''INSERT'' then
        if new.backlink != '''' then
	    dummy := tg_backlink_set(new.backlink, new.slotname);
	end if;
	return new;
    end if;
    if tg_op = ''UPDATE'' then
        if new.backlink != old.backlink then
	    if old.backlink != '''' then
	        dummy := tg_backlink_unset(old.backlink, old.slotname);
	    end if;
	    if new.backlink != '''' then
	        dummy := tg_backlink_set(new.backlink, new.slotname);
	    end if;
	else
	    if new.slotname != old.slotname and new.backlink != '''' then
	        dummy := tg_slotlink_set(new.backlink, new.slotname);
	    end if;
	end if;
	return new;
    end if;
    if tg_op = ''DELETE'' then
        if old.backlink != '''' then
	    dummy := tg_backlink_unset(old.backlink, old.slotname);
	end if;
	return old;
    end if;
end;
' language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "tg_backlink_a",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare
    dummy	integer;
begin
    if tg_op = 'INSERT' then
        if new.backlink != '' then
	    dummy := tg_backlink_set(new.backlink, new.slotname);
	end if;
	return new;
    end if;
    if tg_op = 'UPDATE' then
        if new.backlink != old.backlink then
	    if old.backlink != '' then
	        dummy := tg_backlink_unset(old.backlink, old.slotname);
	    end if;
	    if new.backlink != '' then
	        dummy := tg_backlink_set(new.backlink, new.slotname);
	    end if;
	else
	    if new.slotname != old.slotname and new.backlink != '' then
	        dummy := tg_slotlink_set(new.backlink, new.slotname);
	    end if;
	end if;
	return new;
    end if;
    if tg_op = 'DELETE' then
        if old.backlink != '' then
	    dummy := tg_backlink_unset(old.backlink, old.slotname);
	end if;
	return old;
    end if;
end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 48,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 898,
                },
              },
            ],
            "returnType": {
              "location": 40,
              "names": [
                {
                  "String": {
                    "sval": "trigger",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 688 1`] = `
[
  "create trigger tg_backlink_a after insert or update or delete
    on WSlot for each row execute procedure tg_backlink_a('WS')",
  {
    "stmts": [
      {
        "stmt": {
          "CreateTrigStmt": {
            "args": [
              {
                "String": {
                  "sval": "WS",
                },
              },
            ],
            "events": 28,
            "funcname": [
              {
                "String": {
                  "sval": "tg_backlink_a",
                },
              },
            ],
            "relation": {
              "inh": true,
              "location": 69,
              "relname": "wslot",
              "relpersistence": "p",
            },
            "row": true,
            "trigname": "tg_backlink_a",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 691 1`] = `
[
  "create trigger tg_backlink_a after insert or update or delete
    on PLine for each row execute procedure tg_backlink_a('PL')",
  {
    "stmts": [
      {
        "stmt": {
          "CreateTrigStmt": {
            "args": [
              {
                "String": {
                  "sval": "PL",
                },
              },
            ],
            "events": 28,
            "funcname": [
              {
                "String": {
                  "sval": "tg_backlink_a",
                },
              },
            ],
            "relation": {
              "inh": true,
              "location": 69,
              "relname": "pline",
              "relpersistence": "p",
            },
            "row": true,
            "trigname": "tg_backlink_a",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 699 1`] = `
[
  "create function tg_backlink_set(myname bpchar, blname bpchar)
returns integer as '
declare
    mytype	char(2);
    link	char(4);
    rec		record;
begin
    mytype := substr(myname, 1, 2);
    link := mytype || substr(blname, 1, 2);
    if link = ''PLPL'' then
        raise exception
		''backlink between two phone lines does not make sense'';
    end if;
    if link in (''PLWS'', ''WSPL'') then
        raise exception
		''direct link of phone line to wall slot not permitted'';
    end if;
    if mytype = ''PS'' then
        select into rec * from PSlot where slotname = myname;
	if not found then
	    raise exception ''% does not exist'', myname;
	end if;
	if rec.backlink != blname then
	    update PSlot set backlink = blname where slotname = myname;
	end if;
	return 0;
    end if;
    if mytype = ''WS'' then
        select into rec * from WSlot where slotname = myname;
	if not found then
	    raise exception ''% does not exist'', myname;
	end if;
	if rec.backlink != blname then
	    update WSlot set backlink = blname where slotname = myname;
	end if;
	return 0;
    end if;
    if mytype = ''PL'' then
        select into rec * from PLine where slotname = myname;
	if not found then
	    raise exception ''% does not exist'', myname;
	end if;
	if rec.backlink != blname then
	    update PLine set backlink = blname where slotname = myname;
	end if;
	return 0;
    end if;
    raise exception ''illegal backlink beginning with %'', mytype;
end;
' language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "tg_backlink_set",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare
    mytype	char(2);
    link	char(4);
    rec		record;
begin
    mytype := substr(myname, 1, 2);
    link := mytype || substr(blname, 1, 2);
    if link = 'PLPL' then
        raise exception
		'backlink between two phone lines does not make sense';
    end if;
    if link in ('PLWS', 'WSPL') then
        raise exception
		'direct link of phone line to wall slot not permitted';
    end if;
    if mytype = 'PS' then
        select into rec * from PSlot where slotname = myname;
	if not found then
	    raise exception '% does not exist', myname;
	end if;
	if rec.backlink != blname then
	    update PSlot set backlink = blname where slotname = myname;
	end if;
	return 0;
    end if;
    if mytype = 'WS' then
        select into rec * from WSlot where slotname = myname;
	if not found then
	    raise exception '% does not exist', myname;
	end if;
	if rec.backlink != blname then
	    update WSlot set backlink = blname where slotname = myname;
	end if;
	return 0;
    end if;
    if mytype = 'PL' then
        select into rec * from PLine where slotname = myname;
	if not found then
	    raise exception '% does not exist', myname;
	end if;
	if rec.backlink != blname then
	    update PLine set backlink = blname where slotname = myname;
	end if;
	return 0;
    end if;
    raise exception 'illegal backlink beginning with %', mytype;
end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 78,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 1461,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 39,
                    "names": [
                      {
                        "String": {
                          "sval": "bpchar",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                  "name": "myname",
                },
              },
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 54,
                    "names": [
                      {
                        "String": {
                          "sval": "bpchar",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                  "name": "blname",
                },
              },
            ],
            "returnType": {
              "location": 70,
              "names": [
                {
                  "String": {
                    "sval": "pg_catalog",
                  },
                },
                {
                  "String": {
                    "sval": "int4",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 755 1`] = `
[
  "create function tg_backlink_unset(bpchar, bpchar)
returns integer as '
declare
    myname	alias for $1;
    blname	alias for $2;
    mytype	char(2);
    rec		record;
begin
    mytype := substr(myname, 1, 2);
    if mytype = ''PS'' then
        select into rec * from PSlot where slotname = myname;
	if not found then
	    return 0;
	end if;
	if rec.backlink = blname then
	    update PSlot set backlink = '''' where slotname = myname;
	end if;
	return 0;
    end if;
    if mytype = ''WS'' then
        select into rec * from WSlot where slotname = myname;
	if not found then
	    return 0;
	end if;
	if rec.backlink = blname then
	    update WSlot set backlink = '''' where slotname = myname;
	end if;
	return 0;
    end if;
    if mytype = ''PL'' then
        select into rec * from PLine where slotname = myname;
	if not found then
	    return 0;
	end if;
	if rec.backlink = blname then
	    update PLine set backlink = '''' where slotname = myname;
	end if;
	return 0;
    end if;
end
' language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "tg_backlink_unset",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare
    myname	alias for $1;
    blname	alias for $2;
    mytype	char(2);
    rec		record;
begin
    mytype := substr(myname, 1, 2);
    if mytype = 'PS' then
        select into rec * from PSlot where slotname = myname;
	if not found then
	    return 0;
	end if;
	if rec.backlink = blname then
	    update PSlot set backlink = '' where slotname = myname;
	end if;
	return 0;
    end if;
    if mytype = 'WS' then
        select into rec * from WSlot where slotname = myname;
	if not found then
	    return 0;
	end if;
	if rec.backlink = blname then
	    update WSlot set backlink = '' where slotname = myname;
	end if;
	return 0;
    end if;
    if mytype = 'PL' then
        select into rec * from PLine where slotname = myname;
	if not found then
	    return 0;
	end if;
	if rec.backlink = blname then
	    update PLine set backlink = '' where slotname = myname;
	end if;
	return 0;
    end if;
end
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 66,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 991,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 34,
                    "names": [
                      {
                        "String": {
                          "sval": "bpchar",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                },
              },
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 42,
                    "names": [
                      {
                        "String": {
                          "sval": "bpchar",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                },
              },
            ],
            "returnType": {
              "location": 58,
              "names": [
                {
                  "String": {
                    "sval": "pg_catalog",
                  },
                },
                {
                  "String": {
                    "sval": "int4",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 802 1`] = `
[
  "create function tg_slotlink_a() returns trigger as '
declare
    dummy	integer;
begin
    if tg_op = ''INSERT'' then
        if new.slotlink != '''' then
	    dummy := tg_slotlink_set(new.slotlink, new.slotname);
	end if;
	return new;
    end if;
    if tg_op = ''UPDATE'' then
        if new.slotlink != old.slotlink then
	    if old.slotlink != '''' then
	        dummy := tg_slotlink_unset(old.slotlink, old.slotname);
	    end if;
	    if new.slotlink != '''' then
	        dummy := tg_slotlink_set(new.slotlink, new.slotname);
	    end if;
	else
	    if new.slotname != old.slotname and new.slotlink != '''' then
	        dummy := tg_slotlink_set(new.slotlink, new.slotname);
	    end if;
	end if;
	return new;
    end if;
    if tg_op = ''DELETE'' then
        if old.slotlink != '''' then
	    dummy := tg_slotlink_unset(old.slotlink, old.slotname);
	end if;
	return old;
    end if;
end;
' language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "tg_slotlink_a",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare
    dummy	integer;
begin
    if tg_op = 'INSERT' then
        if new.slotlink != '' then
	    dummy := tg_slotlink_set(new.slotlink, new.slotname);
	end if;
	return new;
    end if;
    if tg_op = 'UPDATE' then
        if new.slotlink != old.slotlink then
	    if old.slotlink != '' then
	        dummy := tg_slotlink_unset(old.slotlink, old.slotname);
	    end if;
	    if new.slotlink != '' then
	        dummy := tg_slotlink_set(new.slotlink, new.slotname);
	    end if;
	else
	    if new.slotname != old.slotname and new.slotlink != '' then
	        dummy := tg_slotlink_set(new.slotlink, new.slotname);
	    end if;
	end if;
	return new;
    end if;
    if tg_op = 'DELETE' then
        if old.slotlink != '' then
	    dummy := tg_slotlink_unset(old.slotlink, old.slotname);
	end if;
	return old;
    end if;
end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 48,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 898,
                },
              },
            ],
            "returnType": {
              "location": 40,
              "names": [
                {
                  "String": {
                    "sval": "trigger",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 840 1`] = `
[
  "create trigger tg_slotlink_a after insert or update or delete
    on WSlot for each row execute procedure tg_slotlink_a('WS')",
  {
    "stmts": [
      {
        "stmt": {
          "CreateTrigStmt": {
            "args": [
              {
                "String": {
                  "sval": "WS",
                },
              },
            ],
            "events": 28,
            "funcname": [
              {
                "String": {
                  "sval": "tg_slotlink_a",
                },
              },
            ],
            "relation": {
              "inh": true,
              "location": 69,
              "relname": "wslot",
              "relpersistence": "p",
            },
            "row": true,
            "trigname": "tg_slotlink_a",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 843 1`] = `
[
  "create trigger tg_slotlink_a after insert or update or delete
    on IFace for each row execute procedure tg_slotlink_a('IF')",
  {
    "stmts": [
      {
        "stmt": {
          "CreateTrigStmt": {
            "args": [
              {
                "String": {
                  "sval": "IF",
                },
              },
            ],
            "events": 28,
            "funcname": [
              {
                "String": {
                  "sval": "tg_slotlink_a",
                },
              },
            ],
            "relation": {
              "inh": true,
              "location": 69,
              "relname": "iface",
              "relpersistence": "p",
            },
            "row": true,
            "trigname": "tg_slotlink_a",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 846 1`] = `
[
  "create trigger tg_slotlink_a after insert or update or delete
    on HSlot for each row execute procedure tg_slotlink_a('HS')",
  {
    "stmts": [
      {
        "stmt": {
          "CreateTrigStmt": {
            "args": [
              {
                "String": {
                  "sval": "HS",
                },
              },
            ],
            "events": 28,
            "funcname": [
              {
                "String": {
                  "sval": "tg_slotlink_a",
                },
              },
            ],
            "relation": {
              "inh": true,
              "location": 69,
              "relname": "hslot",
              "relpersistence": "p",
            },
            "row": true,
            "trigname": "tg_slotlink_a",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 849 1`] = `
[
  "create trigger tg_slotlink_a after insert or update or delete
    on PHone for each row execute procedure tg_slotlink_a('PH')",
  {
    "stmts": [
      {
        "stmt": {
          "CreateTrigStmt": {
            "args": [
              {
                "String": {
                  "sval": "PH",
                },
              },
            ],
            "events": 28,
            "funcname": [
              {
                "String": {
                  "sval": "tg_slotlink_a",
                },
              },
            ],
            "relation": {
              "inh": true,
              "location": 69,
              "relname": "phone",
              "relpersistence": "p",
            },
            "row": true,
            "trigname": "tg_slotlink_a",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 857 1`] = `
[
  "create function tg_slotlink_set(bpchar, bpchar)
returns integer as '
declare
    myname	alias for $1;
    blname	alias for $2;
    mytype	char(2);
    link	char(4);
    rec		record;
begin
    mytype := substr(myname, 1, 2);
    link := mytype || substr(blname, 1, 2);
    if link = ''PHPH'' then
        raise exception
		''slotlink between two phones does not make sense'';
    end if;
    if link in (''PHHS'', ''HSPH'') then
        raise exception
		''link of phone to hub does not make sense'';
    end if;
    if link in (''PHIF'', ''IFPH'') then
        raise exception
		''link of phone to hub does not make sense'';
    end if;
    if link in (''PSWS'', ''WSPS'') then
        raise exception
		''slotlink from patchslot to wallslot not permitted'';
    end if;
    if mytype = ''PS'' then
        select into rec * from PSlot where slotname = myname;
	if not found then
	    raise exception ''% does not exist'', myname;
	end if;
	if rec.slotlink != blname then
	    update PSlot set slotlink = blname where slotname = myname;
	end if;
	return 0;
    end if;
    if mytype = ''WS'' then
        select into rec * from WSlot where slotname = myname;
	if not found then
	    raise exception ''% does not exist'', myname;
	end if;
	if rec.slotlink != blname then
	    update WSlot set slotlink = blname where slotname = myname;
	end if;
	return 0;
    end if;
    if mytype = ''IF'' then
        select into rec * from IFace where slotname = myname;
	if not found then
	    raise exception ''% does not exist'', myname;
	end if;
	if rec.slotlink != blname then
	    update IFace set slotlink = blname where slotname = myname;
	end if;
	return 0;
    end if;
    if mytype = ''HS'' then
        select into rec * from HSlot where slotname = myname;
	if not found then
	    raise exception ''% does not exist'', myname;
	end if;
	if rec.slotlink != blname then
	    update HSlot set slotlink = blname where slotname = myname;
	end if;
	return 0;
    end if;
    if mytype = ''PH'' then
        select into rec * from PHone where slotname = myname;
	if not found then
	    raise exception ''% does not exist'', myname;
	end if;
	if rec.slotlink != blname then
	    update PHone set slotlink = blname where slotname = myname;
	end if;
	return 0;
    end if;
    raise exception ''illegal slotlink beginning with %'', mytype;
end;
' language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "tg_slotlink_set",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare
    myname	alias for $1;
    blname	alias for $2;
    mytype	char(2);
    link	char(4);
    rec		record;
begin
    mytype := substr(myname, 1, 2);
    link := mytype || substr(blname, 1, 2);
    if link = 'PHPH' then
        raise exception
		'slotlink between two phones does not make sense';
    end if;
    if link in ('PHHS', 'HSPH') then
        raise exception
		'link of phone to hub does not make sense';
    end if;
    if link in ('PHIF', 'IFPH') then
        raise exception
		'link of phone to hub does not make sense';
    end if;
    if link in ('PSWS', 'WSPS') then
        raise exception
		'slotlink from patchslot to wallslot not permitted';
    end if;
    if mytype = 'PS' then
        select into rec * from PSlot where slotname = myname;
	if not found then
	    raise exception '% does not exist', myname;
	end if;
	if rec.slotlink != blname then
	    update PSlot set slotlink = blname where slotname = myname;
	end if;
	return 0;
    end if;
    if mytype = 'WS' then
        select into rec * from WSlot where slotname = myname;
	if not found then
	    raise exception '% does not exist', myname;
	end if;
	if rec.slotlink != blname then
	    update WSlot set slotlink = blname where slotname = myname;
	end if;
	return 0;
    end if;
    if mytype = 'IF' then
        select into rec * from IFace where slotname = myname;
	if not found then
	    raise exception '% does not exist', myname;
	end if;
	if rec.slotlink != blname then
	    update IFace set slotlink = blname where slotname = myname;
	end if;
	return 0;
    end if;
    if mytype = 'HS' then
        select into rec * from HSlot where slotname = myname;
	if not found then
	    raise exception '% does not exist', myname;
	end if;
	if rec.slotlink != blname then
	    update HSlot set slotlink = blname where slotname = myname;
	end if;
	return 0;
    end if;
    if mytype = 'PH' then
        select into rec * from PHone where slotname = myname;
	if not found then
	    raise exception '% does not exist', myname;
	end if;
	if rec.slotlink != blname then
	    update PHone set slotlink = blname where slotname = myname;
	end if;
	return 0;
    end if;
    raise exception 'illegal slotlink beginning with %', mytype;
end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 64,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 2335,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 32,
                    "names": [
                      {
                        "String": {
                          "sval": "bpchar",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                },
              },
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 40,
                    "names": [
                      {
                        "String": {
                          "sval": "bpchar",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                },
              },
            ],
            "returnType": {
              "location": 56,
              "names": [
                {
                  "String": {
                    "sval": "pg_catalog",
                  },
                },
                {
                  "String": {
                    "sval": "int4",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 943 1`] = `
[
  "create function tg_slotlink_unset(bpchar, bpchar)
returns integer as '
declare
    myname	alias for $1;
    blname	alias for $2;
    mytype	char(2);
    rec		record;
begin
    mytype := substr(myname, 1, 2);
    if mytype = ''PS'' then
        select into rec * from PSlot where slotname = myname;
	if not found then
	    return 0;
	end if;
	if rec.slotlink = blname then
	    update PSlot set slotlink = '''' where slotname = myname;
	end if;
	return 0;
    end if;
    if mytype = ''WS'' then
        select into rec * from WSlot where slotname = myname;
	if not found then
	    return 0;
	end if;
	if rec.slotlink = blname then
	    update WSlot set slotlink = '''' where slotname = myname;
	end if;
	return 0;
    end if;
    if mytype = ''IF'' then
        select into rec * from IFace where slotname = myname;
	if not found then
	    return 0;
	end if;
	if rec.slotlink = blname then
	    update IFace set slotlink = '''' where slotname = myname;
	end if;
	return 0;
    end if;
    if mytype = ''HS'' then
        select into rec * from HSlot where slotname = myname;
	if not found then
	    return 0;
	end if;
	if rec.slotlink = blname then
	    update HSlot set slotlink = '''' where slotname = myname;
	end if;
	return 0;
    end if;
    if mytype = ''PH'' then
        select into rec * from PHone where slotname = myname;
	if not found then
	    return 0;
	end if;
	if rec.slotlink = blname then
	    update PHone set slotlink = '''' where slotname = myname;
	end if;
	return 0;
    end if;
end;
' language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "tg_slotlink_unset",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare
    myname	alias for $1;
    blname	alias for $2;
    mytype	char(2);
    rec		record;
begin
    mytype := substr(myname, 1, 2);
    if mytype = 'PS' then
        select into rec * from PSlot where slotname = myname;
	if not found then
	    return 0;
	end if;
	if rec.slotlink = blname then
	    update PSlot set slotlink = '' where slotname = myname;
	end if;
	return 0;
    end if;
    if mytype = 'WS' then
        select into rec * from WSlot where slotname = myname;
	if not found then
	    return 0;
	end if;
	if rec.slotlink = blname then
	    update WSlot set slotlink = '' where slotname = myname;
	end if;
	return 0;
    end if;
    if mytype = 'IF' then
        select into rec * from IFace where slotname = myname;
	if not found then
	    return 0;
	end if;
	if rec.slotlink = blname then
	    update IFace set slotlink = '' where slotname = myname;
	end if;
	return 0;
    end if;
    if mytype = 'HS' then
        select into rec * from HSlot where slotname = myname;
	if not found then
	    return 0;
	end if;
	if rec.slotlink = blname then
	    update HSlot set slotlink = '' where slotname = myname;
	end if;
	return 0;
    end if;
    if mytype = 'PH' then
        select into rec * from PHone where slotname = myname;
	if not found then
	    return 0;
	end if;
	if rec.slotlink = blname then
	    update PHone set slotlink = '' where slotname = myname;
	end if;
	return 0;
    end if;
end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 66,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 1510,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 34,
                    "names": [
                      {
                        "String": {
                          "sval": "bpchar",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                },
              },
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 42,
                    "names": [
                      {
                        "String": {
                          "sval": "bpchar",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                },
              },
            ],
            "returnType": {
              "location": 58,
              "names": [
                {
                  "String": {
                    "sval": "pg_catalog",
                  },
                },
                {
                  "String": {
                    "sval": "int4",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1009 1`] = `
[
  "create function pslot_backlink_view(bpchar)
returns text as '
<<outer>>
declare
    rec		record;
    bltype	char(2);
    retval	text;
begin
    select into rec * from PSlot where slotname = $1;
    if not found then
        return '''';
    end if;
    if rec.backlink = '''' then
        return ''-'';
    end if;
    bltype := substr(rec.backlink, 1, 2);
    if bltype = ''PL'' then
        declare
	    rec		record;
	begin
	    select into rec * from PLine where slotname = "outer".rec.backlink;
	    retval := ''Phone line '' || trim(rec.phonenumber);
	    if rec.comment != '''' then
	        retval := retval || '' ('';
		retval := retval || rec.comment;
		retval := retval || '')'';
	    end if;
	    return retval;
	end;
    end if;
    if bltype = ''WS'' then
        select into rec * from WSlot where slotname = rec.backlink;
	retval := trim(rec.slotname) || '' in room '';
	retval := retval || trim(rec.roomno);
	retval := retval || '' -> '';
	return retval || wslot_slotlink_view(rec.slotname);
    end if;
    return rec.backlink;
end;
' language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "pslot_backlink_view",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
<<outer>>
declare
    rec		record;
    bltype	char(2);
    retval	text;
begin
    select into rec * from PSlot where slotname = $1;
    if not found then
        return '';
    end if;
    if rec.backlink = '' then
        return '-';
    end if;
    bltype := substr(rec.backlink, 1, 2);
    if bltype = 'PL' then
        declare
	    rec		record;
	begin
	    select into rec * from PLine where slotname = "outer".rec.backlink;
	    retval := 'Phone line ' || trim(rec.phonenumber);
	    if rec.comment != '' then
	        retval := retval || ' (';
		retval := retval || rec.comment;
		retval := retval || ')';
	    end if;
	    return retval;
	end;
    end if;
    if bltype = 'WS' then
        select into rec * from WSlot where slotname = rec.backlink;
	retval := trim(rec.slotname) || ' in room ';
	retval := retval || trim(rec.roomno);
	retval := retval || ' -> ';
	return retval || wslot_slotlink_view(rec.slotname);
    end if;
    return rec.backlink;
end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 57,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 1052,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 36,
                    "names": [
                      {
                        "String": {
                          "sval": "bpchar",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                },
              },
            ],
            "returnType": {
              "location": 52,
              "names": [
                {
                  "String": {
                    "sval": "text",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1054 1`] = `
[
  "create function pslot_slotlink_view(bpchar)
returns text as '
declare
    psrec	record;
    sltype	char(2);
    retval	text;
begin
    select into psrec * from PSlot where slotname = $1;
    if not found then
        return '''';
    end if;
    if psrec.slotlink = '''' then
        return ''-'';
    end if;
    sltype := substr(psrec.slotlink, 1, 2);
    if sltype = ''PS'' then
	retval := trim(psrec.slotlink) || '' -> '';
	return retval || pslot_backlink_view(psrec.slotlink);
    end if;
    if sltype = ''HS'' then
        retval := comment from Hub H, HSlot HS
			where HS.slotname = psrec.slotlink
			  and H.name = HS.hubname;
        retval := retval || '' slot '';
	retval := retval || slotno::text from HSlot
			where slotname = psrec.slotlink;
	return retval;
    end if;
    return psrec.slotlink;
end;
' language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "pslot_slotlink_view",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare
    psrec	record;
    sltype	char(2);
    retval	text;
begin
    select into psrec * from PSlot where slotname = $1;
    if not found then
        return '';
    end if;
    if psrec.slotlink = '' then
        return '-';
    end if;
    sltype := substr(psrec.slotlink, 1, 2);
    if sltype = 'PS' then
	retval := trim(psrec.slotlink) || ' -> ';
	return retval || pslot_backlink_view(psrec.slotlink);
    end if;
    if sltype = 'HS' then
        retval := comment from Hub H, HSlot HS
			where HS.slotname = psrec.slotlink
			  and H.name = HS.hubname;
        retval := retval || ' slot ';
	retval := retval || slotno::text from HSlot
			where slotname = psrec.slotlink;
	return retval;
    end if;
    return psrec.slotlink;
end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 57,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 820,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 36,
                    "names": [
                      {
                        "String": {
                          "sval": "bpchar",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                },
              },
            ],
            "returnType": {
              "location": 52,
              "names": [
                {
                  "String": {
                    "sval": "text",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1090 1`] = `
[
  "create function wslot_slotlink_view(bpchar)
returns text as '
declare
    rec		record;
    sltype	char(2);
    retval	text;
begin
    select into rec * from WSlot where slotname = $1;
    if not found then
        return '''';
    end if;
    if rec.slotlink = '''' then
        return ''-'';
    end if;
    sltype := substr(rec.slotlink, 1, 2);
    if sltype = ''PH'' then
        select into rec * from PHone where slotname = rec.slotlink;
	retval := ''Phone '' || trim(rec.slotname);
	if rec.comment != '''' then
	    retval := retval || '' ('';
	    retval := retval || rec.comment;
	    retval := retval || '')'';
	end if;
	return retval;
    end if;
    if sltype = ''IF'' then
	declare
	    syrow	System%RowType;
	    ifrow	IFace%ROWTYPE;
        begin
	    select into ifrow * from IFace where slotname = rec.slotlink;
	    select into syrow * from System where name = ifrow.sysname;
	    retval := syrow.name || '' IF '';
	    retval := retval || ifrow.ifname;
	    if syrow.comment != '''' then
	        retval := retval || '' ('';
		retval := retval || syrow.comment;
		retval := retval || '')'';
	    end if;
	    return retval;
	end;
    end if;
    return rec.slotlink;
end;
' language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "wslot_slotlink_view",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare
    rec		record;
    sltype	char(2);
    retval	text;
begin
    select into rec * from WSlot where slotname = $1;
    if not found then
        return '';
    end if;
    if rec.slotlink = '' then
        return '-';
    end if;
    sltype := substr(rec.slotlink, 1, 2);
    if sltype = 'PH' then
        select into rec * from PHone where slotname = rec.slotlink;
	retval := 'Phone ' || trim(rec.slotname);
	if rec.comment != '' then
	    retval := retval || ' (';
	    retval := retval || rec.comment;
	    retval := retval || ')';
	end if;
	return retval;
    end if;
    if sltype = 'IF' then
	declare
	    syrow	System%RowType;
	    ifrow	IFace%ROWTYPE;
        begin
	    select into ifrow * from IFace where slotname = rec.slotlink;
	    select into syrow * from System where name = ifrow.sysname;
	    retval := syrow.name || ' IF ';
	    retval := retval || ifrow.ifname;
	    if syrow.comment != '' then
	        retval := retval || ' (';
		retval := retval || syrow.comment;
		retval := retval || ')';
	    end if;
	    return retval;
	end;
    end if;
    return rec.slotlink;
end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 57,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 1192,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 36,
                    "names": [
                      {
                        "String": {
                          "sval": "bpchar",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                },
              },
            ],
            "returnType": {
              "location": 52,
              "names": [
                {
                  "String": {
                    "sval": "text",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1141 1`] = `
[
  "create view Pfield_v1 as select PF.pfname, PF.slotname,
	pslot_backlink_view(PF.slotname) as backside,
	pslot_slotlink_view(PF.slotname) as patch
    from PSlot PF",
  {
    "stmts": [
      {
        "stmt": {
          "ViewStmt": {
            "query": {
              "SelectStmt": {
                "fromClause": [
                  {
                    "RangeVar": {
                      "alias": {
                        "aliasname": "pf",
                      },
                      "inh": true,
                      "location": 155,
                      "relname": "pslot",
                      "relpersistence": "p",
                    },
                  },
                ],
                "limitOption": "LIMIT_OPTION_DEFAULT",
                "op": "SETOP_NONE",
                "targetList": [
                  {
                    "ResTarget": {
                      "location": 32,
                      "val": {
                        "ColumnRef": {
                          "fields": [
                            {
                              "String": {
                                "sval": "pf",
                              },
                            },
                            {
                              "String": {
                                "sval": "pfname",
                              },
                            },
                          ],
                          "location": 32,
                        },
                      },
                    },
                  },
                  {
                    "ResTarget": {
                      "location": 43,
                      "val": {
                        "ColumnRef": {
                          "fields": [
                            {
                              "String": {
                                "sval": "pf",
                              },
                            },
                            {
                              "String": {
                                "sval": "slotname",
                              },
                            },
                          ],
                          "location": 43,
                        },
                      },
                    },
                  },
                  {
                    "ResTarget": {
                      "location": 57,
                      "name": "backside",
                      "val": {
                        "FuncCall": {
                          "args": [
                            {
                              "ColumnRef": {
                                "fields": [
                                  {
                                    "String": {
                                      "sval": "pf",
                                    },
                                  },
                                  {
                                    "String": {
                                      "sval": "slotname",
                                    },
                                  },
                                ],
                                "location": 77,
                              },
                            },
                          ],
                          "funcformat": "COERCE_EXPLICIT_CALL",
                          "funcname": [
                            {
                              "String": {
                                "sval": "pslot_backlink_view",
                              },
                            },
                          ],
                          "location": 57,
                        },
                      },
                    },
                  },
                  {
                    "ResTarget": {
                      "location": 104,
                      "name": "patch",
                      "val": {
                        "FuncCall": {
                          "args": [
                            {
                              "ColumnRef": {
                                "fields": [
                                  {
                                    "String": {
                                      "sval": "pf",
                                    },
                                  },
                                  {
                                    "String": {
                                      "sval": "slotname",
                                    },
                                  },
                                ],
                                "location": 124,
                              },
                            },
                          ],
                          "funcformat": "COERCE_EXPLICIT_CALL",
                          "funcname": [
                            {
                              "String": {
                                "sval": "pslot_slotlink_view",
                              },
                            },
                          ],
                          "location": 104,
                        },
                      },
                    },
                  },
                ],
              },
            },
            "view": {
              "inh": true,
              "location": 12,
              "relname": "pfield_v1",
              "relpersistence": "p",
            },
            "withCheckOption": "NO_CHECK_OPTION",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1150 1`] = `
[
  "insert into Room values ('001', 'Entrance')",
  {
    "stmts": [
      {
        "stmt": {
          "InsertStmt": {
            "override": "OVERRIDING_NOT_SET",
            "relation": {
              "inh": true,
              "location": 12,
              "relname": "room",
              "relpersistence": "p",
            },
            "selectStmt": {
              "SelectStmt": {
                "limitOption": "LIMIT_OPTION_DEFAULT",
                "op": "SETOP_NONE",
                "valuesLists": [
                  {
                    "List": {
                      "items": [
                        {
                          "A_Const": {
                            "location": 25,
                            "sval": {
                              "sval": "001",
                            },
                          },
                        },
                        {
                          "A_Const": {
                            "location": 32,
                            "sval": {
                              "sval": "Entrance",
                            },
                          },
                        },
                      ],
                    },
                  },
                ],
              },
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1164 1`] = `
[
  "insert into WSlot values ('WS.001.1a', '001', '', '')",
  {
    "stmts": [
      {
        "stmt": {
          "InsertStmt": {
            "override": "OVERRIDING_NOT_SET",
            "relation": {
              "inh": true,
              "location": 12,
              "relname": "wslot",
              "relpersistence": "p",
            },
            "selectStmt": {
              "SelectStmt": {
                "limitOption": "LIMIT_OPTION_DEFAULT",
                "op": "SETOP_NONE",
                "valuesLists": [
                  {
                    "List": {
                      "items": [
                        {
                          "A_Const": {
                            "location": 26,
                            "sval": {
                              "sval": "WS.001.1a",
                            },
                          },
                        },
                        {
                          "A_Const": {
                            "location": 39,
                            "sval": {
                              "sval": "001",
                            },
                          },
                        },
                        {
                          "A_Const": {
                            "location": 46,
                            "sval": {
                              "sval": "",
                            },
                          },
                        },
                        {
                          "A_Const": {
                            "location": 50,
                            "sval": {
                              "sval": "",
                            },
                          },
                        },
                      ],
                    },
                  },
                ],
              },
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1216 1`] = `
[
  "insert into PField values ('PF0_1', 'Wallslots basement')",
  {
    "stmts": [
      {
        "stmt": {
          "InsertStmt": {
            "override": "OVERRIDING_NOT_SET",
            "relation": {
              "inh": true,
              "location": 12,
              "relname": "pfield",
              "relpersistence": "p",
            },
            "selectStmt": {
              "SelectStmt": {
                "limitOption": "LIMIT_OPTION_DEFAULT",
                "op": "SETOP_NONE",
                "valuesLists": [
                  {
                    "List": {
                      "items": [
                        {
                          "A_Const": {
                            "location": 27,
                            "sval": {
                              "sval": "PF0_1",
                            },
                          },
                        },
                        {
                          "A_Const": {
                            "location": 36,
                            "sval": {
                              "sval": "Wallslots basement",
                            },
                          },
                        },
                      ],
                    },
                  },
                ],
              },
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1221 1`] = `
[
  "insert into PSlot values ('PS.base.a1', 'PF0_1', '', '')",
  {
    "stmts": [
      {
        "stmt": {
          "InsertStmt": {
            "override": "OVERRIDING_NOT_SET",
            "relation": {
              "inh": true,
              "location": 12,
              "relname": "pslot",
              "relpersistence": "p",
            },
            "selectStmt": {
              "SelectStmt": {
                "limitOption": "LIMIT_OPTION_DEFAULT",
                "op": "SETOP_NONE",
                "valuesLists": [
                  {
                    "List": {
                      "items": [
                        {
                          "A_Const": {
                            "location": 26,
                            "sval": {
                              "sval": "PS.base.a1",
                            },
                          },
                        },
                        {
                          "A_Const": {
                            "location": 40,
                            "sval": {
                              "sval": "PF0_1",
                            },
                          },
                        },
                        {
                          "A_Const": {
                            "location": 49,
                            "sval": {
                              "sval": "",
                            },
                          },
                        },
                        {
                          "A_Const": {
                            "location": 53,
                            "sval": {
                              "sval": "",
                            },
                          },
                        },
                      ],
                    },
                  },
                ],
              },
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1300 1`] = `
[
  "update PSlot set backlink = 'WS.001.1a' where slotname = 'PS.base.a1'",
  {
    "stmts": [
      {
        "stmt": {
          "UpdateStmt": {
            "relation": {
              "inh": true,
              "location": 7,
              "relname": "pslot",
              "relpersistence": "p",
            },
            "targetList": [
              {
                "ResTarget": {
                  "location": 17,
                  "name": "backlink",
                  "val": {
                    "A_Const": {
                      "location": 28,
                      "sval": {
                        "sval": "WS.001.1a",
                      },
                    },
                  },
                },
              },
            ],
            "whereClause": {
              "A_Expr": {
                "kind": "AEXPR_OP",
                "lexpr": {
                  "ColumnRef": {
                    "fields": [
                      {
                        "String": {
                          "sval": "slotname",
                        },
                      },
                    ],
                    "location": 46,
                  },
                },
                "location": 55,
                "name": [
                  {
                    "String": {
                      "sval": "=",
                    },
                  },
                ],
                "rexpr": {
                  "A_Const": {
                    "location": 57,
                    "sval": {
                      "sval": "PS.base.a1",
                    },
                  },
                },
              },
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1316 1`] = `
[
  "update WSlot set backlink = 'PS.base.a4' where slotname = 'WS.001.2b'",
  {
    "stmts": [
      {
        "stmt": {
          "UpdateStmt": {
            "relation": {
              "inh": true,
              "location": 7,
              "relname": "wslot",
              "relpersistence": "p",
            },
            "targetList": [
              {
                "ResTarget": {
                  "location": 17,
                  "name": "backlink",
                  "val": {
                    "A_Const": {
                      "location": 28,
                      "sval": {
                        "sval": "PS.base.a4",
                      },
                    },
                  },
                },
              },
            ],
            "whereClause": {
              "A_Expr": {
                "kind": "AEXPR_OP",
                "lexpr": {
                  "ColumnRef": {
                    "fields": [
                      {
                        "String": {
                          "sval": "slotname",
                        },
                      },
                    ],
                    "location": 47,
                  },
                },
                "location": 56,
                "name": [
                  {
                    "String": {
                      "sval": "=",
                    },
                  },
                ],
                "rexpr": {
                  "A_Const": {
                    "location": 58,
                    "sval": {
                      "sval": "WS.001.2b",
                    },
                  },
                },
              },
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1346 1`] = `
[
  "update PField set name = 'PF0_2' where name = 'PF0_X'",
  {
    "stmts": [
      {
        "stmt": {
          "UpdateStmt": {
            "relation": {
              "inh": true,
              "location": 7,
              "relname": "pfield",
              "relpersistence": "p",
            },
            "targetList": [
              {
                "ResTarget": {
                  "location": 18,
                  "name": "name",
                  "val": {
                    "A_Const": {
                      "location": 25,
                      "sval": {
                        "sval": "PF0_2",
                      },
                    },
                  },
                },
              },
            ],
            "whereClause": {
              "A_Expr": {
                "kind": "AEXPR_OP",
                "lexpr": {
                  "ColumnRef": {
                    "fields": [
                      {
                        "String": {
                          "sval": "name",
                        },
                      },
                    ],
                    "location": 39,
                  },
                },
                "location": 44,
                "name": [
                  {
                    "String": {
                      "sval": "=",
                    },
                  },
                ],
                "rexpr": {
                  "A_Const": {
                    "location": 46,
                    "sval": {
                      "sval": "PF0_X",
                    },
                  },
                },
              },
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1348 1`] = `
[
  "select * from PSlot order by slotname",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "fromClause": [
              {
                "RangeVar": {
                  "inh": true,
                  "location": 14,
                  "relname": "pslot",
                  "relpersistence": "p",
                },
              },
            ],
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "sortClause": [
              {
                "SortBy": {
                  "location": -1,
                  "node": {
                    "ColumnRef": {
                      "fields": [
                        {
                          "String": {
                            "sval": "slotname",
                          },
                        },
                      ],
                      "location": 29,
                    },
                  },
                  "sortby_dir": "SORTBY_DEFAULT",
                  "sortby_nulls": "SORTBY_NULLS_DEFAULT",
                },
              },
            ],
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "ColumnRef": {
                      "fields": [
                        {
                          "A_Star": {},
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1357 1`] = `
[
  "insert into PLine values ('PL.001', '-0', 'Central call', 'PS.base.ta1')",
  {
    "stmts": [
      {
        "stmt": {
          "InsertStmt": {
            "override": "OVERRIDING_NOT_SET",
            "relation": {
              "inh": true,
              "location": 12,
              "relname": "pline",
              "relpersistence": "p",
            },
            "selectStmt": {
              "SelectStmt": {
                "limitOption": "LIMIT_OPTION_DEFAULT",
                "op": "SETOP_NONE",
                "valuesLists": [
                  {
                    "List": {
                      "items": [
                        {
                          "A_Const": {
                            "location": 26,
                            "sval": {
                              "sval": "PL.001",
                            },
                          },
                        },
                        {
                          "A_Const": {
                            "location": 36,
                            "sval": {
                              "sval": "-0",
                            },
                          },
                        },
                        {
                          "A_Const": {
                            "location": 42,
                            "sval": {
                              "sval": "Central call",
                            },
                          },
                        },
                        {
                          "A_Const": {
                            "location": 58,
                            "sval": {
                              "sval": "PS.base.ta1",
                            },
                          },
                        },
                      ],
                    },
                  },
                ],
              },
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1382 1`] = `
[
  "insert into PHone values ('PH.hc001', 'Hicom standard', 'WS.001.1a')",
  {
    "stmts": [
      {
        "stmt": {
          "InsertStmt": {
            "override": "OVERRIDING_NOT_SET",
            "relation": {
              "inh": true,
              "location": 12,
              "relname": "phone",
              "relpersistence": "p",
            },
            "selectStmt": {
              "SelectStmt": {
                "limitOption": "LIMIT_OPTION_DEFAULT",
                "op": "SETOP_NONE",
                "valuesLists": [
                  {
                    "List": {
                      "items": [
                        {
                          "A_Const": {
                            "location": 26,
                            "sval": {
                              "sval": "PH.hc001",
                            },
                          },
                        },
                        {
                          "A_Const": {
                            "location": 38,
                            "sval": {
                              "sval": "Hicom standard",
                            },
                          },
                        },
                        {
                          "A_Const": {
                            "location": 56,
                            "sval": {
                              "sval": "WS.001.1a",
                            },
                          },
                        },
                      ],
                    },
                  },
                ],
              },
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1395 1`] = `
[
  "insert into Hub values ('base.hub1', 'Patchfield PF0_1 hub', 16)",
  {
    "stmts": [
      {
        "stmt": {
          "InsertStmt": {
            "override": "OVERRIDING_NOT_SET",
            "relation": {
              "inh": true,
              "location": 12,
              "relname": "hub",
              "relpersistence": "p",
            },
            "selectStmt": {
              "SelectStmt": {
                "limitOption": "LIMIT_OPTION_DEFAULT",
                "op": "SETOP_NONE",
                "valuesLists": [
                  {
                    "List": {
                      "items": [
                        {
                          "A_Const": {
                            "location": 24,
                            "sval": {
                              "sval": "base.hub1",
                            },
                          },
                        },
                        {
                          "A_Const": {
                            "location": 37,
                            "sval": {
                              "sval": "Patchfield PF0_1 hub",
                            },
                          },
                        },
                        {
                          "A_Const": {
                            "ival": {
                              "ival": 16,
                            },
                            "location": 61,
                          },
                        },
                      ],
                    },
                  },
                ],
              },
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1403 1`] = `
[
  "select * from PField_v1 where pfname = 'PF0_1' order by slotname",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "fromClause": [
              {
                "RangeVar": {
                  "inh": true,
                  "location": 14,
                  "relname": "pfield_v1",
                  "relpersistence": "p",
                },
              },
            ],
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "sortClause": [
              {
                "SortBy": {
                  "location": -1,
                  "node": {
                    "ColumnRef": {
                      "fields": [
                        {
                          "String": {
                            "sval": "slotname",
                          },
                        },
                      ],
                      "location": 56,
                    },
                  },
                  "sortby_dir": "SORTBY_DEFAULT",
                  "sortby_nulls": "SORTBY_NULLS_DEFAULT",
                },
              },
            ],
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "ColumnRef": {
                      "fields": [
                        {
                          "A_Star": {},
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
            "whereClause": {
              "A_Expr": {
                "kind": "AEXPR_OP",
                "lexpr": {
                  "ColumnRef": {
                    "fields": [
                      {
                        "String": {
                          "sval": "pfname",
                        },
                      },
                    ],
                    "location": 30,
                  },
                },
                "location": 37,
                "name": [
                  {
                    "String": {
                      "sval": "=",
                    },
                  },
                ],
                "rexpr": {
                  "A_Const": {
                    "location": 39,
                    "sval": {
                      "sval": "PF0_1",
                    },
                  },
                },
              },
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1429 1`] = `
[
  "CREATE FUNCTION recursion_test(int,int) RETURNS text AS '
DECLARE rslt text;
BEGIN
    IF $1 <= 0 THEN
        rslt = CAST($2 AS TEXT);
    ELSE
        rslt = CAST($1 AS TEXT) || '','' || recursion_test($1 - 1, $2);
    END IF;
    RETURN rslt;
END;' LANGUAGE plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "recursion_test",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
DECLARE rslt text;
BEGIN
    IF $1 <= 0 THEN
        rslt = CAST($2 AS TEXT);
    ELSE
        rslt = CAST($1 AS TEXT) || ',' || recursion_test($1 - 1, $2);
    END IF;
    RETURN rslt;
END;",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 53,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 252,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 31,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                },
              },
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 35,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                },
              },
            ],
            "returnType": {
              "location": 48,
              "names": [
                {
                  "String": {
                    "sval": "text",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1440 1`] = `
[
  "SELECT recursion_test(4,3)",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "FuncCall": {
                      "args": [
                        {
                          "A_Const": {
                            "ival": {
                              "ival": 4,
                            },
                            "location": 22,
                          },
                        },
                        {
                          "A_Const": {
                            "ival": {
                              "ival": 3,
                            },
                            "location": 24,
                          },
                        },
                      ],
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "recursion_test",
                          },
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1445 1`] = `
[
  "CREATE TABLE found_test_tbl (a int)",
  {
    "stmts": [
      {
        "stmt": {
          "CreateStmt": {
            "oncommit": "ONCOMMIT_NOOP",
            "relation": {
              "inh": true,
              "location": 13,
              "relname": "found_test_tbl",
              "relpersistence": "p",
            },
            "tableElts": [
              {
                "ColumnDef": {
                  "colname": "a",
                  "is_local": true,
                  "location": 29,
                  "typeName": {
                    "location": 31,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1447 1`] = `
[
  "create function test_found()
  returns boolean as '
  declare
  begin
  insert into found_test_tbl values (1);
  if FOUND then
     insert into found_test_tbl values (2);
  end if;

  update found_test_tbl set a = 100 where a = 1;
  if FOUND then
    insert into found_test_tbl values (3);
  end if;

  delete from found_test_tbl where a = 9999; -- matches no rows
  if not FOUND then
    insert into found_test_tbl values (4);
  end if;

  for i in 1 .. 10 loop
    -- no need to do anything
  end loop;
  if FOUND then
    insert into found_test_tbl values (5);
  end if;

  -- never executes the loop
  for i in 2 .. 1 loop
    -- no need to do anything
  end loop;
  if not FOUND then
    insert into found_test_tbl values (6);
  end if;
  return true;
  end;' language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "test_found",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
  declare
  begin
  insert into found_test_tbl values (1);
  if FOUND then
     insert into found_test_tbl values (2);
  end if;

  update found_test_tbl set a = 100 where a = 1;
  if FOUND then
    insert into found_test_tbl values (3);
  end if;

  delete from found_test_tbl where a = 9999; -- matches no rows
  if not FOUND then
    insert into found_test_tbl values (4);
  end if;

  for i in 1 .. 10 loop
    -- no need to do anything
  end loop;
  if FOUND then
    insert into found_test_tbl values (5);
  end if;

  -- never executes the loop
  for i in 2 .. 1 loop
    -- no need to do anything
  end loop;
  if not FOUND then
    insert into found_test_tbl values (6);
  end if;
  return true;
  end;",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 47,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 765,
                },
              },
            ],
            "returnType": {
              "location": 39,
              "names": [
                {
                  "String": {
                    "sval": "pg_catalog",
                  },
                },
                {
                  "String": {
                    "sval": "bool",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1483 1`] = `
[
  "select test_found()",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "FuncCall": {
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "test_found",
                          },
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1500 1`] = `
[
  "select * from test_table_func_rec()",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "fromClause": [
              {
                "RangeFunction": {
                  "functions": [
                    {
                      "List": {
                        "items": [
                          {
                            "FuncCall": {
                              "funcformat": "COERCE_EXPLICIT_CALL",
                              "funcname": [
                                {
                                  "String": {
                                    "sval": "test_table_func_rec",
                                  },
                                },
                              ],
                              "location": 14,
                            },
                          },
                          {},
                        ],
                      },
                    },
                  ],
                },
              },
            ],
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "ColumnRef": {
                      "fields": [
                        {
                          "A_Star": {},
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1502 1`] = `
[
  "create function test_table_func_row() returns setof found_test_tbl as '
DECLARE
	row found_test_tbl%ROWTYPE;
BEGIN
	FOR row IN select * from found_test_tbl LOOP
		RETURN NEXT row;
	END LOOP;
	RETURN;
END;' language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "test_table_func_row",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
DECLARE
	row found_test_tbl%ROWTYPE;
BEGIN
	FOR row IN select * from found_test_tbl LOOP
		RETURN NEXT row;
	END LOOP;
	RETURN;
END;",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 67,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 206,
                },
              },
            ],
            "returnType": {
              "location": 52,
              "names": [
                {
                  "String": {
                    "sval": "found_test_tbl",
                  },
                },
              ],
              "setof": true,
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1512 1`] = `
[
  "select * from test_table_func_row()",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "fromClause": [
              {
                "RangeFunction": {
                  "functions": [
                    {
                      "List": {
                        "items": [
                          {
                            "FuncCall": {
                              "funcformat": "COERCE_EXPLICIT_CALL",
                              "funcname": [
                                {
                                  "String": {
                                    "sval": "test_table_func_row",
                                  },
                                },
                              ],
                              "location": 14,
                            },
                          },
                          {},
                        ],
                      },
                    },
                  ],
                },
              },
            ],
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "ColumnRef": {
                      "fields": [
                        {
                          "A_Star": {},
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1514 1`] = `
[
  "create function test_ret_set_scalar(int,int) returns setof int as '
DECLARE
	i int;
BEGIN
	FOR i IN $1 .. $2 LOOP
		RETURN NEXT i + 1;
	END LOOP;
	RETURN;
END;' language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "test_ret_set_scalar",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
DECLARE
	i int;
BEGIN
	FOR i IN $1 .. $2 LOOP
		RETURN NEXT i + 1;
	END LOOP;
	RETURN;
END;",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 63,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 161,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 36,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                },
              },
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 40,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                },
              },
            ],
            "returnType": {
              "location": 59,
              "names": [
                {
                  "String": {
                    "sval": "pg_catalog",
                  },
                },
                {
                  "String": {
                    "sval": "int4",
                  },
                },
              ],
              "setof": true,
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1524 1`] = `
[
  "select * from test_ret_set_scalar(1,10)",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "fromClause": [
              {
                "RangeFunction": {
                  "functions": [
                    {
                      "List": {
                        "items": [
                          {
                            "FuncCall": {
                              "args": [
                                {
                                  "A_Const": {
                                    "ival": {
                                      "ival": 1,
                                    },
                                    "location": 34,
                                  },
                                },
                                {
                                  "A_Const": {
                                    "ival": {
                                      "ival": 10,
                                    },
                                    "location": 36,
                                  },
                                },
                              ],
                              "funcformat": "COERCE_EXPLICIT_CALL",
                              "funcname": [
                                {
                                  "String": {
                                    "sval": "test_ret_set_scalar",
                                  },
                                },
                              ],
                              "location": 14,
                            },
                          },
                          {},
                        ],
                      },
                    },
                  ],
                },
              },
            ],
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "ColumnRef": {
                      "fields": [
                        {
                          "A_Star": {},
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1526 1`] = `
[
  "create function test_ret_set_rec_dyn(int) returns setof record as '
DECLARE
	retval RECORD;
BEGIN
	IF $1 > 10 THEN
		SELECT INTO retval 5, 10, 15;
		RETURN NEXT retval;
		RETURN NEXT retval;
	ELSE
		SELECT INTO retval 50, 5::numeric, ''xxx''::text;
		RETURN NEXT retval;
		RETURN NEXT retval;
	END IF;
	RETURN;
END;' language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "test_ret_set_rec_dyn",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
DECLARE
	retval RECORD;
BEGIN
	IF $1 > 10 THEN
		SELECT INTO retval 5, 10, 15;
		RETURN NEXT retval;
		RETURN NEXT retval;
	ELSE
		SELECT INTO retval 50, 5::numeric, 'xxx'::text;
		RETURN NEXT retval;
		RETURN NEXT retval;
	END IF;
	RETURN;
END;",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 63,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 317,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 37,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                },
              },
            ],
            "returnType": {
              "location": 56,
              "names": [
                {
                  "String": {
                    "sval": "record",
                  },
                },
              ],
              "setof": true,
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1542 1`] = `
[
  "SELECT * FROM test_ret_set_rec_dyn(1500) AS (a int, b int, c int)",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "fromClause": [
              {
                "RangeFunction": {
                  "coldeflist": [
                    {
                      "ColumnDef": {
                        "colname": "a",
                        "is_local": true,
                        "location": 45,
                        "typeName": {
                          "location": 47,
                          "names": [
                            {
                              "String": {
                                "sval": "pg_catalog",
                              },
                            },
                            {
                              "String": {
                                "sval": "int4",
                              },
                            },
                          ],
                          "typemod": -1,
                        },
                      },
                    },
                    {
                      "ColumnDef": {
                        "colname": "b",
                        "is_local": true,
                        "location": 52,
                        "typeName": {
                          "location": 54,
                          "names": [
                            {
                              "String": {
                                "sval": "pg_catalog",
                              },
                            },
                            {
                              "String": {
                                "sval": "int4",
                              },
                            },
                          ],
                          "typemod": -1,
                        },
                      },
                    },
                    {
                      "ColumnDef": {
                        "colname": "c",
                        "is_local": true,
                        "location": 59,
                        "typeName": {
                          "location": 61,
                          "names": [
                            {
                              "String": {
                                "sval": "pg_catalog",
                              },
                            },
                            {
                              "String": {
                                "sval": "int4",
                              },
                            },
                          ],
                          "typemod": -1,
                        },
                      },
                    },
                  ],
                  "functions": [
                    {
                      "List": {
                        "items": [
                          {
                            "FuncCall": {
                              "args": [
                                {
                                  "A_Const": {
                                    "ival": {
                                      "ival": 1500,
                                    },
                                    "location": 35,
                                  },
                                },
                              ],
                              "funcformat": "COERCE_EXPLICIT_CALL",
                              "funcname": [
                                {
                                  "String": {
                                    "sval": "test_ret_set_rec_dyn",
                                  },
                                },
                              ],
                              "location": 14,
                            },
                          },
                          {},
                        ],
                      },
                    },
                  ],
                },
              },
            ],
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "ColumnRef": {
                      "fields": [
                        {
                          "A_Star": {},
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1545 1`] = `
[
  "create function test_ret_rec_dyn(int) returns record as '
DECLARE
	retval RECORD;
BEGIN
	IF $1 > 10 THEN
		SELECT INTO retval 5, 10, 15;
		RETURN retval;
	ELSE
		SELECT INTO retval 50, 5::numeric, ''xxx''::text;
		RETURN retval;
	END IF;
END;' language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "test_ret_rec_dyn",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
DECLARE
	retval RECORD;
BEGIN
	IF $1 > 10 THEN
		SELECT INTO retval 5, 10, 15;
		RETURN retval;
	ELSE
		SELECT INTO retval 50, 5::numeric, 'xxx'::text;
		RETURN retval;
	END IF;
END;",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 53,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 244,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 33,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                },
              },
            ],
            "returnType": {
              "location": 46,
              "names": [
                {
                  "String": {
                    "sval": "record",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1558 1`] = `
[
  "SELECT * FROM test_ret_rec_dyn(1500) AS (a int, b int, c int)",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "fromClause": [
              {
                "RangeFunction": {
                  "coldeflist": [
                    {
                      "ColumnDef": {
                        "colname": "a",
                        "is_local": true,
                        "location": 41,
                        "typeName": {
                          "location": 43,
                          "names": [
                            {
                              "String": {
                                "sval": "pg_catalog",
                              },
                            },
                            {
                              "String": {
                                "sval": "int4",
                              },
                            },
                          ],
                          "typemod": -1,
                        },
                      },
                    },
                    {
                      "ColumnDef": {
                        "colname": "b",
                        "is_local": true,
                        "location": 48,
                        "typeName": {
                          "location": 50,
                          "names": [
                            {
                              "String": {
                                "sval": "pg_catalog",
                              },
                            },
                            {
                              "String": {
                                "sval": "int4",
                              },
                            },
                          ],
                          "typemod": -1,
                        },
                      },
                    },
                    {
                      "ColumnDef": {
                        "colname": "c",
                        "is_local": true,
                        "location": 55,
                        "typeName": {
                          "location": 57,
                          "names": [
                            {
                              "String": {
                                "sval": "pg_catalog",
                              },
                            },
                            {
                              "String": {
                                "sval": "int4",
                              },
                            },
                          ],
                          "typemod": -1,
                        },
                      },
                    },
                  ],
                  "functions": [
                    {
                      "List": {
                        "items": [
                          {
                            "FuncCall": {
                              "args": [
                                {
                                  "A_Const": {
                                    "ival": {
                                      "ival": 1500,
                                    },
                                    "location": 31,
                                  },
                                },
                              ],
                              "funcformat": "COERCE_EXPLICIT_CALL",
                              "funcname": [
                                {
                                  "String": {
                                    "sval": "test_ret_rec_dyn",
                                  },
                                },
                              ],
                              "location": 14,
                            },
                          },
                          {},
                        ],
                      },
                    },
                  ],
                },
              },
            ],
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "ColumnRef": {
                      "fields": [
                        {
                          "A_Star": {},
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1570 1`] = `
[
  "select f1(42) as int, f1(4.5) as num",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "name": "int",
                  "val": {
                    "FuncCall": {
                      "args": [
                        {
                          "A_Const": {
                            "ival": {
                              "ival": 42,
                            },
                            "location": 10,
                          },
                        },
                      ],
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "f1",
                          },
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
              {
                "ResTarget": {
                  "location": 22,
                  "name": "num",
                  "val": {
                    "FuncCall": {
                      "args": [
                        {
                          "A_Const": {
                            "fval": {
                              "fval": "4.5",
                            },
                            "location": 25,
                          },
                        },
                      ],
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "f1",
                          },
                        },
                      ],
                      "location": 22,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1571 1`] = `
[
  "  -- fail for lack of + operator

drop function f1(x anyelement)",
  {
    "stmts": [
      {
        "stmt": {
          "DropStmt": {
            "behavior": "DROP_RESTRICT",
            "objects": [
              {
                "ObjectWithArgs": {
                  "objargs": [
                    {
                      "TypeName": {
                        "location": 53,
                        "names": [
                          {
                            "String": {
                              "sval": "anyelement",
                            },
                          },
                        ],
                        "typemod": -1,
                      },
                    },
                  ],
                  "objfuncargs": [
                    {
                      "FunctionParameter": {
                        "argType": {
                          "location": 53,
                          "names": [
                            {
                              "String": {
                                "sval": "anyelement",
                              },
                            },
                          ],
                          "typemod": -1,
                        },
                        "mode": "FUNC_PARAM_DEFAULT",
                        "name": "x",
                      },
                    },
                  ],
                  "objname": [
                    {
                      "String": {
                        "sval": "f1",
                      },
                    },
                  ],
                },
              },
            ],
            "removeType": "OBJECT_FUNCTION",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1575 1`] = `
[
  "create function f1(x anyelement) returns anyarray as $$
begin
  return array[x + 1, x + 2];
end$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "f1",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
begin
  return array[x + 1, x + 2];
end",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 50,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 98,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 21,
                    "names": [
                      {
                        "String": {
                          "sval": "anyelement",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                  "name": "x",
                },
              },
            ],
            "returnType": {
              "location": 41,
              "names": [
                {
                  "String": {
                    "sval": "anyarray",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1584 1`] = `
[
  "create function f1(x anyarray) returns anyelement as $$
begin
  return x[1];
end$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "f1",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
begin
  return x[1];
end",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 50,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 83,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 21,
                    "names": [
                      {
                        "String": {
                          "sval": "anyarray",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                  "name": "x",
                },
              },
            ],
            "returnType": {
              "location": 39,
              "names": [
                {
                  "String": {
                    "sval": "anyelement",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1589 1`] = `
[
  "select f1(array[2,4]) as int, f1(array[4.5, 7.7]) as num",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "name": "int",
                  "val": {
                    "FuncCall": {
                      "args": [
                        {
                          "A_ArrayExpr": {
                            "elements": [
                              {
                                "A_Const": {
                                  "ival": {
                                    "ival": 2,
                                  },
                                  "location": 16,
                                },
                              },
                              {
                                "A_Const": {
                                  "ival": {
                                    "ival": 4,
                                  },
                                  "location": 18,
                                },
                              },
                            ],
                            "location": 10,
                          },
                        },
                      ],
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "f1",
                          },
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
              {
                "ResTarget": {
                  "location": 30,
                  "name": "num",
                  "val": {
                    "FuncCall": {
                      "args": [
                        {
                          "A_ArrayExpr": {
                            "elements": [
                              {
                                "A_Const": {
                                  "fval": {
                                    "fval": "4.5",
                                  },
                                  "location": 39,
                                },
                              },
                              {
                                "A_Const": {
                                  "fval": {
                                    "fval": "7.7",
                                  },
                                  "location": 44,
                                },
                              },
                            ],
                            "location": 33,
                          },
                        },
                      ],
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "f1",
                          },
                        },
                      ],
                      "location": 30,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1591 1`] = `
[
  "select f1(stavalues1) from pg_statistic",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "fromClause": [
              {
                "RangeVar": {
                  "inh": true,
                  "location": 27,
                  "relname": "pg_statistic",
                  "relpersistence": "p",
                },
              },
            ],
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "FuncCall": {
                      "args": [
                        {
                          "ColumnRef": {
                            "fields": [
                              {
                                "String": {
                                  "sval": "stavalues1",
                                },
                              },
                            ],
                            "location": 10,
                          },
                        },
                      ],
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "f1",
                          },
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1591 2`] = `
[
  "  -- fail, can't infer element type

drop function f1(x anyarray)",
  {
    "stmts": [
      {
        "stmt": {
          "DropStmt": {
            "behavior": "DROP_RESTRICT",
            "objects": [
              {
                "ObjectWithArgs": {
                  "objargs": [
                    {
                      "TypeName": {
                        "location": 56,
                        "names": [
                          {
                            "String": {
                              "sval": "anyarray",
                            },
                          },
                        ],
                        "typemod": -1,
                      },
                    },
                  ],
                  "objfuncargs": [
                    {
                      "FunctionParameter": {
                        "argType": {
                          "location": 56,
                          "names": [
                            {
                              "String": {
                                "sval": "anyarray",
                              },
                            },
                          ],
                          "typemod": -1,
                        },
                        "mode": "FUNC_PARAM_DEFAULT",
                        "name": "x",
                      },
                    },
                  ],
                  "objname": [
                    {
                      "String": {
                        "sval": "f1",
                      },
                    },
                  ],
                },
              },
            ],
            "removeType": "OBJECT_FUNCTION",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1595 1`] = `
[
  "create function f1(x anyarray) returns anyarray as $$
begin
  return x;
end$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "f1",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
begin
  return x;
end",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 48,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 78,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 21,
                    "names": [
                      {
                        "String": {
                          "sval": "anyarray",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                  "name": "x",
                },
              },
            ],
            "returnType": {
              "location": 39,
              "names": [
                {
                  "String": {
                    "sval": "anyarray",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1607 1`] = `
[
  "create function f1(x anyelement) returns anyrange as $$
begin
  return array[x + 1, x + 2];
end$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "f1",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
begin
  return array[x + 1, x + 2];
end",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 50,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 98,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 21,
                    "names": [
                      {
                        "String": {
                          "sval": "anyelement",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                  "name": "x",
                },
              },
            ],
            "returnType": {
              "location": 41,
              "names": [
                {
                  "String": {
                    "sval": "anyrange",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1612 1`] = `
[
  "create function f1(x anyrange) returns anyarray as $$
begin
  return array[lower(x), upper(x)];
end$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "f1",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
begin
  return array[lower(x), upper(x)];
end",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 48,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 102,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 21,
                    "names": [
                      {
                        "String": {
                          "sval": "anyrange",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                  "name": "x",
                },
              },
            ],
            "returnType": {
              "location": 39,
              "names": [
                {
                  "String": {
                    "sval": "anyarray",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1617 1`] = `
[
  "select f1(int4range(42, 49)) as int, f1(float8range(4.5, 7.8)) as num",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "name": "int",
                  "val": {
                    "FuncCall": {
                      "args": [
                        {
                          "FuncCall": {
                            "args": [
                              {
                                "A_Const": {
                                  "ival": {
                                    "ival": 42,
                                  },
                                  "location": 20,
                                },
                              },
                              {
                                "A_Const": {
                                  "ival": {
                                    "ival": 49,
                                  },
                                  "location": 24,
                                },
                              },
                            ],
                            "funcformat": "COERCE_EXPLICIT_CALL",
                            "funcname": [
                              {
                                "String": {
                                  "sval": "int4range",
                                },
                              },
                            ],
                            "location": 10,
                          },
                        },
                      ],
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "f1",
                          },
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
              {
                "ResTarget": {
                  "location": 37,
                  "name": "num",
                  "val": {
                    "FuncCall": {
                      "args": [
                        {
                          "FuncCall": {
                            "args": [
                              {
                                "A_Const": {
                                  "fval": {
                                    "fval": "4.5",
                                  },
                                  "location": 52,
                                },
                              },
                              {
                                "A_Const": {
                                  "fval": {
                                    "fval": "7.8",
                                  },
                                  "location": 57,
                                },
                              },
                            ],
                            "funcformat": "COERCE_EXPLICIT_CALL",
                            "funcname": [
                              {
                                "String": {
                                  "sval": "float8range",
                                },
                              },
                            ],
                            "location": 40,
                          },
                        },
                      ],
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "f1",
                          },
                        },
                      ],
                      "location": 37,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1619 1`] = `
[
  "drop function f1(x anyrange)",
  {
    "stmts": [
      {
        "stmt": {
          "DropStmt": {
            "behavior": "DROP_RESTRICT",
            "objects": [
              {
                "ObjectWithArgs": {
                  "objargs": [
                    {
                      "TypeName": {
                        "location": 19,
                        "names": [
                          {
                            "String": {
                              "sval": "anyrange",
                            },
                          },
                        ],
                        "typemod": -1,
                      },
                    },
                  ],
                  "objfuncargs": [
                    {
                      "FunctionParameter": {
                        "argType": {
                          "location": 19,
                          "names": [
                            {
                              "String": {
                                "sval": "anyrange",
                              },
                            },
                          ],
                          "typemod": -1,
                        },
                        "mode": "FUNC_PARAM_DEFAULT",
                        "name": "x",
                      },
                    },
                  ],
                  "objname": [
                    {
                      "String": {
                        "sval": "f1",
                      },
                    },
                  ],
                },
              },
            ],
            "removeType": "OBJECT_FUNCTION",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1621 1`] = `
[
  "create function f1(x anycompatible, y anycompatible) returns anycompatiblearray as $$
begin
  return array[x, y];
end$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "f1",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
begin
  return array[x, y];
end",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 80,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 120,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 21,
                    "names": [
                      {
                        "String": {
                          "sval": "anycompatible",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                  "name": "x",
                },
              },
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 38,
                    "names": [
                      {
                        "String": {
                          "sval": "anycompatible",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                  "name": "y",
                },
              },
            ],
            "returnType": {
              "location": 61,
              "names": [
                {
                  "String": {
                    "sval": "anycompatiblearray",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1628 1`] = `
[
  "drop function f1(x anycompatible, y anycompatible)",
  {
    "stmts": [
      {
        "stmt": {
          "DropStmt": {
            "behavior": "DROP_RESTRICT",
            "objects": [
              {
                "ObjectWithArgs": {
                  "objargs": [
                    {
                      "TypeName": {
                        "location": 19,
                        "names": [
                          {
                            "String": {
                              "sval": "anycompatible",
                            },
                          },
                        ],
                        "typemod": -1,
                      },
                    },
                    {
                      "TypeName": {
                        "location": 36,
                        "names": [
                          {
                            "String": {
                              "sval": "anycompatible",
                            },
                          },
                        ],
                        "typemod": -1,
                      },
                    },
                  ],
                  "objfuncargs": [
                    {
                      "FunctionParameter": {
                        "argType": {
                          "location": 19,
                          "names": [
                            {
                              "String": {
                                "sval": "anycompatible",
                              },
                            },
                          ],
                          "typemod": -1,
                        },
                        "mode": "FUNC_PARAM_DEFAULT",
                        "name": "x",
                      },
                    },
                    {
                      "FunctionParameter": {
                        "argType": {
                          "location": 36,
                          "names": [
                            {
                              "String": {
                                "sval": "anycompatible",
                              },
                            },
                          ],
                          "typemod": -1,
                        },
                        "mode": "FUNC_PARAM_DEFAULT",
                        "name": "y",
                      },
                    },
                  ],
                  "objname": [
                    {
                      "String": {
                        "sval": "f1",
                      },
                    },
                  ],
                },
              },
            ],
            "removeType": "OBJECT_FUNCTION",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1630 1`] = `
[
  "create function f1(x anycompatiblerange, y anycompatible, z anycompatible) returns anycompatiblearray as $$
begin
  return array[lower(x), upper(x), y, z];
end$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "f1",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
begin
  return array[lower(x), upper(x), y, z];
end",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 102,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 162,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 21,
                    "names": [
                      {
                        "String": {
                          "sval": "anycompatiblerange",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                  "name": "x",
                },
              },
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 43,
                    "names": [
                      {
                        "String": {
                          "sval": "anycompatible",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                  "name": "y",
                },
              },
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 60,
                    "names": [
                      {
                        "String": {
                          "sval": "anycompatible",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                  "name": "z",
                },
              },
            ],
            "returnType": {
              "location": 83,
              "names": [
                {
                  "String": {
                    "sval": "anycompatiblearray",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1637 1`] = `
[
  "select f1(int4range(42, 49), 11, 4.5) as fail",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "name": "fail",
                  "val": {
                    "FuncCall": {
                      "args": [
                        {
                          "FuncCall": {
                            "args": [
                              {
                                "A_Const": {
                                  "ival": {
                                    "ival": 42,
                                  },
                                  "location": 20,
                                },
                              },
                              {
                                "A_Const": {
                                  "ival": {
                                    "ival": 49,
                                  },
                                  "location": 24,
                                },
                              },
                            ],
                            "funcformat": "COERCE_EXPLICIT_CALL",
                            "funcname": [
                              {
                                "String": {
                                  "sval": "int4range",
                                },
                              },
                            ],
                            "location": 10,
                          },
                        },
                        {
                          "A_Const": {
                            "ival": {
                              "ival": 11,
                            },
                            "location": 29,
                          },
                        },
                        {
                          "A_Const": {
                            "fval": {
                              "fval": "4.5",
                            },
                            "location": 33,
                          },
                        },
                      ],
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "f1",
                          },
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1637 2`] = `
[
  "  -- range type doesn't fit

drop function f1(x anycompatiblerange, y anycompatible, z anycompatible)",
  {
    "stmts": [
      {
        "stmt": {
          "DropStmt": {
            "behavior": "DROP_RESTRICT",
            "objects": [
              {
                "ObjectWithArgs": {
                  "objargs": [
                    {
                      "TypeName": {
                        "location": 48,
                        "names": [
                          {
                            "String": {
                              "sval": "anycompatiblerange",
                            },
                          },
                        ],
                        "typemod": -1,
                      },
                    },
                    {
                      "TypeName": {
                        "location": 70,
                        "names": [
                          {
                            "String": {
                              "sval": "anycompatible",
                            },
                          },
                        ],
                        "typemod": -1,
                      },
                    },
                    {
                      "TypeName": {
                        "location": 87,
                        "names": [
                          {
                            "String": {
                              "sval": "anycompatible",
                            },
                          },
                        ],
                        "typemod": -1,
                      },
                    },
                  ],
                  "objfuncargs": [
                    {
                      "FunctionParameter": {
                        "argType": {
                          "location": 48,
                          "names": [
                            {
                              "String": {
                                "sval": "anycompatiblerange",
                              },
                            },
                          ],
                          "typemod": -1,
                        },
                        "mode": "FUNC_PARAM_DEFAULT",
                        "name": "x",
                      },
                    },
                    {
                      "FunctionParameter": {
                        "argType": {
                          "location": 70,
                          "names": [
                            {
                              "String": {
                                "sval": "anycompatible",
                              },
                            },
                          ],
                          "typemod": -1,
                        },
                        "mode": "FUNC_PARAM_DEFAULT",
                        "name": "y",
                      },
                    },
                    {
                      "FunctionParameter": {
                        "argType": {
                          "location": 87,
                          "names": [
                            {
                              "String": {
                                "sval": "anycompatible",
                              },
                            },
                          ],
                          "typemod": -1,
                        },
                        "mode": "FUNC_PARAM_DEFAULT",
                        "name": "z",
                      },
                    },
                  ],
                  "objname": [
                    {
                      "String": {
                        "sval": "f1",
                      },
                    },
                  ],
                },
              },
            ],
            "removeType": "OBJECT_FUNCTION",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1642 1`] = `
[
  "create function f1(x anycompatible) returns anycompatiblerange as $$
begin
  return array[x + 1, x + 2];
end$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "f1",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
begin
  return array[x + 1, x + 2];
end",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 63,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 111,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 21,
                    "names": [
                      {
                        "String": {
                          "sval": "anycompatible",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                  "name": "x",
                },
              },
            ],
            "returnType": {
              "location": 44,
              "names": [
                {
                  "String": {
                    "sval": "anycompatiblerange",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1647 1`] = `
[
  "create function f1(x anycompatiblerange, y anycompatiblearray) returns anycompatiblerange as $$
begin
  return x;
end$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "f1",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
begin
  return x;
end",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 90,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 120,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 21,
                    "names": [
                      {
                        "String": {
                          "sval": "anycompatiblerange",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                  "name": "x",
                },
              },
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 43,
                    "names": [
                      {
                        "String": {
                          "sval": "anycompatiblearray",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                  "name": "y",
                },
              },
            ],
            "returnType": {
              "location": 71,
              "names": [
                {
                  "String": {
                    "sval": "anycompatiblerange",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1652 1`] = `
[
  "select f1(int4range(42, 49), array[11]) as int, f1(float8range(4.5, 7.8), array[7]) as num",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "name": "int",
                  "val": {
                    "FuncCall": {
                      "args": [
                        {
                          "FuncCall": {
                            "args": [
                              {
                                "A_Const": {
                                  "ival": {
                                    "ival": 42,
                                  },
                                  "location": 20,
                                },
                              },
                              {
                                "A_Const": {
                                  "ival": {
                                    "ival": 49,
                                  },
                                  "location": 24,
                                },
                              },
                            ],
                            "funcformat": "COERCE_EXPLICIT_CALL",
                            "funcname": [
                              {
                                "String": {
                                  "sval": "int4range",
                                },
                              },
                            ],
                            "location": 10,
                          },
                        },
                        {
                          "A_ArrayExpr": {
                            "elements": [
                              {
                                "A_Const": {
                                  "ival": {
                                    "ival": 11,
                                  },
                                  "location": 35,
                                },
                              },
                            ],
                            "location": 29,
                          },
                        },
                      ],
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "f1",
                          },
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
              {
                "ResTarget": {
                  "location": 48,
                  "name": "num",
                  "val": {
                    "FuncCall": {
                      "args": [
                        {
                          "FuncCall": {
                            "args": [
                              {
                                "A_Const": {
                                  "fval": {
                                    "fval": "4.5",
                                  },
                                  "location": 63,
                                },
                              },
                              {
                                "A_Const": {
                                  "fval": {
                                    "fval": "7.8",
                                  },
                                  "location": 68,
                                },
                              },
                            ],
                            "funcformat": "COERCE_EXPLICIT_CALL",
                            "funcname": [
                              {
                                "String": {
                                  "sval": "float8range",
                                },
                              },
                            ],
                            "location": 51,
                          },
                        },
                        {
                          "A_ArrayExpr": {
                            "elements": [
                              {
                                "A_Const": {
                                  "ival": {
                                    "ival": 7,
                                  },
                                  "location": 80,
                                },
                              },
                            ],
                            "location": 74,
                          },
                        },
                      ],
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "f1",
                          },
                        },
                      ],
                      "location": 48,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1654 1`] = `
[
  "drop function f1(x anycompatiblerange, y anycompatiblearray)",
  {
    "stmts": [
      {
        "stmt": {
          "DropStmt": {
            "behavior": "DROP_RESTRICT",
            "objects": [
              {
                "ObjectWithArgs": {
                  "objargs": [
                    {
                      "TypeName": {
                        "location": 19,
                        "names": [
                          {
                            "String": {
                              "sval": "anycompatiblerange",
                            },
                          },
                        ],
                        "typemod": -1,
                      },
                    },
                    {
                      "TypeName": {
                        "location": 41,
                        "names": [
                          {
                            "String": {
                              "sval": "anycompatiblearray",
                            },
                          },
                        ],
                        "typemod": -1,
                      },
                    },
                  ],
                  "objfuncargs": [
                    {
                      "FunctionParameter": {
                        "argType": {
                          "location": 19,
                          "names": [
                            {
                              "String": {
                                "sval": "anycompatiblerange",
                              },
                            },
                          ],
                          "typemod": -1,
                        },
                        "mode": "FUNC_PARAM_DEFAULT",
                        "name": "x",
                      },
                    },
                    {
                      "FunctionParameter": {
                        "argType": {
                          "location": 41,
                          "names": [
                            {
                              "String": {
                                "sval": "anycompatiblearray",
                              },
                            },
                          ],
                          "typemod": -1,
                        },
                        "mode": "FUNC_PARAM_DEFAULT",
                        "name": "y",
                      },
                    },
                  ],
                  "objname": [
                    {
                      "String": {
                        "sval": "f1",
                      },
                    },
                  ],
                },
              },
            ],
            "removeType": "OBJECT_FUNCTION",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1656 1`] = `
[
  "create function f1(a anyelement, b anyarray,
                   c anycompatible, d anycompatible,
                   OUT x anyarray, OUT y anycompatiblearray)
as $$
begin
  x := a || b;
  y := array[c, d];
end$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "f1",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
begin
  x := a || b;
  y := array[c, d];
end",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 159,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 212,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 21,
                    "names": [
                      {
                        "String": {
                          "sval": "anyelement",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                  "name": "a",
                },
              },
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 35,
                    "names": [
                      {
                        "String": {
                          "sval": "anyarray",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                  "name": "b",
                },
              },
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 66,
                    "names": [
                      {
                        "String": {
                          "sval": "anycompatible",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                  "name": "c",
                },
              },
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 83,
                    "names": [
                      {
                        "String": {
                          "sval": "anycompatible",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                  "name": "d",
                },
              },
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 123,
                    "names": [
                      {
                        "String": {
                          "sval": "anyarray",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_OUT",
                  "name": "x",
                },
              },
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 139,
                    "names": [
                      {
                        "String": {
                          "sval": "anycompatiblearray",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_OUT",
                  "name": "y",
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1665 1`] = `
[
  "select x, pg_typeof(x), y, pg_typeof(y)
  from f1(11, array[1, 2], 42, 34.5)",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "fromClause": [
              {
                "RangeFunction": {
                  "functions": [
                    {
                      "List": {
                        "items": [
                          {
                            "FuncCall": {
                              "args": [
                                {
                                  "A_Const": {
                                    "ival": {
                                      "ival": 11,
                                    },
                                    "location": 50,
                                  },
                                },
                                {
                                  "A_ArrayExpr": {
                                    "elements": [
                                      {
                                        "A_Const": {
                                          "ival": {
                                            "ival": 1,
                                          },
                                          "location": 60,
                                        },
                                      },
                                      {
                                        "A_Const": {
                                          "ival": {
                                            "ival": 2,
                                          },
                                          "location": 63,
                                        },
                                      },
                                    ],
                                    "location": 54,
                                  },
                                },
                                {
                                  "A_Const": {
                                    "ival": {
                                      "ival": 42,
                                    },
                                    "location": 67,
                                  },
                                },
                                {
                                  "A_Const": {
                                    "fval": {
                                      "fval": "34.5",
                                    },
                                    "location": 71,
                                  },
                                },
                              ],
                              "funcformat": "COERCE_EXPLICIT_CALL",
                              "funcname": [
                                {
                                  "String": {
                                    "sval": "f1",
                                  },
                                },
                              ],
                              "location": 47,
                            },
                          },
                          {},
                        ],
                      },
                    },
                  ],
                },
              },
            ],
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "ColumnRef": {
                      "fields": [
                        {
                          "String": {
                            "sval": "x",
                          },
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
              {
                "ResTarget": {
                  "location": 10,
                  "val": {
                    "FuncCall": {
                      "args": [
                        {
                          "ColumnRef": {
                            "fields": [
                              {
                                "String": {
                                  "sval": "x",
                                },
                              },
                            ],
                            "location": 20,
                          },
                        },
                      ],
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "pg_typeof",
                          },
                        },
                      ],
                      "location": 10,
                    },
                  },
                },
              },
              {
                "ResTarget": {
                  "location": 24,
                  "val": {
                    "ColumnRef": {
                      "fields": [
                        {
                          "String": {
                            "sval": "y",
                          },
                        },
                      ],
                      "location": 24,
                    },
                  },
                },
              },
              {
                "ResTarget": {
                  "location": 27,
                  "val": {
                    "FuncCall": {
                      "args": [
                        {
                          "ColumnRef": {
                            "fields": [
                              {
                                "String": {
                                  "sval": "y",
                                },
                              },
                            ],
                            "location": 37,
                          },
                        },
                      ],
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "pg_typeof",
                          },
                        },
                      ],
                      "location": 27,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1672 1`] = `
[
  "  -- fail

drop function f1(a anyelement, b anyarray,
                 c anycompatible, d anycompatible)",
  {
    "stmts": [
      {
        "stmt": {
          "DropStmt": {
            "behavior": "DROP_RESTRICT",
            "objects": [
              {
                "ObjectWithArgs": {
                  "objargs": [
                    {
                      "TypeName": {
                        "location": 30,
                        "names": [
                          {
                            "String": {
                              "sval": "anyelement",
                            },
                          },
                        ],
                        "typemod": -1,
                      },
                    },
                    {
                      "TypeName": {
                        "location": 44,
                        "names": [
                          {
                            "String": {
                              "sval": "anyarray",
                            },
                          },
                        ],
                        "typemod": -1,
                      },
                    },
                    {
                      "TypeName": {
                        "location": 73,
                        "names": [
                          {
                            "String": {
                              "sval": "anycompatible",
                            },
                          },
                        ],
                        "typemod": -1,
                      },
                    },
                    {
                      "TypeName": {
                        "location": 90,
                        "names": [
                          {
                            "String": {
                              "sval": "anycompatible",
                            },
                          },
                        ],
                        "typemod": -1,
                      },
                    },
                  ],
                  "objfuncargs": [
                    {
                      "FunctionParameter": {
                        "argType": {
                          "location": 30,
                          "names": [
                            {
                              "String": {
                                "sval": "anyelement",
                              },
                            },
                          ],
                          "typemod": -1,
                        },
                        "mode": "FUNC_PARAM_DEFAULT",
                        "name": "a",
                      },
                    },
                    {
                      "FunctionParameter": {
                        "argType": {
                          "location": 44,
                          "names": [
                            {
                              "String": {
                                "sval": "anyarray",
                              },
                            },
                          ],
                          "typemod": -1,
                        },
                        "mode": "FUNC_PARAM_DEFAULT",
                        "name": "b",
                      },
                    },
                    {
                      "FunctionParameter": {
                        "argType": {
                          "location": 73,
                          "names": [
                            {
                              "String": {
                                "sval": "anycompatible",
                              },
                            },
                          ],
                          "typemod": -1,
                        },
                        "mode": "FUNC_PARAM_DEFAULT",
                        "name": "c",
                      },
                    },
                    {
                      "FunctionParameter": {
                        "argType": {
                          "location": 90,
                          "names": [
                            {
                              "String": {
                                "sval": "anycompatible",
                              },
                            },
                          ],
                          "typemod": -1,
                        },
                        "mode": "FUNC_PARAM_DEFAULT",
                        "name": "d",
                      },
                    },
                  ],
                  "objname": [
                    {
                      "String": {
                        "sval": "f1",
                      },
                    },
                  ],
                },
              },
            ],
            "removeType": "OBJECT_FUNCTION",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1683 1`] = `
[
  "create function f1(in i int, out j int) returns int as $$
begin
  return i+1;
end$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "f1",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
begin
  return i+1;
end",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 52,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 84,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 24,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_IN",
                  "name": "i",
                },
              },
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 35,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_OUT",
                  "name": "j",
                },
              },
            ],
            "returnType": {
              "location": 48,
              "names": [
                {
                  "String": {
                    "sval": "pg_catalog",
                  },
                },
                {
                  "String": {
                    "sval": "int4",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1688 1`] = `
[
  "create function f1(in i int, out j int) as $$
begin
  j := i+1;
  return;
end$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "f1",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
begin
  j := i+1;
  return;
end",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 40,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 80,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 24,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_IN",
                  "name": "i",
                },
              },
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 35,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_OUT",
                  "name": "j",
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1697 1`] = `
[
  "create or replace function f1(inout i int) as $$
begin
  i := i+1;
end$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "f1",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
begin
  i := i+1;
end",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 43,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 73,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 38,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_INOUT",
                  "name": "i",
                },
              },
            ],
            "replace": true,
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1705 1`] = `
[
  "drop function f1(int)",
  {
    "stmts": [
      {
        "stmt": {
          "DropStmt": {
            "behavior": "DROP_RESTRICT",
            "objects": [
              {
                "ObjectWithArgs": {
                  "objargs": [
                    {
                      "TypeName": {
                        "location": 17,
                        "names": [
                          {
                            "String": {
                              "sval": "pg_catalog",
                            },
                          },
                          {
                            "String": {
                              "sval": "int4",
                            },
                          },
                        ],
                        "typemod": -1,
                      },
                    },
                  ],
                  "objfuncargs": [
                    {
                      "FunctionParameter": {
                        "argType": {
                          "location": 17,
                          "names": [
                            {
                              "String": {
                                "sval": "pg_catalog",
                              },
                            },
                            {
                              "String": {
                                "sval": "int4",
                              },
                            },
                          ],
                          "typemod": -1,
                        },
                        "mode": "FUNC_PARAM_DEFAULT",
                      },
                    },
                  ],
                  "objname": [
                    {
                      "String": {
                        "sval": "f1",
                      },
                    },
                  ],
                },
              },
            ],
            "removeType": "OBJECT_FUNCTION",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1707 1`] = `
[
  "create function f1(in i int, out j int) returns setof int as $$
begin
  j := i+1;
  return next;
  j := i+2;
  return next;
  return;
end$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "f1",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
begin
  j := i+1;
  return next;
  j := i+2;
  return next;
  return;
end",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 58,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 140,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 24,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_IN",
                  "name": "i",
                },
              },
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 35,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_OUT",
                  "name": "j",
                },
              },
            ],
            "returnType": {
              "location": 54,
              "names": [
                {
                  "String": {
                    "sval": "pg_catalog",
                  },
                },
                {
                  "String": {
                    "sval": "int4",
                  },
                },
              ],
              "setof": true,
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1716 1`] = `
[
  "select * from f1(42)",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "fromClause": [
              {
                "RangeFunction": {
                  "functions": [
                    {
                      "List": {
                        "items": [
                          {
                            "FuncCall": {
                              "args": [
                                {
                                  "A_Const": {
                                    "ival": {
                                      "ival": 42,
                                    },
                                    "location": 17,
                                  },
                                },
                              ],
                              "funcformat": "COERCE_EXPLICIT_CALL",
                              "funcname": [
                                {
                                  "String": {
                                    "sval": "f1",
                                  },
                                },
                              ],
                              "location": 14,
                            },
                          },
                          {},
                        ],
                      },
                    },
                  ],
                },
              },
            ],
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "ColumnRef": {
                      "fields": [
                        {
                          "A_Star": {},
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1720 1`] = `
[
  "create function f1(in i int, out j int, out k text) as $$
begin
  j := i;
  j := j+1;
  k := 'foo';
end$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "f1",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
begin
  j := i;
  j := j+1;
  k := 'foo';
end",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 52,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 106,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 24,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_IN",
                  "name": "i",
                },
              },
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 35,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_OUT",
                  "name": "j",
                },
              },
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 46,
                    "names": [
                      {
                        "String": {
                          "sval": "text",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_OUT",
                  "name": "k",
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1732 1`] = `
[
  "create function f1(in i int, out j int, out k text) returns setof record as $$
begin
  j := i+1;
  k := 'foo';
  return next;
  j := j+1;
  k := 'foot';
  return next;
end$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "f1",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
begin
  j := i+1;
  k := 'foo';
  return next;
  j := j+1;
  k := 'foot';
  return next;
end",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 73,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 174,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 24,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_IN",
                  "name": "i",
                },
              },
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 35,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_OUT",
                  "name": "j",
                },
              },
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 46,
                    "names": [
                      {
                        "String": {
                          "sval": "text",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_OUT",
                  "name": "k",
                },
              },
            ],
            "returnType": {
              "location": 66,
              "names": [
                {
                  "String": {
                    "sval": "record",
                  },
                },
              ],
              "setof": true,
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1746 1`] = `
[
  "create function duplic(in i anyelement, out j anyelement, out k anyarray) as $$
begin
  j := i;
  k := array[j,j];
  return;
end$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "duplic",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
begin
  j := i;
  k := array[j,j];
  return;
end",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 74,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 131,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 28,
                    "names": [
                      {
                        "String": {
                          "sval": "anyelement",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_IN",
                  "name": "i",
                },
              },
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 46,
                    "names": [
                      {
                        "String": {
                          "sval": "anyelement",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_OUT",
                  "name": "j",
                },
              },
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 64,
                    "names": [
                      {
                        "String": {
                          "sval": "anyarray",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_OUT",
                  "name": "k",
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1753 1`] = `
[
  "select * from duplic(42)",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "fromClause": [
              {
                "RangeFunction": {
                  "functions": [
                    {
                      "List": {
                        "items": [
                          {
                            "FuncCall": {
                              "args": [
                                {
                                  "A_Const": {
                                    "ival": {
                                      "ival": 42,
                                    },
                                    "location": 21,
                                  },
                                },
                              ],
                              "funcformat": "COERCE_EXPLICIT_CALL",
                              "funcname": [
                                {
                                  "String": {
                                    "sval": "duplic",
                                  },
                                },
                              ],
                              "location": 14,
                            },
                          },
                          {},
                        ],
                      },
                    },
                  ],
                },
              },
            ],
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "ColumnRef": {
                      "fields": [
                        {
                          "A_Star": {},
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1756 1`] = `
[
  "drop function duplic(anyelement)",
  {
    "stmts": [
      {
        "stmt": {
          "DropStmt": {
            "behavior": "DROP_RESTRICT",
            "objects": [
              {
                "ObjectWithArgs": {
                  "objargs": [
                    {
                      "TypeName": {
                        "location": 21,
                        "names": [
                          {
                            "String": {
                              "sval": "anyelement",
                            },
                          },
                        ],
                        "typemod": -1,
                      },
                    },
                  ],
                  "objfuncargs": [
                    {
                      "FunctionParameter": {
                        "argType": {
                          "location": 21,
                          "names": [
                            {
                              "String": {
                                "sval": "anyelement",
                              },
                            },
                          ],
                          "typemod": -1,
                        },
                        "mode": "FUNC_PARAM_DEFAULT",
                      },
                    },
                  ],
                  "objname": [
                    {
                      "String": {
                        "sval": "duplic",
                      },
                    },
                  ],
                },
              },
            ],
            "removeType": "OBJECT_FUNCTION",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1758 1`] = `
[
  "create function duplic(in i anycompatiblerange, out j anycompatible, out k anycompatiblearray) as $$
begin
  j := lower(i);
  k := array[lower(i),upper(i)];
  return;
end$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "duplic",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
begin
  j := lower(i);
  k := array[lower(i),upper(i)];
  return;
end",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 95,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 173,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 28,
                    "names": [
                      {
                        "String": {
                          "sval": "anycompatiblerange",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_IN",
                  "name": "i",
                },
              },
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 54,
                    "names": [
                      {
                        "String": {
                          "sval": "anycompatible",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_OUT",
                  "name": "j",
                },
              },
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 75,
                    "names": [
                      {
                        "String": {
                          "sval": "anycompatiblearray",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_OUT",
                  "name": "k",
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1765 1`] = `
[
  "select * from duplic(int4range(42,49))",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "fromClause": [
              {
                "RangeFunction": {
                  "functions": [
                    {
                      "List": {
                        "items": [
                          {
                            "FuncCall": {
                              "args": [
                                {
                                  "FuncCall": {
                                    "args": [
                                      {
                                        "A_Const": {
                                          "ival": {
                                            "ival": 42,
                                          },
                                          "location": 31,
                                        },
                                      },
                                      {
                                        "A_Const": {
                                          "ival": {
                                            "ival": 49,
                                          },
                                          "location": 34,
                                        },
                                      },
                                    ],
                                    "funcformat": "COERCE_EXPLICIT_CALL",
                                    "funcname": [
                                      {
                                        "String": {
                                          "sval": "int4range",
                                        },
                                      },
                                    ],
                                    "location": 21,
                                  },
                                },
                              ],
                              "funcformat": "COERCE_EXPLICIT_CALL",
                              "funcname": [
                                {
                                  "String": {
                                    "sval": "duplic",
                                  },
                                },
                              ],
                              "location": 14,
                            },
                          },
                          {},
                        ],
                      },
                    },
                  ],
                },
              },
            ],
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "ColumnRef": {
                      "fields": [
                        {
                          "A_Star": {},
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1768 1`] = `
[
  "drop function duplic(anycompatiblerange)",
  {
    "stmts": [
      {
        "stmt": {
          "DropStmt": {
            "behavior": "DROP_RESTRICT",
            "objects": [
              {
                "ObjectWithArgs": {
                  "objargs": [
                    {
                      "TypeName": {
                        "location": 21,
                        "names": [
                          {
                            "String": {
                              "sval": "anycompatiblerange",
                            },
                          },
                        ],
                        "typemod": -1,
                      },
                    },
                  ],
                  "objfuncargs": [
                    {
                      "FunctionParameter": {
                        "argType": {
                          "location": 21,
                          "names": [
                            {
                              "String": {
                                "sval": "anycompatiblerange",
                              },
                            },
                          ],
                          "typemod": -1,
                        },
                        "mode": "FUNC_PARAM_DEFAULT",
                      },
                    },
                  ],
                  "objname": [
                    {
                      "String": {
                        "sval": "duplic",
                      },
                    },
                  ],
                },
              },
            ],
            "removeType": "OBJECT_FUNCTION",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1779 1`] = `
[
  "create function perform_simple_func(int) returns boolean as '
BEGIN
	IF $1 < 20 THEN
		INSERT INTO perform_test VALUES ($1, $1 + 10);
		RETURN TRUE;
	ELSE
		RETURN FALSE;
	END IF;
END;' language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "perform_simple_func",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
BEGIN
	IF $1 < 20 THEN
		INSERT INTO perform_test VALUES ($1, $1 + 10);
		RETURN TRUE;
	ELSE
		RETURN FALSE;
	END IF;
END;",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 57,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 186,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 36,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                },
              },
            ],
            "returnType": {
              "location": 49,
              "names": [
                {
                  "String": {
                    "sval": "pg_catalog",
                  },
                },
                {
                  "String": {
                    "sval": "bool",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1789 1`] = `
[
  "create function perform_test_func() returns void as '
BEGIN
	IF FOUND then
		INSERT INTO perform_test VALUES (100, 100);
	END IF;

	PERFORM perform_simple_func(5);

	IF FOUND then
		INSERT INTO perform_test VALUES (100, 100);
	END IF;

	PERFORM perform_simple_func(50);

	IF FOUND then
		INSERT INTO perform_test VALUES (100, 100);
	END IF;

	RETURN;
END;' language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "perform_test_func",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
BEGIN
	IF FOUND then
		INSERT INTO perform_test VALUES (100, 100);
	END IF;

	PERFORM perform_simple_func(5);

	IF FOUND then
		INSERT INTO perform_test VALUES (100, 100);
	END IF;

	PERFORM perform_simple_func(50);

	IF FOUND then
		INSERT INTO perform_test VALUES (100, 100);
	END IF;

	RETURN;
END;",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 49,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 357,
                },
              },
            ],
            "returnType": {
              "location": 44,
              "names": [
                {
                  "String": {
                    "sval": "void",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1810 1`] = `
[
  "SELECT perform_test_func()",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "FuncCall": {
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "perform_test_func",
                          },
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1813 1`] = `
[
  "drop table perform_test",
  {
    "stmts": [
      {
        "stmt": {
          "DropStmt": {
            "behavior": "DROP_RESTRICT",
            "objects": [
              {
                "List": {
                  "items": [
                    {
                      "String": {
                        "sval": "perform_test",
                      },
                    },
                  ],
                },
              },
            ],
            "removeType": "OBJECT_TABLE",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1821 1`] = `
[
  "create function sp_id_user(a_login text) returns int as $$
declare x int;
begin
  select into x id from users where login = a_login;
  if found then return x; end if;
  return 0;
end$$ language plpgsql stable",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "sp_id_user",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare x int;
begin
  select into x id from users where login = a_login;
  if found then return x; end if;
  return 0;
end",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 53,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 185,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "stable",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "volatility",
                  "location": 202,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 35,
                    "names": [
                      {
                        "String": {
                          "sval": "text",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                  "name": "a_login",
                },
              },
            ],
            "returnType": {
              "location": 49,
              "names": [
                {
                  "String": {
                    "sval": "pg_catalog",
                  },
                },
                {
                  "String": {
                    "sval": "int4",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1829 1`] = `
[
  "insert into users values('user1')",
  {
    "stmts": [
      {
        "stmt": {
          "InsertStmt": {
            "override": "OVERRIDING_NOT_SET",
            "relation": {
              "inh": true,
              "location": 12,
              "relname": "users",
              "relpersistence": "p",
            },
            "selectStmt": {
              "SelectStmt": {
                "limitOption": "LIMIT_OPTION_DEFAULT",
                "op": "SETOP_NONE",
                "valuesLists": [
                  {
                    "List": {
                      "items": [
                        {
                          "A_Const": {
                            "location": 25,
                            "sval": {
                              "sval": "user1",
                            },
                          },
                        },
                      ],
                    },
                  },
                ],
              },
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1831 1`] = `
[
  "select sp_id_user('user1')",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "FuncCall": {
                      "args": [
                        {
                          "A_Const": {
                            "location": 18,
                            "sval": {
                              "sval": "user1",
                            },
                          },
                        },
                      ],
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "sp_id_user",
                          },
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1834 1`] = `
[
  "create function sp_add_user(a_login text) returns int as $$
declare my_id_user int;
begin
  my_id_user = sp_id_user( a_login );
  IF  my_id_user > 0 THEN
    RETURN -1;  -- error code for existing user
  END IF;
  INSERT INTO users ( login ) VALUES ( a_login );
  my_id_user = sp_id_user( a_login );
  IF  my_id_user = 0 THEN
    RETURN -2;  -- error code for insertion failure
  END IF;
  RETURN my_id_user;
end$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "sp_add_user",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare my_id_user int;
begin
  my_id_user = sp_id_user( a_login );
  IF  my_id_user > 0 THEN
    RETURN -1;  -- error code for existing user
  END IF;
  INSERT INTO users ( login ) VALUES ( a_login );
  my_id_user = sp_id_user( a_login );
  IF  my_id_user = 0 THEN
    RETURN -2;  -- error code for insertion failure
  END IF;
  RETURN my_id_user;
end",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 54,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 415,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 36,
                    "names": [
                      {
                        "String": {
                          "sval": "text",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                  "name": "a_login",
                },
              },
            ],
            "returnType": {
              "location": 50,
              "names": [
                {
                  "String": {
                    "sval": "pg_catalog",
                  },
                },
                {
                  "String": {
                    "sval": "int4",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1849 1`] = `
[
  "select sp_add_user('user1')",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "FuncCall": {
                      "args": [
                        {
                          "A_Const": {
                            "location": 19,
                            "sval": {
                              "sval": "user1",
                            },
                          },
                        },
                      ],
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "sp_add_user",
                          },
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1855 1`] = `
[
  "drop function sp_add_user(text)",
  {
    "stmts": [
      {
        "stmt": {
          "DropStmt": {
            "behavior": "DROP_RESTRICT",
            "objects": [
              {
                "ObjectWithArgs": {
                  "objargs": [
                    {
                      "TypeName": {
                        "location": 26,
                        "names": [
                          {
                            "String": {
                              "sval": "text",
                            },
                          },
                        ],
                        "typemod": -1,
                      },
                    },
                  ],
                  "objfuncargs": [
                    {
                      "FunctionParameter": {
                        "argType": {
                          "location": 26,
                          "names": [
                            {
                              "String": {
                                "sval": "text",
                              },
                            },
                          ],
                          "typemod": -1,
                        },
                        "mode": "FUNC_PARAM_DEFAULT",
                      },
                    },
                  ],
                  "objname": [
                    {
                      "String": {
                        "sval": "sp_add_user",
                      },
                    },
                  ],
                },
              },
            ],
            "removeType": "OBJECT_FUNCTION",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1861 1`] = `
[
  "create table rc_test (a int, b int)",
  {
    "stmts": [
      {
        "stmt": {
          "CreateStmt": {
            "oncommit": "ONCOMMIT_NOOP",
            "relation": {
              "inh": true,
              "location": 13,
              "relname": "rc_test",
              "relpersistence": "p",
            },
            "tableElts": [
              {
                "ColumnDef": {
                  "colname": "a",
                  "is_local": true,
                  "location": 22,
                  "typeName": {
                    "location": 24,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                },
              },
              {
                "ColumnDef": {
                  "colname": "b",
                  "is_local": true,
                  "location": 29,
                  "typeName": {
                    "location": 31,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1864 1`] = `
[
  "create function return_unnamed_refcursor() returns refcursor as $$
declare
    rc refcursor;
begin
    open rc for select a from rc_test;
    return rc;
end
$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "return_unnamed_refcursor",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare
    rc refcursor;
begin
    open rc for select a from rc_test;
    return rc;
end
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 61,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 160,
                },
              },
            ],
            "returnType": {
              "location": 51,
              "names": [
                {
                  "String": {
                    "sval": "refcursor",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1873 1`] = `
[
  "create function use_refcursor(rc refcursor) returns int as $$
declare
    rc refcursor;
    x record;
begin
    rc := return_unnamed_refcursor();
    fetch next from rc into x;
    return x.a;
end
$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "use_refcursor",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare
    rc refcursor;
    x record;
begin
    rc := return_unnamed_refcursor();
    fetch next from rc into x;
    return x.a;
end
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 56,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 200,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 33,
                    "names": [
                      {
                        "String": {
                          "sval": "refcursor",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                  "name": "rc",
                },
              },
            ],
            "returnType": {
              "location": 52,
              "names": [
                {
                  "String": {
                    "sval": "pg_catalog",
                  },
                },
                {
                  "String": {
                    "sval": "int4",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1884 1`] = `
[
  "select use_refcursor(return_unnamed_refcursor())",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "FuncCall": {
                      "args": [
                        {
                          "FuncCall": {
                            "funcformat": "COERCE_EXPLICIT_CALL",
                            "funcname": [
                              {
                                "String": {
                                  "sval": "return_unnamed_refcursor",
                                },
                              },
                            ],
                            "location": 21,
                          },
                        },
                      ],
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "use_refcursor",
                          },
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1886 1`] = `
[
  "create function return_refcursor(rc refcursor) returns refcursor as $$
begin
    open rc for select a from rc_test;
    return rc;
end
$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "return_refcursor",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
begin
    open rc for select a from rc_test;
    return rc;
end
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 65,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 138,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 36,
                    "names": [
                      {
                        "String": {
                          "sval": "refcursor",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                  "name": "rc",
                },
              },
            ],
            "returnType": {
              "location": 55,
              "names": [
                {
                  "String": {
                    "sval": "refcursor",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1893 1`] = `
[
  "create function refcursor_test1(refcursor) returns refcursor as $$
begin
    perform return_refcursor($1);
    return $1;
end
$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "refcursor_test1",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
begin
    perform return_refcursor($1);
    return $1;
end
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 61,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 129,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 32,
                    "names": [
                      {
                        "String": {
                          "sval": "refcursor",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                },
              },
            ],
            "returnType": {
              "location": 51,
              "names": [
                {
                  "String": {
                    "sval": "refcursor",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1900 1`] = `
[
  "begin",
  {
    "stmts": [
      {
        "stmt": {
          "TransactionStmt": {
            "kind": "TRANS_STMT_BEGIN",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1902 1`] = `
[
  "select refcursor_test1('test1')",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "FuncCall": {
                      "args": [
                        {
                          "A_Const": {
                            "location": 23,
                            "sval": {
                              "sval": "test1",
                            },
                          },
                        },
                      ],
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "refcursor_test1",
                          },
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1908 1`] = `
[
  "commit",
  {
    "stmts": [
      {
        "stmt": {
          "TransactionStmt": {
            "kind": "TRANS_STMT_COMMIT",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1911 1`] = `
[
  "fetch next from test1",
  {
    "stmts": [
      {
        "stmt": {
          "FetchStmt": {
            "direction": "FETCH_FORWARD",
            "howMany": 1,
            "portalname": "test1",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1913 1`] = `
[
  "create function refcursor_test2(int, int) returns boolean as $$
declare
    c1 cursor (param1 int, param2 int) for select * from rc_test where a > param1 and b > param2;
    nonsense record;
begin
    open c1($1, $2);
    fetch c1 into nonsense;
    close c1;
    if found then
        return true;
    else
        return false;
    end if;
end
$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "refcursor_test2",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare
    c1 cursor (param1 int, param2 int) for select * from rc_test where a > param1 and b > param2;
    nonsense record;
begin
    open c1($1, $2);
    fetch c1 into nonsense;
    close c1;
    if found then
        return true;
    else
        return false;
    end if;
end
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 58,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 349,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 32,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                },
              },
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 37,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                },
              },
            ],
            "returnType": {
              "location": 50,
              "names": [
                {
                  "String": {
                    "sval": "pg_catalog",
                  },
                },
                {
                  "String": {
                    "sval": "bool",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1929 1`] = `
[
  "select refcursor_test2(20000, 20000) as "Should be false",
       refcursor_test2(20, 20) as "Should be true"",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "name": "Should be false",
                  "val": {
                    "FuncCall": {
                      "args": [
                        {
                          "A_Const": {
                            "ival": {
                              "ival": 20000,
                            },
                            "location": 23,
                          },
                        },
                        {
                          "A_Const": {
                            "ival": {
                              "ival": 20000,
                            },
                            "location": 30,
                          },
                        },
                      ],
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "refcursor_test2",
                          },
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
              {
                "ResTarget": {
                  "location": 66,
                  "name": "Should be true",
                  "val": {
                    "FuncCall": {
                      "args": [
                        {
                          "A_Const": {
                            "ival": {
                              "ival": 20,
                            },
                            "location": 82,
                          },
                        },
                        {
                          "A_Const": {
                            "ival": {
                              "ival": 20,
                            },
                            "location": 86,
                          },
                        },
                      ],
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "refcursor_test2",
                          },
                        },
                      ],
                      "location": 66,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1933 1`] = `
[
  "create function constant_refcursor() returns refcursor as $$
declare
    rc constant refcursor;
begin
    open rc for select a from rc_test;
    return rc;
end
$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "constant_refcursor",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare
    rc constant refcursor;
begin
    open rc for select a from rc_test;
    return rc;
end
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 55,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 163,
                },
              },
            ],
            "returnType": {
              "location": 45,
              "names": [
                {
                  "String": {
                    "sval": "refcursor",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1942 1`] = `
[
  "select constant_refcursor()",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "FuncCall": {
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "constant_refcursor",
                          },
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1945 1`] = `
[
  "create or replace function constant_refcursor() returns refcursor as $$
declare
    rc constant refcursor := 'my_cursor_name';
begin
    open rc for select a from rc_test;
    return rc;
end
$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "constant_refcursor",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare
    rc constant refcursor := 'my_cursor_name';
begin
    open rc for select a from rc_test;
    return rc;
end
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 66,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 194,
                },
              },
            ],
            "replace": true,
            "returnType": {
              "location": 56,
              "names": [
                {
                  "String": {
                    "sval": "refcursor",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1959 1`] = `
[
  "create function namedparmcursor_test1(int, int) returns boolean as $$
declare
    c1 cursor (param1 int, param12 int) for select * from rc_test where a > param1 and b > param12;
    nonsense record;
begin
    open c1(param12 := $2, param1 := $1);
    fetch c1 into nonsense;
    close c1;
    if found then
        return true;
    else
        return false;
    end if;
end
$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "namedparmcursor_test1",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare
    c1 cursor (param1 int, param12 int) for select * from rc_test where a > param1 and b > param12;
    nonsense record;
begin
    open c1(param12 := $2, param1 := $1);
    fetch c1 into nonsense;
    close c1;
    if found then
        return true;
    else
        return false;
    end if;
end
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 64,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 378,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 38,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                },
              },
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 43,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                },
              },
            ],
            "returnType": {
              "location": 56,
              "names": [
                {
                  "String": {
                    "sval": "pg_catalog",
                  },
                },
                {
                  "String": {
                    "sval": "bool",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1975 1`] = `
[
  "select namedparmcursor_test1(20000, 20000) as "Should be false",
       namedparmcursor_test1(20, 20) as "Should be true"",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "name": "Should be false",
                  "val": {
                    "FuncCall": {
                      "args": [
                        {
                          "A_Const": {
                            "ival": {
                              "ival": 20000,
                            },
                            "location": 29,
                          },
                        },
                        {
                          "A_Const": {
                            "ival": {
                              "ival": 20000,
                            },
                            "location": 36,
                          },
                        },
                      ],
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "namedparmcursor_test1",
                          },
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
              {
                "ResTarget": {
                  "location": 72,
                  "name": "Should be true",
                  "val": {
                    "FuncCall": {
                      "args": [
                        {
                          "A_Const": {
                            "ival": {
                              "ival": 20,
                            },
                            "location": 94,
                          },
                        },
                        {
                          "A_Const": {
                            "ival": {
                              "ival": 20,
                            },
                            "location": 98,
                          },
                        },
                      ],
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "namedparmcursor_test1",
                          },
                        },
                      ],
                      "location": 72,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1979 1`] = `
[
  "create function namedparmcursor_test2(int, int) returns boolean as $$
declare
    c1 cursor (param1 int, param2 int) for select * from rc_test where a > param1 and b > param2;
    nonsense record;
begin
    open c1(param1 := $1, $2);
    fetch c1 into nonsense;
    close c1;
    if found then
        return true;
    else
        return false;
    end if;
end
$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "namedparmcursor_test2",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare
    c1 cursor (param1 int, param2 int) for select * from rc_test where a > param1 and b > param2;
    nonsense record;
begin
    open c1(param1 := $1, $2);
    fetch c1 into nonsense;
    close c1;
    if found then
        return true;
    else
        return false;
    end if;
end
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 64,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 365,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 38,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                },
              },
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 43,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                },
              },
            ],
            "returnType": {
              "location": 56,
              "names": [
                {
                  "String": {
                    "sval": "pg_catalog",
                  },
                },
                {
                  "String": {
                    "sval": "bool",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 1998 1`] = `
[
  "create function namedparmcursor_test3() returns void as $$
declare
    c1 cursor (param1 int, param2 int) for select * from rc_test where a > param1 and b > param2;
begin
    open c1(param2 := 20, 21);
end
$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "namedparmcursor_test3",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare
    c1 cursor (param1 int, param2 int) for select * from rc_test where a > param1 and b > param2;
begin
    open c1(param2 := 20, 21);
end
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 53,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 209,
                },
              },
            ],
            "returnType": {
              "location": 48,
              "names": [
                {
                  "String": {
                    "sval": "void",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2007 1`] = `
[
  "create function namedparmcursor_test4() returns void as $$
declare
    c1 cursor (param1 int, param2 int) for select * from rc_test where a > param1 and b > param2;
begin
    open c1(20, param1 := 21);
end
$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "namedparmcursor_test4",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare
    c1 cursor (param1 int, param2 int) for select * from rc_test where a > param1 and b > param2;
begin
    open c1(20, param1 := 21);
end
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 53,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 209,
                },
              },
            ],
            "returnType": {
              "location": 48,
              "names": [
                {
                  "String": {
                    "sval": "void",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2016 1`] = `
[
  "create function namedparmcursor_test5() returns void as $$
declare
  c1 cursor (p1 int, p2 int) for
    select * from tenk1 where thousand = p1 and tenthous = p2;
begin
  open c1 (p2 := 77, p2 := 42);
end
$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "namedparmcursor_test5",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare
  c1 cursor (p1 int, p2 int) for
    select * from tenk1 where thousand = p1 and tenthous = p2;
begin
  open c1 (p2 := 77, p2 := 42);
end
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 53,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 208,
                },
              },
            ],
            "returnType": {
              "location": 48,
              "names": [
                {
                  "String": {
                    "sval": "void",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2026 1`] = `
[
  "create function namedparmcursor_test6() returns void as $$
declare
  c1 cursor (p1 int, p2 int) for
    select * from tenk1 where thousand = p1 and tenthous = p2;
begin
  open c1 (p2 := 77);
end
$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "namedparmcursor_test6",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare
  c1 cursor (p1 int, p2 int) for
    select * from tenk1 where thousand = p1 and tenthous = p2;
begin
  open c1 (p2 := 77);
end
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 53,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 198,
                },
              },
            ],
            "returnType": {
              "location": 48,
              "names": [
                {
                  "String": {
                    "sval": "void",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2037 1`] = `
[
  "create function namedparmcursor_test7() returns void as $$
declare
  c1 cursor (p1 int, p2 int) for
    select * from tenk1 where thousand = p1 and tenthous = p2;
begin
  open c1 (p2 := 77, p1 := 42/0);
end $$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "namedparmcursor_test7",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare
  c1 cursor (p1 int, p2 int) for
    select * from tenk1 where thousand = p1 and tenthous = p2;
begin
  open c1 (p2 := 77, p1 := 42/0);
end ",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 53,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 210,
                },
              },
            ],
            "returnType": {
              "location": 48,
              "names": [
                {
                  "String": {
                    "sval": "void",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2051 1`] = `
[
  "create function namedparmcursor_test8() returns int4 as $$
declare
  c1 cursor (p1 int, p2 int) for
    select count(*) from tenk1 where thousand = p1 and tenthous = p2;
  n int4;
begin
  open c1 (77 -- test
  , 42);
  fetch c1 into n;
  return n;
end $$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "namedparmcursor_test8",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare
  c1 cursor (p1 int, p2 int) for
    select count(*) from tenk1 where thousand = p1 and tenthous = p2;
  n int4;
begin
  open c1 (77 -- test
  , 42);
  fetch c1 into n;
  return n;
end ",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 53,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 255,
                },
              },
            ],
            "returnType": {
              "location": 48,
              "names": [
                {
                  "String": {
                    "sval": "int4",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2065 1`] = `
[
  "create function namedparmcursor_test9(p1 int) returns int4 as $$
declare
  c1 cursor (p1 int, p2 int, debug int) for
    select count(*) from tenk1 where thousand = p1 and tenthous = p2
      and four = debug;
  p2 int4 := 1006;
  n int4;
begin
  open c1 (p1 := p1, p2 := p2, debug := 2);
  fetch c1 into n;
  return n;
end $$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "namedparmcursor_test9",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare
  c1 cursor (p1 int, p2 int, debug int) for
    select count(*) from tenk1 where thousand = p1 and tenthous = p2
      and four = debug;
  p2 int4 := 1006;
  n int4;
begin
  open c1 (p1 := p1, p2 := p2, debug := 2);
  fetch c1 into n;
  return n;
end ",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 59,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 327,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 41,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                  "name": "p1",
                },
              },
            ],
            "returnType": {
              "location": 54,
              "names": [
                {
                  "String": {
                    "sval": "int4",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2082 1`] = `
[
  "create function raise_test1(int) returns int as $$
begin
    raise notice 'This message has too many parameters!', $1;
    return $1;
end;
$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "raise_test1",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
begin
    raise notice 'This message has too many parameters!', $1;
    return $1;
end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 45,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 142,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 28,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                },
              },
            ],
            "returnType": {
              "location": 41,
              "names": [
                {
                  "String": {
                    "sval": "pg_catalog",
                  },
                },
                {
                  "String": {
                    "sval": "int4",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2089 1`] = `
[
  "create function raise_test2(int) returns int as $$
begin
    raise notice 'This message has too few parameters: %, %, %', $1, $1;
    return $1;
end;
$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "raise_test2",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
begin
    raise notice 'This message has too few parameters: %, %, %', $1, $1;
    return $1;
end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 45,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 153,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 28,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                },
              },
            ],
            "returnType": {
              "location": 41,
              "names": [
                {
                  "String": {
                    "sval": "pg_catalog",
                  },
                },
                {
                  "String": {
                    "sval": "int4",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2096 1`] = `
[
  "create function raise_test3(int) returns int as $$
begin
    raise notice 'This message has no parameters (despite having %% signs in it)!';
    return $1;
end;
$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "raise_test3",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
begin
    raise notice 'This message has no parameters (despite having %% signs in it)!';
    return $1;
end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 45,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 164,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 28,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                },
              },
            ],
            "returnType": {
              "location": 41,
              "names": [
                {
                  "String": {
                    "sval": "pg_catalog",
                  },
                },
                {
                  "String": {
                    "sval": "int4",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2103 1`] = `
[
  "select raise_test3(1)",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "FuncCall": {
                      "args": [
                        {
                          "A_Const": {
                            "ival": {
                              "ival": 1,
                            },
                            "location": 19,
                          },
                        },
                      ],
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "raise_test3",
                          },
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2128 1`] = `
[
  "SELECT reraise_test()",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "FuncCall": {
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "reraise_test",
                          },
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2134 1`] = `
[
  "create function bad_sql1() returns int as $$
declare a int;
begin
    a := 5;
    Johnny Yuma;
    a := 10;
    return a;
end$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "bad_sql1",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare a int;
begin
    a := 5;
    Johnny Yuma;
    a := 10;
    return a;
end",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 39,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 128,
                },
              },
            ],
            "returnType": {
              "location": 35,
              "names": [
                {
                  "String": {
                    "sval": "pg_catalog",
                  },
                },
                {
                  "String": {
                    "sval": "int4",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2143 1`] = `
[
  "create function bad_sql2() returns int as $$
declare r record;
begin
    for r in select I fought the law, the law won LOOP
        raise notice 'in loop';
    end loop;
    return 5;
end;$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "bad_sql2",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare r record;
begin
    for r in select I fought the law, the law won LOOP
        raise notice 'in loop';
    end loop;
    return 5;
end;",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 39,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 191,
                },
              },
            ],
            "returnType": {
              "location": 35,
              "names": [
                {
                  "String": {
                    "sval": "pg_catalog",
                  },
                },
                {
                  "String": {
                    "sval": "int4",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2154 1`] = `
[
  "create function missing_return_expr() returns int as $$
begin
    return ;
end;$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "missing_return_expr",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
begin
    return ;
end;",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 50,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 82,
                },
              },
            ],
            "returnType": {
              "location": 46,
              "names": [
                {
                  "String": {
                    "sval": "pg_catalog",
                  },
                },
                {
                  "String": {
                    "sval": "int4",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2159 1`] = `
[
  "create function void_return_expr() returns void as $$
begin
    return 5;
end;$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "void_return_expr",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
begin
    return 5;
end;",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 48,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 81,
                },
              },
            ],
            "returnType": {
              "location": 43,
              "names": [
                {
                  "String": {
                    "sval": "void",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2170 1`] = `
[
  "select void_return_expr()",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "FuncCall": {
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "void_return_expr",
                          },
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2178 1`] = `
[
  "select missing_return_expr()",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "FuncCall": {
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "missing_return_expr",
                          },
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2180 1`] = `
[
  "drop function void_return_expr()",
  {
    "stmts": [
      {
        "stmt": {
          "DropStmt": {
            "behavior": "DROP_RESTRICT",
            "objects": [
              {
                "ObjectWithArgs": {
                  "objname": [
                    {
                      "String": {
                        "sval": "void_return_expr",
                      },
                    },
                  ],
                },
              },
            ],
            "removeType": "OBJECT_FUNCTION",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2190 1`] = `
[
  "create or replace function execute_into_test(varchar) returns record as $$
declare
    _r record;
    _rt eifoo%rowtype;
    _v eitype;
    i int;
    j int;
    k int;
begin
    execute 'insert into '||$1||' values(10,15)';
    execute 'select (row).* from (select row(10,1)::eifoo) s' into _r;
    raise notice '% %', _r.i, _r.y;
    execute 'select * from '||$1||' limit 1' into _rt;
    raise notice '% %', _rt.i, _rt.y;
    execute 'select *, 20 from '||$1||' limit 1' into i, j, k;
    raise notice '% % %', i, j, k;
    execute 'select 1,2' into _v;
    return _v;
end; $$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "execute_into_test",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare
    _r record;
    _rt eifoo%rowtype;
    _v eitype;
    i int;
    j int;
    k int;
begin
    execute 'insert into '||$1||' values(10,15)';
    execute 'select (row).* from (select row(10,1)::eifoo) s' into _r;
    raise notice '% %', _r.i, _r.y;
    execute 'select * from '||$1||' limit 1' into _rt;
    raise notice '% %', _rt.i, _rt.y;
    execute 'select *, 20 from '||$1||' limit 1' into i, j, k;
    raise notice '% % %', i, j, k;
    execute 'select 1,2' into _v;
    return _v;
end; ",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 69,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 580,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 45,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "varchar",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                },
              },
            ],
            "replace": true,
            "returnType": {
              "location": 62,
              "names": [
                {
                  "String": {
                    "sval": "record",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2210 1`] = `
[
  "select execute_into_test('eifoo')",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "FuncCall": {
                      "args": [
                        {
                          "A_Const": {
                            "location": 25,
                            "sval": {
                              "sval": "eifoo",
                            },
                          },
                        },
                      ],
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "execute_into_test",
                          },
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2212 1`] = `
[
  "drop table eifoo cascade",
  {
    "stmts": [
      {
        "stmt": {
          "DropStmt": {
            "behavior": "DROP_CASCADE",
            "objects": [
              {
                "List": {
                  "items": [
                    {
                      "String": {
                        "sval": "eifoo",
                      },
                    },
                  ],
                },
              },
            ],
            "removeType": "OBJECT_TABLE",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2225 1`] = `
[
  "select excpt_test1()",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "FuncCall": {
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "excpt_test1",
                          },
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2227 1`] = `
[
  "create function excpt_test2() returns void as $$
begin
    begin
        begin
            raise notice '% %', sqlstate, sqlerrm;
        end;
    end;
end; $$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "excpt_test2",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
begin
    begin
        begin
            raise notice '% %', sqlstate, sqlerrm;
        end;
    end;
end; ",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 43,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 160,
                },
              },
            ],
            "returnType": {
              "location": 38,
              "names": [
                {
                  "String": {
                    "sval": "void",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2236 1`] = `
[
  "select excpt_test2()",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "FuncCall": {
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "excpt_test2",
                          },
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2238 1`] = `
[
  "create function excpt_test3() returns void as $$
begin
    begin
        raise exception 'user exception';
    exception when others then
	    raise notice 'caught exception % %', sqlstate, sqlerrm;
	    begin
	        raise notice '% %', sqlstate, sqlerrm;
	        perform 10/0;
        exception
            when substring_error then
                -- this exception handler shouldn't be invoked
                raise notice 'unexpected exception: % %', sqlstate, sqlerrm;
	        when division_by_zero then
	            raise notice 'caught exception % %', sqlstate, sqlerrm;
	    end;
	    raise notice '% %', sqlstate, sqlerrm;
    end;
end; $$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "excpt_test3",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
begin
    begin
        raise exception 'user exception';
    exception when others then
	    raise notice 'caught exception % %', sqlstate, sqlerrm;
	    begin
	        raise notice '% %', sqlstate, sqlerrm;
	        perform 10/0;
        exception
            when substring_error then
                -- this exception handler shouldn't be invoked
                raise notice 'unexpected exception: % %', sqlstate, sqlerrm;
	        when division_by_zero then
	            raise notice 'caught exception % %', sqlstate, sqlerrm;
	    end;
	    raise notice '% %', sqlstate, sqlerrm;
    end;
end; ",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 43,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 653,
                },
              },
            ],
            "returnType": {
              "location": 38,
              "names": [
                {
                  "String": {
                    "sval": "void",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2259 1`] = `
[
  "create function excpt_test4() returns text as $$
begin
	begin perform 1/0;
	exception when others then return sqlerrm; end;
end; $$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "excpt_test4",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
begin
	begin perform 1/0;
	exception when others then return sqlerrm; end;
end; ",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 43,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 132,
                },
              },
            ],
            "returnType": {
              "location": 38,
              "names": [
                {
                  "String": {
                    "sval": "text",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2266 1`] = `
[
  "drop function excpt_test1()",
  {
    "stmts": [
      {
        "stmt": {
          "DropStmt": {
            "behavior": "DROP_RESTRICT",
            "objects": [
              {
                "ObjectWithArgs": {
                  "objname": [
                    {
                      "String": {
                        "sval": "excpt_test1",
                      },
                    },
                  ],
                },
              },
            ],
            "removeType": "OBJECT_FUNCTION",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2272 1`] = `
[
  "create function raise_exprs() returns void as $$
declare
    a integer[] = '{10,20,30}';
    c varchar = 'xyz';
    i integer;
begin
    i := 2;
    raise notice '%; %; %; %; %; %', a, a[i], c, (select c || 'abc'), row(10,'aaa',NULL,30), NULL;
end;$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "raise_exprs",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare
    a integer[] = '{10,20,30}';
    c varchar = 'xyz';
    i integer;
begin
    i := 2;
    raise notice '%; %; %; %; %; %', a, a[i], c, (select c || 'abc'), row(10,'aaa',NULL,30), NULL;
end;",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 43,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 251,
                },
              },
            ],
            "returnType": {
              "location": 38,
              "names": [
                {
                  "String": {
                    "sval": "void",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2282 1`] = `
[
  "select raise_exprs()",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "FuncCall": {
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "raise_exprs",
                          },
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2289 1`] = `
[
  "create function multi_datum_use(p1 int) returns bool as $$
declare
  x int;
  y int;
begin
  select into x,y unique1/p1, unique1/$1 from tenk1 group by unique1/p1;
  return x = y;
end$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "multi_datum_use",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare
  x int;
  y int;
begin
  select into x,y unique1/p1, unique1/$1 from tenk1 group by unique1/p1;
  return x = y;
end",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 53,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 186,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 35,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                  "name": "p1",
                },
              },
            ],
            "returnType": {
              "location": 48,
              "names": [
                {
                  "String": {
                    "sval": "bool",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2298 1`] = `
[
  "select multi_datum_use(42)",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "FuncCall": {
                      "args": [
                        {
                          "A_Const": {
                            "ival": {
                              "ival": 42,
                            },
                            "location": 23,
                          },
                        },
                      ],
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "multi_datum_use",
                          },
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2308 1`] = `
[
  "insert into foo values (1,2), (3,4)",
  {
    "stmts": [
      {
        "stmt": {
          "InsertStmt": {
            "override": "OVERRIDING_NOT_SET",
            "relation": {
              "inh": true,
              "location": 12,
              "relname": "foo",
              "relpersistence": "p",
            },
            "selectStmt": {
              "SelectStmt": {
                "limitOption": "LIMIT_OPTION_DEFAULT",
                "op": "SETOP_NONE",
                "valuesLists": [
                  {
                    "List": {
                      "items": [
                        {
                          "A_Const": {
                            "ival": {
                              "ival": 1,
                            },
                            "location": 24,
                          },
                        },
                        {
                          "A_Const": {
                            "ival": {
                              "ival": 2,
                            },
                            "location": 26,
                          },
                        },
                      ],
                    },
                  },
                  {
                    "List": {
                      "items": [
                        {
                          "A_Const": {
                            "ival": {
                              "ival": 3,
                            },
                            "location": 31,
                          },
                        },
                        {
                          "A_Const": {
                            "ival": {
                              "ival": 4,
                            },
                            "location": 33,
                          },
                        },
                      ],
                    },
                  },
                ],
              },
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2310 1`] = `
[
  "create or replace function stricttest() returns void as $$
declare x record;
begin
  -- should work
  insert into foo values(5,6) returning * into x;
  raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2;
end$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "stricttest",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare x record;
begin
  -- should work
  insert into foo values(5,6) returning * into x;
  raise notice 'x.f1 = %, x.f2 = %', x.f1, x.f2;
end",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 53,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 205,
                },
              },
            ],
            "replace": true,
            "returnType": {
              "location": 48,
              "names": [
                {
                  "String": {
                    "sval": "void",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2318 1`] = `
[
  "select stricttest()",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "FuncCall": {
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "stricttest",
                          },
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2350 1`] = `
[
  "select * from foo",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "fromClause": [
              {
                "RangeVar": {
                  "inh": true,
                  "location": 14,
                  "relname": "foo",
                  "relpersistence": "p",
                },
              },
            ],
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "ColumnRef": {
                      "fields": [
                        {
                          "A_Star": {},
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2412 1`] = `
[
  "drop function stricttest()",
  {
    "stmts": [
      {
        "stmt": {
          "DropStmt": {
            "behavior": "DROP_RESTRICT",
            "objects": [
              {
                "ObjectWithArgs": {
                  "objname": [
                    {
                      "String": {
                        "sval": "stricttest",
                      },
                    },
                  ],
                },
              },
            ],
            "removeType": "OBJECT_FUNCTION",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2512 1`] = `
[
  "reset plpgsql.print_strict_params",
  {
    "stmts": [
      {
        "stmt": {
          "VariableSetStmt": {
            "kind": "VAR_RESET",
            "name": "plpgsql.print_strict_params",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2530 1`] = `
[
  "set plpgsql.extra_warnings to 'all'",
  {
    "stmts": [
      {
        "stmt": {
          "VariableSetStmt": {
            "args": [
              {
                "A_Const": {
                  "location": 30,
                  "sval": {
                    "sval": "all",
                  },
                },
              },
            ],
            "kind": "VAR_SET_VALUE",
            "name": "plpgsql.extra_warnings",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2540 1`] = `
[
  "create or replace function shadowtest(in1 int)
	returns table (out1 int) as $$
declare
in1 int;
out1 int;
begin
end
$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "shadowtest",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare
in1 int;
out1 int;
begin
end
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 73,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 119,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 42,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                  "name": "in1",
                },
              },
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 68,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_TABLE",
                  "name": "out1",
                },
              },
            ],
            "replace": true,
            "returnType": {
              "location": 56,
              "names": [
                {
                  "String": {
                    "sval": "pg_catalog",
                  },
                },
                {
                  "String": {
                    "sval": "int4",
                  },
                },
              ],
              "setof": true,
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2564 1`] = `
[
  "create or replace function shadowtest()
	returns void as $$
declare
f1 int;
begin
	declare
	f1 int;
	begin
	end;
end$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "shadowtest",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare
f1 int;
begin
	declare
	f1 int;
	begin
	end;
end",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 54,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 119,
                },
              },
            ],
            "replace": true,
            "returnType": {
              "location": 49,
              "names": [
                {
                  "String": {
                    "sval": "void",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2577 1`] = `
[
  "create or replace function shadowtest(in1 int)
	returns void as $$
declare
in1 int;
begin
	declare
	in1 int;
	begin
	end;
end$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "shadowtest",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare
in1 int;
begin
	declare
	in1 int;
	begin
	end;
end",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 61,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 128,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 42,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                  "name": "in1",
                },
              },
            ],
            "replace": true,
            "returnType": {
              "location": 56,
              "names": [
                {
                  "String": {
                    "sval": "void",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2603 1`] = `
[
  "create or replace function shadowtest(f1 int)
	returns boolean as $$
declare f1 int; begin return 1; end $$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "shadowtest",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare f1 int; begin return 1; end ",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 63,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 108,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 41,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                  "name": "f1",
                },
              },
            ],
            "replace": true,
            "returnType": {
              "location": 55,
              "names": [
                {
                  "String": {
                    "sval": "pg_catalog",
                  },
                },
                {
                  "String": {
                    "sval": "bool",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2607 1`] = `
[
  "select shadowtest(1)",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "FuncCall": {
                      "args": [
                        {
                          "A_Const": {
                            "ival": {
                              "ival": 1,
                            },
                            "location": 18,
                          },
                        },
                      ],
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "shadowtest",
                          },
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2609 1`] = `
[
  "reset plpgsql.extra_errors",
  {
    "stmts": [
      {
        "stmt": {
          "VariableSetStmt": {
            "kind": "VAR_RESET",
            "name": "plpgsql.extra_errors",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2621 1`] = `
[
  "do $$
declare x int;
begin
  select v from generate_series(1,2) g(v) into x;
end;
$$",
  {
    "stmts": [
      {
        "stmt": {
          "DoStmt": {
            "args": [
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "
declare x int;
begin
  select v from generate_series(1,2) g(v) into x;
end;
",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 3,
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2628 1`] = `
[
  "set plpgsql.extra_errors to 'too_many_rows'",
  {
    "stmts": [
      {
        "stmt": {
          "VariableSetStmt": {
            "args": [
              {
                "A_Const": {
                  "location": 28,
                  "sval": {
                    "sval": "too_many_rows",
                  },
                },
              },
            ],
            "kind": "VAR_SET_VALUE",
            "name": "plpgsql.extra_errors",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2666 1`] = `
[
  "create table test_01(a int, b int, c int)",
  {
    "stmts": [
      {
        "stmt": {
          "CreateStmt": {
            "oncommit": "ONCOMMIT_NOOP",
            "relation": {
              "inh": true,
              "location": 13,
              "relname": "test_01",
              "relpersistence": "p",
            },
            "tableElts": [
              {
                "ColumnDef": {
                  "colname": "a",
                  "is_local": true,
                  "location": 21,
                  "typeName": {
                    "location": 23,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                },
              },
              {
                "ColumnDef": {
                  "colname": "b",
                  "is_local": true,
                  "location": 28,
                  "typeName": {
                    "location": 30,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                },
              },
              {
                "ColumnDef": {
                  "colname": "c",
                  "is_local": true,
                  "location": 35,
                  "typeName": {
                    "location": 37,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2668 1`] = `
[
  "alter table test_01 drop column a",
  {
    "stmts": [
      {
        "stmt": {
          "AlterTableStmt": {
            "cmds": [
              {
                "AlterTableCmd": {
                  "behavior": "DROP_RESTRICT",
                  "name": "a",
                  "subtype": "AT_DropColumn",
                },
              },
            ],
            "objtype": "OBJECT_TABLE",
            "relation": {
              "inh": true,
              "location": 12,
              "relname": "test_01",
              "relpersistence": "p",
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2671 1`] = `
[
  "insert into test_01 values(10,20)",
  {
    "stmts": [
      {
        "stmt": {
          "InsertStmt": {
            "override": "OVERRIDING_NOT_SET",
            "relation": {
              "inh": true,
              "location": 12,
              "relname": "test_01",
              "relpersistence": "p",
            },
            "selectStmt": {
              "SelectStmt": {
                "limitOption": "LIMIT_OPTION_DEFAULT",
                "op": "SETOP_NONE",
                "valuesLists": [
                  {
                    "List": {
                      "items": [
                        {
                          "A_Const": {
                            "ival": {
                              "ival": 10,
                            },
                            "location": 27,
                          },
                        },
                        {
                          "A_Const": {
                            "ival": {
                              "ival": 20,
                            },
                            "location": 30,
                          },
                        },
                      ],
                    },
                  },
                ],
              },
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2702 1`] = `
[
  "drop table test_01",
  {
    "stmts": [
      {
        "stmt": {
          "DropStmt": {
            "behavior": "DROP_RESTRICT",
            "objects": [
              {
                "List": {
                  "items": [
                    {
                      "String": {
                        "sval": "test_01",
                      },
                    },
                  ],
                },
              },
            ],
            "removeType": "OBJECT_TABLE",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2724 1`] = `
[
  "select * from sc_test()",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "fromClause": [
              {
                "RangeFunction": {
                  "functions": [
                    {
                      "List": {
                        "items": [
                          {
                            "FuncCall": {
                              "funcformat": "COERCE_EXPLICIT_CALL",
                              "funcname": [
                                {
                                  "String": {
                                    "sval": "sc_test",
                                  },
                                },
                              ],
                              "location": 14,
                            },
                          },
                          {},
                        ],
                      },
                    },
                  ],
                },
              },
            ],
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "ColumnRef": {
                      "fields": [
                        {
                          "A_Star": {},
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2726 1`] = `
[
  "create or replace function sc_test() returns setof integer as $$
declare
  c no scroll cursor for select f1 from int4_tbl;
  x integer;
begin
  open c;
  fetch last from c into x;
  while found loop
    return next x;
    fetch prior from c into x;
  end loop;
  close c;
end;
$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "sc_test",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare
  c no scroll cursor for select f1 from int4_tbl;
  x integer;
begin
  open c;
  fetch last from c into x;
  while found loop
    return next x;
    fetch prior from c into x;
  end loop;
  close c;
end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 59,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 280,
                },
              },
            ],
            "replace": true,
            "returnType": {
              "location": 51,
              "names": [
                {
                  "String": {
                    "sval": "pg_catalog",
                  },
                },
                {
                  "String": {
                    "sval": "int4",
                  },
                },
              ],
              "setof": true,
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2834 1`] = `
[
  "drop function sc_test()",
  {
    "stmts": [
      {
        "stmt": {
          "DropStmt": {
            "behavior": "DROP_RESTRICT",
            "objects": [
              {
                "ObjectWithArgs": {
                  "objname": [
                    {
                      "String": {
                        "sval": "sc_test",
                      },
                    },
                  ],
                },
              },
            ],
            "removeType": "OBJECT_FUNCTION",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2855 1`] = `
[
  "select pl_qual_names(42)",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "FuncCall": {
                      "args": [
                        {
                          "A_Const": {
                            "ival": {
                              "ival": 42,
                            },
                            "location": 21,
                          },
                        },
                      ],
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "pl_qual_names",
                          },
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2857 1`] = `
[
  "drop function pl_qual_names(int)",
  {
    "stmts": [
      {
        "stmt": {
          "DropStmt": {
            "behavior": "DROP_RESTRICT",
            "objects": [
              {
                "ObjectWithArgs": {
                  "objargs": [
                    {
                      "TypeName": {
                        "location": 28,
                        "names": [
                          {
                            "String": {
                              "sval": "pg_catalog",
                            },
                          },
                          {
                            "String": {
                              "sval": "int4",
                            },
                          },
                        ],
                        "typemod": -1,
                      },
                    },
                  ],
                  "objfuncargs": [
                    {
                      "FunctionParameter": {
                        "argType": {
                          "location": 28,
                          "names": [
                            {
                              "String": {
                                "sval": "pg_catalog",
                              },
                            },
                            {
                              "String": {
                                "sval": "int4",
                              },
                            },
                          ],
                          "typemod": -1,
                        },
                        "mode": "FUNC_PARAM_DEFAULT",
                      },
                    },
                  ],
                  "objname": [
                    {
                      "String": {
                        "sval": "pl_qual_names",
                      },
                    },
                  ],
                },
              },
            ],
            "removeType": "OBJECT_FUNCTION",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2860 1`] = `
[
  "create function ret_query1(out int, out int) returns setof record as $$
begin
    $1 := -1;
    $2 := -2;
    return next;
    return query select x + 1, x * 10 from generate_series(0, 10) s (x);
    return next;
end;
$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "ret_query1",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
begin
    $1 := -1;
    $2 := -2;
    return next;
    return query select x + 1, x * 10 from generate_series(0, 10) s (x);
    return next;
end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 66,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 221,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 31,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_OUT",
                },
              },
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 40,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_OUT",
                },
              },
            ],
            "returnType": {
              "location": 59,
              "names": [
                {
                  "String": {
                    "sval": "record",
                  },
                },
              ],
              "setof": true,
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2870 1`] = `
[
  "select * from ret_query1()",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "fromClause": [
              {
                "RangeFunction": {
                  "functions": [
                    {
                      "List": {
                        "items": [
                          {
                            "FuncCall": {
                              "funcformat": "COERCE_EXPLICIT_CALL",
                              "funcname": [
                                {
                                  "String": {
                                    "sval": "ret_query1",
                                  },
                                },
                              ],
                              "location": 14,
                            },
                          },
                          {},
                        ],
                      },
                    },
                  ],
                },
              },
            ],
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "ColumnRef": {
                      "fields": [
                        {
                          "A_Star": {},
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2872 1`] = `
[
  "create type record_type as (x text, y int, z boolean)",
  {
    "stmts": [
      {
        "stmt": {
          "CompositeTypeStmt": {
            "coldeflist": [
              {
                "ColumnDef": {
                  "colname": "x",
                  "is_local": true,
                  "location": 28,
                  "typeName": {
                    "location": 30,
                    "names": [
                      {
                        "String": {
                          "sval": "text",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                },
              },
              {
                "ColumnDef": {
                  "colname": "y",
                  "is_local": true,
                  "location": 36,
                  "typeName": {
                    "location": 38,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                },
              },
              {
                "ColumnDef": {
                  "colname": "z",
                  "is_local": true,
                  "location": 43,
                  "typeName": {
                    "location": 45,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "bool",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                },
              },
            ],
            "typevar": {
              "location": 12,
              "relname": "record_type",
              "relpersistence": "p",
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2874 1`] = `
[
  "create or replace function ret_query2(lim int) returns setof record_type as $$
begin
    return query select fipshash(s.x::text), s.x, s.x > 0
                 from generate_series(-8, lim) s (x) where s.x % 2 = 0;
end;
$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "ret_query2",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
begin
    return query select fipshash(s.x::text), s.x, s.x > 0
                 from generate_series(-8, lim) s (x) where s.x % 2 = 0;
end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 73,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 223,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 42,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                  "name": "lim",
                },
              },
            ],
            "replace": true,
            "returnType": {
              "location": 61,
              "names": [
                {
                  "String": {
                    "sval": "record_type",
                  },
                },
              ],
              "setof": true,
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2881 1`] = `
[
  "select * from ret_query2(8)",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "fromClause": [
              {
                "RangeFunction": {
                  "functions": [
                    {
                      "List": {
                        "items": [
                          {
                            "FuncCall": {
                              "args": [
                                {
                                  "A_Const": {
                                    "ival": {
                                      "ival": 8,
                                    },
                                    "location": 25,
                                  },
                                },
                              ],
                              "funcformat": "COERCE_EXPLICIT_CALL",
                              "funcname": [
                                {
                                  "String": {
                                    "sval": "ret_query2",
                                  },
                                },
                              ],
                              "location": 14,
                            },
                          },
                          {},
                        ],
                      },
                    },
                  ],
                },
              },
            ],
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "ColumnRef": {
                      "fields": [
                        {
                          "A_Star": {},
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2884 1`] = `
[
  "create function exc_using(int, text) returns int as $$
declare i int;
begin
  for i in execute 'select * from generate_series(1,$1)' using $1+1 loop
    raise notice '%', i;
  end loop;
  execute 'select $2 + $2*3 + length($1)' into i using $2,$1;
  return i;
end
$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "exc_using",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare i int;
begin
  for i in execute 'select * from generate_series(1,$1)' using $1+1 loop
    raise notice '%', i;
  end loop;
  execute 'select $2 + $2*3 + length($1)' into i using $2,$1;
  return i;
end
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 49,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 267,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 26,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                },
              },
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 31,
                    "names": [
                      {
                        "String": {
                          "sval": "text",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                },
              },
            ],
            "returnType": {
              "location": 45,
              "names": [
                {
                  "String": {
                    "sval": "pg_catalog",
                  },
                },
                {
                  "String": {
                    "sval": "int4",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2895 1`] = `
[
  "select exc_using(5, 'foobar')",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "FuncCall": {
                      "args": [
                        {
                          "A_Const": {
                            "ival": {
                              "ival": 5,
                            },
                            "location": 17,
                          },
                        },
                        {
                          "A_Const": {
                            "location": 20,
                            "sval": {
                              "sval": "foobar",
                            },
                          },
                        },
                      ],
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "exc_using",
                          },
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2897 1`] = `
[
  "drop function exc_using(int, text)",
  {
    "stmts": [
      {
        "stmt": {
          "DropStmt": {
            "behavior": "DROP_RESTRICT",
            "objects": [
              {
                "ObjectWithArgs": {
                  "objargs": [
                    {
                      "TypeName": {
                        "location": 24,
                        "names": [
                          {
                            "String": {
                              "sval": "pg_catalog",
                            },
                          },
                          {
                            "String": {
                              "sval": "int4",
                            },
                          },
                        ],
                        "typemod": -1,
                      },
                    },
                    {
                      "TypeName": {
                        "location": 29,
                        "names": [
                          {
                            "String": {
                              "sval": "text",
                            },
                          },
                        ],
                        "typemod": -1,
                      },
                    },
                  ],
                  "objfuncargs": [
                    {
                      "FunctionParameter": {
                        "argType": {
                          "location": 24,
                          "names": [
                            {
                              "String": {
                                "sval": "pg_catalog",
                              },
                            },
                            {
                              "String": {
                                "sval": "int4",
                              },
                            },
                          ],
                          "typemod": -1,
                        },
                        "mode": "FUNC_PARAM_DEFAULT",
                      },
                    },
                    {
                      "FunctionParameter": {
                        "argType": {
                          "location": 29,
                          "names": [
                            {
                              "String": {
                                "sval": "text",
                              },
                            },
                          ],
                          "typemod": -1,
                        },
                        "mode": "FUNC_PARAM_DEFAULT",
                      },
                    },
                  ],
                  "objname": [
                    {
                      "String": {
                        "sval": "exc_using",
                      },
                    },
                  ],
                },
              },
            ],
            "removeType": "OBJECT_FUNCTION",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2899 1`] = `
[
  "create or replace function exc_using(int) returns void as $$
declare
  c refcursor;
  i int;
begin
  open c for execute 'select * from generate_series(1,$1)' using $1+1;
  loop
    fetch c into i;
    exit when not found;
    raise notice '%', i;
  end loop;
  close c;
  return;
end;
$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "exc_using",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare
  c refcursor;
  i int;
begin
  open c for execute 'select * from generate_series(1,$1)' using $1+1;
  loop
    fetch c into i;
    exit when not found;
    raise notice '%', i;
  end loop;
  close c;
  return;
end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 55,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 288,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 37,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                },
              },
            ],
            "replace": true,
            "returnType": {
              "location": 50,
              "names": [
                {
                  "String": {
                    "sval": "void",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2917 1`] = `
[
  "drop function exc_using(int)",
  {
    "stmts": [
      {
        "stmt": {
          "DropStmt": {
            "behavior": "DROP_RESTRICT",
            "objects": [
              {
                "ObjectWithArgs": {
                  "objargs": [
                    {
                      "TypeName": {
                        "location": 24,
                        "names": [
                          {
                            "String": {
                              "sval": "pg_catalog",
                            },
                          },
                          {
                            "String": {
                              "sval": "int4",
                            },
                          },
                        ],
                        "typemod": -1,
                      },
                    },
                  ],
                  "objfuncargs": [
                    {
                      "FunctionParameter": {
                        "argType": {
                          "location": 24,
                          "names": [
                            {
                              "String": {
                                "sval": "pg_catalog",
                              },
                            },
                            {
                              "String": {
                                "sval": "int4",
                              },
                            },
                          ],
                          "typemod": -1,
                        },
                        "mode": "FUNC_PARAM_DEFAULT",
                      },
                    },
                  ],
                  "objname": [
                    {
                      "String": {
                        "sval": "exc_using",
                      },
                    },
                  ],
                },
              },
            ],
            "removeType": "OBJECT_FUNCTION",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2960 1`] = `
[
  "select forc01()",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "FuncCall": {
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "forc01",
                          },
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2965 1`] = `
[
  "  select n as i, n as j from generate_series(1,10) n",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "fromClause": [
              {
                "RangeFunction": {
                  "alias": {
                    "aliasname": "n",
                  },
                  "functions": [
                    {
                      "List": {
                        "items": [
                          {
                            "FuncCall": {
                              "args": [
                                {
                                  "A_Const": {
                                    "ival": {
                                      "ival": 1,
                                    },
                                    "location": 45,
                                  },
                                },
                                {
                                  "A_Const": {
                                    "ival": {
                                      "ival": 10,
                                    },
                                    "location": 47,
                                  },
                                },
                              ],
                              "funcformat": "COERCE_EXPLICIT_CALL",
                              "funcname": [
                                {
                                  "String": {
                                    "sval": "generate_series",
                                  },
                                },
                              ],
                              "location": 29,
                            },
                          },
                          {},
                        ],
                      },
                    },
                  ],
                },
              },
            ],
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 9,
                  "name": "i",
                  "val": {
                    "ColumnRef": {
                      "fields": [
                        {
                          "String": {
                            "sval": "n",
                          },
                        },
                      ],
                      "location": 9,
                    },
                  },
                },
              },
              {
                "ResTarget": {
                  "location": 17,
                  "name": "j",
                  "val": {
                    "ColumnRef": {
                      "fields": [
                        {
                          "String": {
                            "sval": "n",
                          },
                        },
                      ],
                      "location": 17,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2967 1`] = `
[
  "create or replace function forc01() returns void as $$
declare
  c cursor for select * from forc_test;
begin
  for r in c loop
    raise notice '%, %', r.i, r.j;
    update forc_test set i = i * 100, j = r.j * 2 where current of c;
  end loop;
end;
$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "forc01",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare
  c cursor for select * from forc_test;
begin
  for r in c loop
    raise notice '%, %', r.i, r.j;
    update forc_test set i = i * 100, j = r.j * 2 where current of c;
  end loop;
end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 49,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 252,
                },
              },
            ],
            "replace": true,
            "returnType": {
              "location": 44,
              "names": [
                {
                  "String": {
                    "sval": "void",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 2980 1`] = `
[
  "select * from forc_test",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "fromClause": [
              {
                "RangeVar": {
                  "inh": true,
                  "location": 14,
                  "relname": "forc_test",
                  "relpersistence": "p",
                },
              },
            ],
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "ColumnRef": {
                      "fields": [
                        {
                          "A_Star": {},
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3002 1`] = `
[
  "drop function forc01()",
  {
    "stmts": [
      {
        "stmt": {
          "DropStmt": {
            "behavior": "DROP_RESTRICT",
            "objects": [
              {
                "ObjectWithArgs": {
                  "objname": [
                    {
                      "String": {
                        "sval": "forc01",
                      },
                    },
                  ],
                },
              },
            ],
            "removeType": "OBJECT_FUNCTION",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3043 1`] = `
[
  "select * from return_dquery()",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "fromClause": [
              {
                "RangeFunction": {
                  "functions": [
                    {
                      "List": {
                        "items": [
                          {
                            "FuncCall": {
                              "funcformat": "COERCE_EXPLICIT_CALL",
                              "funcname": [
                                {
                                  "String": {
                                    "sval": "return_dquery",
                                  },
                                },
                              ],
                              "location": 14,
                            },
                          },
                          {},
                        ],
                      },
                    },
                  ],
                },
              },
            ],
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "ColumnRef": {
                      "fields": [
                        {
                          "A_Star": {},
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3045 1`] = `
[
  "drop function return_dquery()",
  {
    "stmts": [
      {
        "stmt": {
          "DropStmt": {
            "behavior": "DROP_RESTRICT",
            "objects": [
              {
                "ObjectWithArgs": {
                  "objname": [
                    {
                      "String": {
                        "sval": "return_dquery",
                      },
                    },
                  ],
                },
              },
            ],
            "removeType": "OBJECT_FUNCTION",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3052 1`] = `
[
  "create or replace function returnqueryf()
returns setof tabwithcols as $$
begin
  return query select * from tabwithcols;
  return query execute 'select * from tabwithcols';
end;
$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "returnqueryf",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
begin
  return query select * from tabwithcols;
  return query execute 'select * from tabwithcols';
end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 68,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 182,
                },
              },
            ],
            "replace": true,
            "returnType": {
              "location": 56,
              "names": [
                {
                  "String": {
                    "sval": "tabwithcols",
                  },
                },
              ],
              "setof": true,
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3060 1`] = `
[
  "select * from returnqueryf()",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "fromClause": [
              {
                "RangeFunction": {
                  "functions": [
                    {
                      "List": {
                        "items": [
                          {
                            "FuncCall": {
                              "funcformat": "COERCE_EXPLICIT_CALL",
                              "funcname": [
                                {
                                  "String": {
                                    "sval": "returnqueryf",
                                  },
                                },
                              ],
                              "location": 14,
                            },
                          },
                          {},
                        ],
                      },
                    },
                  ],
                },
              },
            ],
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "ColumnRef": {
                      "fields": [
                        {
                          "A_Star": {},
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3062 1`] = `
[
  "alter table tabwithcols drop column b",
  {
    "stmts": [
      {
        "stmt": {
          "AlterTableStmt": {
            "cmds": [
              {
                "AlterTableCmd": {
                  "behavior": "DROP_RESTRICT",
                  "name": "b",
                  "subtype": "AT_DropColumn",
                },
              },
            ],
            "objtype": "OBJECT_TABLE",
            "relation": {
              "inh": true,
              "location": 12,
              "relname": "tabwithcols",
              "relpersistence": "p",
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3066 1`] = `
[
  "alter table tabwithcols drop column d",
  {
    "stmts": [
      {
        "stmt": {
          "AlterTableStmt": {
            "cmds": [
              {
                "AlterTableCmd": {
                  "behavior": "DROP_RESTRICT",
                  "name": "d",
                  "subtype": "AT_DropColumn",
                },
              },
            ],
            "objtype": "OBJECT_TABLE",
            "relation": {
              "inh": true,
              "location": 12,
              "relname": "tabwithcols",
              "relpersistence": "p",
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3070 1`] = `
[
  "alter table tabwithcols add column d int",
  {
    "stmts": [
      {
        "stmt": {
          "AlterTableStmt": {
            "cmds": [
              {
                "AlterTableCmd": {
                  "behavior": "DROP_RESTRICT",
                  "def": {
                    "ColumnDef": {
                      "colname": "d",
                      "is_local": true,
                      "location": 35,
                      "typeName": {
                        "location": 37,
                        "names": [
                          {
                            "String": {
                              "sval": "pg_catalog",
                            },
                          },
                          {
                            "String": {
                              "sval": "int4",
                            },
                          },
                        ],
                        "typemod": -1,
                      },
                    },
                  },
                  "subtype": "AT_AddColumn",
                },
              },
            ],
            "objtype": "OBJECT_TABLE",
            "relation": {
              "inh": true,
              "location": 12,
              "relname": "tabwithcols",
              "relpersistence": "p",
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3074 1`] = `
[
  "drop function returnqueryf()",
  {
    "stmts": [
      {
        "stmt": {
          "DropStmt": {
            "behavior": "DROP_RESTRICT",
            "objects": [
              {
                "ObjectWithArgs": {
                  "objname": [
                    {
                      "String": {
                        "sval": "returnqueryf",
                      },
                    },
                  ],
                },
              },
            ],
            "removeType": "OBJECT_FUNCTION",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3084 1`] = `
[
  "create or replace function compos() returns compostype as $$
declare
  v compostype;
begin
  v := (1, 'hello');
  return v;
end;
$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "compos",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare
  v compostype;
begin
  v := (1, 'hello');
  return v;
end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 55,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 132,
                },
              },
            ],
            "replace": true,
            "returnType": {
              "location": 44,
              "names": [
                {
                  "String": {
                    "sval": "compostype",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3093 1`] = `
[
  "select compos()",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "FuncCall": {
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "compos",
                          },
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3134 1`] = `
[
  "drop function compos()",
  {
    "stmts": [
      {
        "stmt": {
          "DropStmt": {
            "behavior": "DROP_RESTRICT",
            "objects": [
              {
                "ObjectWithArgs": {
                  "objname": [
                    {
                      "String": {
                        "sval": "compos",
                      },
                    },
                  ],
                },
              },
            ],
            "removeType": "OBJECT_FUNCTION",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3137 1`] = `
[
  "create or replace function composrec() returns record as $$
declare
  v record;
begin
  v := (1, 'hello');
  return v;
end;
$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "composrec",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare
  v record;
begin
  v := (1, 'hello');
  return v;
end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 54,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 127,
                },
              },
            ],
            "replace": true,
            "returnType": {
              "location": 47,
              "names": [
                {
                  "String": {
                    "sval": "record",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3146 1`] = `
[
  "select composrec()",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "FuncCall": {
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "composrec",
                          },
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3157 1`] = `
[
  "drop function composrec()",
  {
    "stmts": [
      {
        "stmt": {
          "DropStmt": {
            "behavior": "DROP_RESTRICT",
            "objects": [
              {
                "ObjectWithArgs": {
                  "objname": [
                    {
                      "String": {
                        "sval": "composrec",
                      },
                    },
                  ],
                },
              },
            ],
            "removeType": "OBJECT_FUNCTION",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3160 1`] = `
[
  "create or replace function compos() returns setof compostype as $$
begin
  for i in 1..3
  loop
    return next (1, 'hello'::varchar);
  end loop;
  return next null::compostype;
  return next (2, 'goodbye')::compostype;
end;
$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "compos",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
begin
  for i in 1..3
  loop
    return next (1, 'hello'::varchar);
  end loop;
  return next null::compostype;
  return next (2, 'goodbye')::compostype;
end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 61,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 229,
                },
              },
            ],
            "replace": true,
            "returnType": {
              "location": 50,
              "names": [
                {
                  "String": {
                    "sval": "compostype",
                  },
                },
              ],
              "setof": true,
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3171 1`] = `
[
  "select * from compos()",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "fromClause": [
              {
                "RangeFunction": {
                  "functions": [
                    {
                      "List": {
                        "items": [
                          {
                            "FuncCall": {
                              "funcformat": "COERCE_EXPLICIT_CALL",
                              "funcname": [
                                {
                                  "String": {
                                    "sval": "compos",
                                  },
                                },
                              ],
                              "location": 14,
                            },
                          },
                          {},
                        ],
                      },
                    },
                  ],
                },
              },
            ],
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "ColumnRef": {
                      "fields": [
                        {
                          "A_Star": {},
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3197 1`] = `
[
  "create or replace function compos() returns int as $$
declare
  v compostype;
begin
  v := (1, 'hello');
  return v;
end;
$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "compos",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare
  v compostype;
begin
  v := (1, 'hello');
  return v;
end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 48,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 125,
                },
              },
            ],
            "replace": true,
            "returnType": {
              "location": 44,
              "names": [
                {
                  "String": {
                    "sval": "pg_catalog",
                  },
                },
                {
                  "String": {
                    "sval": "int4",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3233 1`] = `
[
  "select raise_test()",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "FuncCall": {
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "raise_test",
                          },
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3251 1`] = `
[
  "create or replace function raise_test() returns void as $$
begin
  raise 'check me'
     using errcode = '1234F', detail = 'some detail info';
  exception
    when others then
      raise notice 'SQLSTATE: % SQLERRM: %', sqlstate, sqlerrm;
      raise;
end;
$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "raise_test",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
begin
  raise 'check me'
     using errcode = '1234F', detail = 'some detail info';
  exception
    when others then
      raise notice 'SQLSTATE: % SQLERRM: %', sqlstate, sqlerrm;
      raise;
end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 53,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 261,
                },
              },
            ],
            "replace": true,
            "returnType": {
              "location": 48,
              "names": [
                {
                  "String": {
                    "sval": "void",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3350 1`] = `
[
  "create function zero_divide() returns int as $$
declare v int := 0;
begin
  return 10 / v;
end;
$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "zero_divide",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare v int := 0;
begin
  return 10 / v;
end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 42,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 99,
                },
              },
            ],
            "returnType": {
              "location": 38,
              "names": [
                {
                  "String": {
                    "sval": "pg_catalog",
                  },
                },
                {
                  "String": {
                    "sval": "int4",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3365 1`] = `
[
  "create function stacked_diagnostics_test() returns void as $$
declare _sqlstate text;
        _message text;
        _context text;
begin
  perform zero_divide();
exception when others then
  get stacked diagnostics
        _sqlstate = returned_sqlstate,
        _message = message_text,
        _context = pg_exception_context;
  raise notice 'sqlstate: %, message: %, context: [%]',
    _sqlstate, _message, replace(_context, E'\\n', ' <- ');
end;
$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "stacked_diagnostics_test",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare _sqlstate text;
        _message text;
        _context text;
begin
  perform zero_divide();
exception when others then
  get stacked diagnostics
        _sqlstate = returned_sqlstate,
        _message = message_text,
        _context = pg_exception_context;
  raise notice 'sqlstate: %, message: %, context: [%]',
    _sqlstate, _message, replace(_context, E'\\n', ' <- ');
end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 56,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 452,
                },
              },
            ],
            "returnType": {
              "location": 51,
              "names": [
                {
                  "String": {
                    "sval": "void",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3381 1`] = `
[
  "select stacked_diagnostics_test()",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "FuncCall": {
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "stacked_diagnostics_test",
                          },
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3383 1`] = `
[
  "create or replace function stacked_diagnostics_test() returns void as $$
declare _detail text;
        _hint text;
        _message text;
begin
  perform raise_test();
exception when others then
  get stacked diagnostics
        _message = message_text,
        _detail = pg_exception_detail,
        _hint = pg_exception_hint;
  raise notice 'message: %, detail: %, hint: %', _message, _detail, _hint;
end;
$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "stacked_diagnostics_test",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare _detail text;
        _hint text;
        _message text;
begin
  perform raise_test();
exception when others then
  get stacked diagnostics
        _message = message_text,
        _detail = pg_exception_detail,
        _hint = pg_exception_hint;
  raise notice 'message: %, detail: %, hint: %', _message, _detail, _hint;
end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 67,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 411,
                },
              },
            ],
            "replace": true,
            "returnType": {
              "location": 62,
              "names": [
                {
                  "String": {
                    "sval": "void",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3416 1`] = `
[
  "drop function zero_divide()",
  {
    "stmts": [
      {
        "stmt": {
          "DropStmt": {
            "behavior": "DROP_RESTRICT",
            "objects": [
              {
                "ObjectWithArgs": {
                  "objname": [
                    {
                      "String": {
                        "sval": "zero_divide",
                      },
                    },
                  ],
                },
              },
            ],
            "removeType": "OBJECT_FUNCTION",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3433 1`] = `
[
  "drop function raise_test()",
  {
    "stmts": [
      {
        "stmt": {
          "DropStmt": {
            "behavior": "DROP_RESTRICT",
            "objects": [
              {
                "ObjectWithArgs": {
                  "objname": [
                    {
                      "String": {
                        "sval": "raise_test",
                      },
                    },
                  ],
                },
              },
            ],
            "removeType": "OBJECT_FUNCTION",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3465 1`] = `
[
  "drop function stacked_diagnostics_test()",
  {
    "stmts": [
      {
        "stmt": {
          "DropStmt": {
            "behavior": "DROP_RESTRICT",
            "objects": [
              {
                "ObjectWithArgs": {
                  "objname": [
                    {
                      "String": {
                        "sval": "stacked_diagnostics_test",
                      },
                    },
                  ],
                },
              },
            ],
            "removeType": "OBJECT_FUNCTION",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3477 1`] = `
[
  "select vari(1,2,3,4,5)",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "FuncCall": {
                      "args": [
                        {
                          "A_Const": {
                            "ival": {
                              "ival": 1,
                            },
                            "location": 12,
                          },
                        },
                        {
                          "A_Const": {
                            "ival": {
                              "ival": 2,
                            },
                            "location": 14,
                          },
                        },
                        {
                          "A_Const": {
                            "ival": {
                              "ival": 3,
                            },
                            "location": 16,
                          },
                        },
                        {
                          "A_Const": {
                            "ival": {
                              "ival": 4,
                            },
                            "location": 18,
                          },
                        },
                        {
                          "A_Const": {
                            "ival": {
                              "ival": 5,
                            },
                            "location": 20,
                          },
                        },
                      ],
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "vari",
                          },
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3481 1`] = `
[
  "drop function vari(int[])",
  {
    "stmts": [
      {
        "stmt": {
          "DropStmt": {
            "behavior": "DROP_RESTRICT",
            "objects": [
              {
                "ObjectWithArgs": {
                  "objargs": [
                    {
                      "TypeName": {
                        "arrayBounds": [
                          {
                            "Integer": {},
                          },
                        ],
                        "location": 19,
                        "names": [
                          {
                            "String": {
                              "sval": "pg_catalog",
                            },
                          },
                          {
                            "String": {
                              "sval": "int4",
                            },
                          },
                        ],
                        "typemod": -1,
                      },
                    },
                  ],
                  "objfuncargs": [
                    {
                      "FunctionParameter": {
                        "argType": {
                          "arrayBounds": [
                            {
                              "Integer": {},
                            },
                          ],
                          "location": 19,
                          "names": [
                            {
                              "String": {
                                "sval": "pg_catalog",
                              },
                            },
                            {
                              "String": {
                                "sval": "int4",
                              },
                            },
                          ],
                          "typemod": -1,
                        },
                        "mode": "FUNC_PARAM_DEFAULT",
                      },
                    },
                  ],
                  "objname": [
                    {
                      "String": {
                        "sval": "vari",
                      },
                    },
                  ],
                },
              },
            ],
            "removeType": "OBJECT_FUNCTION",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3484 1`] = `
[
  "create or replace function pleast(variadic numeric[])
returns numeric as $$
declare aux numeric = $1[array_lower($1,1)];
begin
  for i in array_lower($1,1)+1..array_upper($1,1) loop
    if $1[i] < aux then aux := $1[i]; end if;
  end loop;
  return aux;
end;
$$ language plpgsql immutable strict",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "pleast",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare aux numeric = $1[array_lower($1,1)];
begin
  for i in array_lower($1,1)+1..array_upper($1,1) loop
    if $1[i] < aux then aux := $1[i]; end if;
  end loop;
  return aux;
end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 70,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 262,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "immutable",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "volatility",
                  "location": 279,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "Boolean": {
                      "boolval": true,
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "strict",
                  "location": 289,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "arrayBounds": [
                      {
                        "Integer": {},
                      },
                    ],
                    "location": 43,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "numeric",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_VARIADIC",
                },
              },
            ],
            "replace": true,
            "returnType": {
              "location": 62,
              "names": [
                {
                  "String": {
                    "sval": "pg_catalog",
                  },
                },
                {
                  "String": {
                    "sval": "numeric",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3495 1`] = `
[
  "select pleast(10,1,2,3,-16)",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "FuncCall": {
                      "args": [
                        {
                          "A_Const": {
                            "ival": {
                              "ival": 10,
                            },
                            "location": 14,
                          },
                        },
                        {
                          "A_Const": {
                            "ival": {
                              "ival": 1,
                            },
                            "location": 17,
                          },
                        },
                        {
                          "A_Const": {
                            "ival": {
                              "ival": 2,
                            },
                            "location": 19,
                          },
                        },
                        {
                          "A_Const": {
                            "ival": {
                              "ival": 3,
                            },
                            "location": 21,
                          },
                        },
                        {
                          "A_Const": {
                            "ival": {},
                            "location": 23,
                          },
                        },
                      ],
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "pleast",
                          },
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3501 1`] = `
[
  "create or replace function pleast(numeric)
returns numeric as $$
begin
  raise notice 'non-variadic function called';
  return $1;
end;
$$ language plpgsql immutable strict",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "pleast",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
begin
  raise notice 'non-variadic function called';
  return $1;
end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 59,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 139,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "immutable",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "volatility",
                  "location": 156,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "Boolean": {
                      "boolval": true,
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "strict",
                  "location": 166,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 34,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "numeric",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                },
              },
            ],
            "replace": true,
            "returnType": {
              "location": 51,
              "names": [
                {
                  "String": {
                    "sval": "pg_catalog",
                  },
                },
                {
                  "String": {
                    "sval": "numeric",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3511 1`] = `
[
  "drop function pleast(numeric[])",
  {
    "stmts": [
      {
        "stmt": {
          "DropStmt": {
            "behavior": "DROP_RESTRICT",
            "objects": [
              {
                "ObjectWithArgs": {
                  "objargs": [
                    {
                      "TypeName": {
                        "arrayBounds": [
                          {
                            "Integer": {},
                          },
                        ],
                        "location": 21,
                        "names": [
                          {
                            "String": {
                              "sval": "pg_catalog",
                            },
                          },
                          {
                            "String": {
                              "sval": "numeric",
                            },
                          },
                        ],
                        "typemod": -1,
                      },
                    },
                  ],
                  "objfuncargs": [
                    {
                      "FunctionParameter": {
                        "argType": {
                          "arrayBounds": [
                            {
                              "Integer": {},
                            },
                          ],
                          "location": 21,
                          "names": [
                            {
                              "String": {
                                "sval": "pg_catalog",
                              },
                            },
                            {
                              "String": {
                                "sval": "numeric",
                              },
                            },
                          ],
                          "typemod": -1,
                        },
                        "mode": "FUNC_PARAM_DEFAULT",
                      },
                    },
                  ],
                  "objname": [
                    {
                      "String": {
                        "sval": "pleast",
                      },
                    },
                  ],
                },
              },
            ],
            "removeType": "OBJECT_FUNCTION",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3522 1`] = `
[
  "select * from tftest(10)",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "fromClause": [
              {
                "RangeFunction": {
                  "functions": [
                    {
                      "List": {
                        "items": [
                          {
                            "FuncCall": {
                              "args": [
                                {
                                  "A_Const": {
                                    "ival": {
                                      "ival": 10,
                                    },
                                    "location": 21,
                                  },
                                },
                              ],
                              "funcformat": "COERCE_EXPLICIT_CALL",
                              "funcname": [
                                {
                                  "String": {
                                    "sval": "tftest",
                                  },
                                },
                              ],
                              "location": 14,
                            },
                          },
                          {},
                        ],
                      },
                    },
                  ],
                },
              },
            ],
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "ColumnRef": {
                      "fields": [
                        {
                          "A_Star": {},
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3524 1`] = `
[
  "create or replace function tftest(a1 int) returns table(a int, b int) as $$
begin
  a := a1; b := a1 + 1;
  return next;
  a := a1 * 10; b := a1 * 10 + 1;
  return next;
end;
$$ language plpgsql immutable strict",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "tftest",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
begin
  a := a1; b := a1 + 1;
  return next;
  a := a1 * 10; b := a1 * 10 + 1;
  return next;
end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 70,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 178,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "immutable",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "volatility",
                  "location": 195,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "Boolean": {
                      "boolval": true,
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "strict",
                  "location": 205,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 37,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                  "name": "a1",
                },
              },
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 58,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_TABLE",
                  "name": "a",
                },
              },
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 65,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_TABLE",
                  "name": "b",
                },
              },
            ],
            "replace": true,
            "returnType": {
              "location": 50,
              "names": [
                {
                  "String": {
                    "sval": "pg_catalog",
                  },
                },
                {
                  "String": {
                    "sval": "record",
                  },
                },
              ],
              "setof": true,
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3535 1`] = `
[
  "drop function tftest(int)",
  {
    "stmts": [
      {
        "stmt": {
          "DropStmt": {
            "behavior": "DROP_RESTRICT",
            "objects": [
              {
                "ObjectWithArgs": {
                  "objargs": [
                    {
                      "TypeName": {
                        "location": 21,
                        "names": [
                          {
                            "String": {
                              "sval": "pg_catalog",
                            },
                          },
                          {
                            "String": {
                              "sval": "int4",
                            },
                          },
                        ],
                        "typemod": -1,
                      },
                    },
                  ],
                  "objfuncargs": [
                    {
                      "FunctionParameter": {
                        "argType": {
                          "location": 21,
                          "names": [
                            {
                              "String": {
                                "sval": "pg_catalog",
                              },
                            },
                            {
                              "String": {
                                "sval": "int4",
                              },
                            },
                          ],
                          "typemod": -1,
                        },
                        "mode": "FUNC_PARAM_DEFAULT",
                      },
                    },
                  ],
                  "objname": [
                    {
                      "String": {
                        "sval": "tftest",
                      },
                    },
                  ],
                },
              },
            ],
            "removeType": "OBJECT_FUNCTION",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3537 1`] = `
[
  "create function rttest()
returns setof int as $$
declare rc int;
begin
  return query values(10),(20);
  get diagnostics rc = row_count;
  raise notice '% %', found, rc;
  return query select * from (values(10),(20)) f(a) where false;
  get diagnostics rc = row_count;
  raise notice '% %', found, rc;
  return query execute 'values(10),(20)';
  get diagnostics rc = row_count;
  raise notice '% %', found, rc;
  return query execute 'select * from (values(10),(20)) f(a) where false';
  get diagnostics rc = row_count;
  raise notice '% %', found, rc;
end;
$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "rttest",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare rc int;
begin
  return query values(10),(20);
  get diagnostics rc = row_count;
  raise notice '% %', found, rc;
  return query select * from (values(10),(20)) f(a) where false;
  get diagnostics rc = row_count;
  raise notice '% %', found, rc;
  return query execute 'values(10),(20)';
  get diagnostics rc = row_count;
  raise notice '% %', found, rc;
  return query execute 'select * from (values(10),(20)) f(a) where false';
  get diagnostics rc = row_count;
  raise notice '% %', found, rc;
end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 43,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 561,
                },
              },
            ],
            "returnType": {
              "location": 39,
              "names": [
                {
                  "String": {
                    "sval": "pg_catalog",
                  },
                },
                {
                  "String": {
                    "sval": "int4",
                  },
                },
              ],
              "setof": true,
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3556 1`] = `
[
  "select * from rttest()",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "fromClause": [
              {
                "RangeFunction": {
                  "functions": [
                    {
                      "List": {
                        "items": [
                          {
                            "FuncCall": {
                              "funcformat": "COERCE_EXPLICIT_CALL",
                              "funcname": [
                                {
                                  "String": {
                                    "sval": "rttest",
                                  },
                                },
                              ],
                              "location": 14,
                            },
                          },
                          {},
                        ],
                      },
                    },
                  ],
                },
              },
            ],
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "ColumnRef": {
                      "fields": [
                        {
                          "A_Star": {},
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3569 1`] = `
[
  "create or replace function rttest()
returns setof int as $$
begin
  return query execute 'select 10 into no_such_table';
end;
$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "rttest",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
begin
  return query execute 'select 10 into no_such_table';
end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 54,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 129,
                },
              },
            ],
            "replace": true,
            "returnType": {
              "location": 50,
              "names": [
                {
                  "String": {
                    "sval": "pg_catalog",
                  },
                },
                {
                  "String": {
                    "sval": "int4",
                  },
                },
              ],
              "setof": true,
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3578 1`] = `
[
  "select * from no_such_table",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "fromClause": [
              {
                "RangeVar": {
                  "inh": true,
                  "location": 14,
                  "relname": "no_such_table",
                  "relpersistence": "p",
                },
              },
            ],
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "ColumnRef": {
                      "fields": [
                        {
                          "A_Star": {},
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3580 1`] = `
[
  "drop function rttest()",
  {
    "stmts": [
      {
        "stmt": {
          "DropStmt": {
            "behavior": "DROP_RESTRICT",
            "objects": [
              {
                "ObjectWithArgs": {
                  "objname": [
                    {
                      "String": {
                        "sval": "rttest",
                      },
                    },
                  ],
                },
              },
            ],
            "removeType": "OBJECT_FUNCTION",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3598 1`] = `
[
  "CREATE FUNCTION leaker_2(fail BOOL, OUT error_code INTEGER, OUT new_id INTEGER)
  RETURNS RECORD AS $$
BEGIN
  IF fail THEN
    RAISE EXCEPTION 'fail ...';
  END IF;
  error_code := 1;
  new_id := 1;
  RETURN;
END;
$$ LANGUAGE plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "leaker_2",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
BEGIN
  IF fail THEN
    RAISE EXCEPTION 'fail ...';
  END IF;
  error_code := 1;
  new_id := 1;
  RETURN;
END;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 97,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 218,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 30,
                    "names": [
                      {
                        "String": {
                          "sval": "bool",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                  "name": "fail",
                },
              },
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 51,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_OUT",
                  "name": "error_code",
                },
              },
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 71,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_OUT",
                  "name": "new_id",
                },
              },
            ],
            "returnType": {
              "location": 90,
              "names": [
                {
                  "String": {
                    "sval": "record",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3610 1`] = `
[
  "SELECT * FROM leaker_1(false)",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "fromClause": [
              {
                "RangeFunction": {
                  "functions": [
                    {
                      "List": {
                        "items": [
                          {
                            "FuncCall": {
                              "args": [
                                {
                                  "A_Const": {
                                    "boolval": {},
                                    "location": 23,
                                  },
                                },
                              ],
                              "funcformat": "COERCE_EXPLICIT_CALL",
                              "funcname": [
                                {
                                  "String": {
                                    "sval": "leaker_1",
                                  },
                                },
                              ],
                              "location": 14,
                            },
                          },
                          {},
                        ],
                      },
                    },
                  ],
                },
              },
            ],
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "ColumnRef": {
                      "fields": [
                        {
                          "A_Star": {},
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3613 1`] = `
[
  "DROP FUNCTION leaker_1(bool)",
  {
    "stmts": [
      {
        "stmt": {
          "DropStmt": {
            "behavior": "DROP_RESTRICT",
            "objects": [
              {
                "ObjectWithArgs": {
                  "objargs": [
                    {
                      "TypeName": {
                        "location": 23,
                        "names": [
                          {
                            "String": {
                              "sval": "bool",
                            },
                          },
                        ],
                        "typemod": -1,
                      },
                    },
                  ],
                  "objfuncargs": [
                    {
                      "FunctionParameter": {
                        "argType": {
                          "location": 23,
                          "names": [
                            {
                              "String": {
                                "sval": "bool",
                              },
                            },
                          ],
                          "typemod": -1,
                        },
                        "mode": "FUNC_PARAM_DEFAULT",
                      },
                    },
                  ],
                  "objname": [
                    {
                      "String": {
                        "sval": "leaker_1",
                      },
                    },
                  ],
                },
              },
            ],
            "removeType": "OBJECT_FUNCTION",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3634 1`] = `
[
  "SELECT nonsimple_expr_test()",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "FuncCall": {
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "nonsimple_expr_test",
                          },
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3636 1`] = `
[
  "DROP FUNCTION nonsimple_expr_test()",
  {
    "stmts": [
      {
        "stmt": {
          "DropStmt": {
            "behavior": "DROP_RESTRICT",
            "objects": [
              {
                "ObjectWithArgs": {
                  "objname": [
                    {
                      "String": {
                        "sval": "nonsimple_expr_test",
                      },
                    },
                  ],
                },
              },
            ],
            "removeType": "OBJECT_FUNCTION",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3638 1`] = `
[
  "CREATE FUNCTION nonsimple_expr_test() RETURNS integer AS $$
declare
   i integer NOT NULL := 0;
begin
  begin
    i := (SELECT NULL::integer);  -- should throw error
  exception
    WHEN OTHERS THEN
      i := (SELECT 1::integer);
  end;
  return i;
end;
$$ LANGUAGE plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "nonsimple_expr_test",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare
   i integer NOT NULL := 0;
begin
  begin
    i := (SELECT NULL::integer);  -- should throw error
  exception
    WHEN OTHERS THEN
      i := (SELECT 1::integer);
  end;
  return i;
end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 54,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 258,
                },
              },
            ],
            "returnType": {
              "location": 46,
              "names": [
                {
                  "String": {
                    "sval": "pg_catalog",
                  },
                },
                {
                  "String": {
                    "sval": "int4",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3674 1`] = `
[
  "create function sql_recurse(float8) returns float8 as
$$ select recurse($1) limit 1; $$ language sql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "sql_recurse",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": " select recurse($1) limit 1; ",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 51,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "sql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 88,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 28,
                    "names": [
                      {
                        "String": {
                          "sval": "float8",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                },
              },
            ],
            "returnType": {
              "location": 44,
              "names": [
                {
                  "String": {
                    "sval": "float8",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3677 1`] = `
[
  "select recurse(10)",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "FuncCall": {
                      "args": [
                        {
                          "A_Const": {
                            "ival": {
                              "ival": 10,
                            },
                            "location": 15,
                          },
                        },
                      ],
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "recurse",
                          },
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3679 1`] = `
[
  "create function error1(text) returns text language sql as
$$ SELECT relname::text FROM pg_class c WHERE c.oid = $1::regclass $$",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "error1",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "sql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 42,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": " SELECT relname::text FROM pg_class c WHERE c.oid = $1::regclass ",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 55,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 23,
                    "names": [
                      {
                        "String": {
                          "sval": "text",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                },
              },
            ],
            "returnType": {
              "location": 37,
              "names": [
                {
                  "String": {
                    "sval": "text",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3682 1`] = `
[
  "create function error2(p_name_table text) returns text language plpgsql as $$
begin
  return error1(p_name_table);
end$$",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "error2",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 55,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
begin
  return error1(p_name_table);
end",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 72,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 36,
                    "names": [
                      {
                        "String": {
                          "sval": "text",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                  "name": "p_name_table",
                },
              },
            ],
            "returnType": {
              "location": 50,
              "names": [
                {
                  "String": {
                    "sval": "text",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3695 1`] = `
[
  "drop function error2(p_name_table text)",
  {
    "stmts": [
      {
        "stmt": {
          "DropStmt": {
            "behavior": "DROP_RESTRICT",
            "objects": [
              {
                "ObjectWithArgs": {
                  "objargs": [
                    {
                      "TypeName": {
                        "location": 34,
                        "names": [
                          {
                            "String": {
                              "sval": "text",
                            },
                          },
                        ],
                        "typemod": -1,
                      },
                    },
                  ],
                  "objfuncargs": [
                    {
                      "FunctionParameter": {
                        "argType": {
                          "location": 34,
                          "names": [
                            {
                              "String": {
                                "sval": "text",
                              },
                            },
                          ],
                          "typemod": -1,
                        },
                        "mode": "FUNC_PARAM_DEFAULT",
                        "name": "p_name_table",
                      },
                    },
                  ],
                  "objname": [
                    {
                      "String": {
                        "sval": "error2",
                      },
                    },
                  ],
                },
              },
            ],
            "removeType": "OBJECT_FUNCTION",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3704 1`] = `
[
  "create cast (integer as date) with function sql_to_date(integer) as assignment",
  {
    "stmts": [
      {
        "stmt": {
          "CreateCastStmt": {
            "context": "COERCION_ASSIGNMENT",
            "func": {
              "objargs": [
                {
                  "TypeName": {
                    "location": 56,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                },
              ],
              "objfuncargs": [
                {
                  "FunctionParameter": {
                    "argType": {
                      "location": 56,
                      "names": [
                        {
                          "String": {
                            "sval": "pg_catalog",
                          },
                        },
                        {
                          "String": {
                            "sval": "int4",
                          },
                        },
                      ],
                      "typemod": -1,
                    },
                    "mode": "FUNC_PARAM_DEFAULT",
                  },
                },
              ],
              "objname": [
                {
                  "String": {
                    "sval": "sql_to_date",
                  },
                },
              ],
            },
            "sourcetype": {
              "location": 13,
              "names": [
                {
                  "String": {
                    "sval": "pg_catalog",
                  },
                },
                {
                  "String": {
                    "sval": "int4",
                  },
                },
              ],
              "typemod": -1,
            },
            "targettype": {
              "location": 24,
              "names": [
                {
                  "String": {
                    "sval": "date",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3706 1`] = `
[
  "create function cast_invoker(integer) returns date as $$
begin
  return $1;
end$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "cast_invoker",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
begin
  return $1;
end",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 51,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 82,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 29,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                },
              },
            ],
            "returnType": {
              "location": 46,
              "names": [
                {
                  "String": {
                    "sval": "date",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3711 1`] = `
[
  "select cast_invoker(20150717)",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "FuncCall": {
                      "args": [
                        {
                          "A_Const": {
                            "ival": {
                              "ival": 20150717,
                            },
                            "location": 20,
                          },
                        },
                      ],
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "cast_invoker",
                          },
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3719 1`] = `
[
  " -- fails
rollback to savepoint s1",
  {
    "stmts": [
      {
        "stmt": {
          "TransactionStmt": {
            "kind": "TRANS_STMT_ROLLBACK_TO",
            "savepoint_name": "s1",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3725 1`] = `
[
  "drop function cast_invoker(integer)",
  {
    "stmts": [
      {
        "stmt": {
          "DropStmt": {
            "behavior": "DROP_RESTRICT",
            "objects": [
              {
                "ObjectWithArgs": {
                  "objargs": [
                    {
                      "TypeName": {
                        "location": 27,
                        "names": [
                          {
                            "String": {
                              "sval": "pg_catalog",
                            },
                          },
                          {
                            "String": {
                              "sval": "int4",
                            },
                          },
                        ],
                        "typemod": -1,
                      },
                    },
                  ],
                  "objfuncargs": [
                    {
                      "FunctionParameter": {
                        "argType": {
                          "location": 27,
                          "names": [
                            {
                              "String": {
                                "sval": "pg_catalog",
                              },
                            },
                            {
                              "String": {
                                "sval": "int4",
                              },
                            },
                          ],
                          "typemod": -1,
                        },
                        "mode": "FUNC_PARAM_DEFAULT",
                      },
                    },
                  ],
                  "objname": [
                    {
                      "String": {
                        "sval": "cast_invoker",
                      },
                    },
                  ],
                },
              },
            ],
            "removeType": "OBJECT_FUNCTION",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3745 1`] = `
[
  "select fail()",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "FuncCall": {
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "fail",
                          },
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3748 1`] = `
[
  "drop function fail()",
  {
    "stmts": [
      {
        "stmt": {
          "DropStmt": {
            "behavior": "DROP_RESTRICT",
            "objects": [
              {
                "ObjectWithArgs": {
                  "objname": [
                    {
                      "String": {
                        "sval": "fail",
                      },
                    },
                  ],
                },
              },
            ],
            "removeType": "OBJECT_FUNCTION",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3754 1`] = `
[
  "create or replace function strtest() returns text as $$
begin
  raise notice 'foo\\\\bar\\041baz';
  return 'foo\\\\bar\\041baz';
end
$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "strtest",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
begin
  raise notice 'foo\\\\bar\\041baz';
  return 'foo\\\\bar\\041baz';
end
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 50,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 131,
                },
              },
            ],
            "replace": true,
            "returnType": {
              "location": 45,
              "names": [
                {
                  "String": {
                    "sval": "text",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3761 1`] = `
[
  "select strtest()",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "FuncCall": {
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "strtest",
                          },
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3772 1`] = `
[
  "set standard_conforming_strings = on",
  {
    "stmts": [
      {
        "stmt": {
          "VariableSetStmt": {
            "args": [
              {
                "A_Const": {
                  "location": 34,
                  "sval": {
                    "sval": "on",
                  },
                },
              },
            ],
            "kind": "VAR_SET_VALUE",
            "name": "standard_conforming_strings",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3792 1`] = `
[
  "drop function strtest()",
  {
    "stmts": [
      {
        "stmt": {
          "DropStmt": {
            "behavior": "DROP_RESTRICT",
            "objects": [
              {
                "ObjectWithArgs": {
                  "objname": [
                    {
                      "String": {
                        "sval": "strtest",
                      },
                    },
                  ],
                },
              },
            ],
            "removeType": "OBJECT_FUNCTION",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3879 1`] = `
[
  "create function conflict_test() returns setof int8_tbl as $$
declare r record;
  q1 bigint := 42;
begin
  for r in select q1,q2 from int8_tbl loop
    return next r;
  end loop;
end;
$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "conflict_test",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare r record;
  q1 bigint := 42;
begin
  for r in select q1,q2 from int8_tbl loop
    return next r;
  end loop;
end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 55,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 186,
                },
              },
            ],
            "returnType": {
              "location": 46,
              "names": [
                {
                  "String": {
                    "sval": "int8_tbl",
                  },
                },
              ],
              "setof": true,
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3889 1`] = `
[
  "select * from conflict_test()",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "fromClause": [
              {
                "RangeFunction": {
                  "functions": [
                    {
                      "List": {
                        "items": [
                          {
                            "FuncCall": {
                              "funcformat": "COERCE_EXPLICIT_CALL",
                              "funcname": [
                                {
                                  "String": {
                                    "sval": "conflict_test",
                                  },
                                },
                              ],
                              "location": 14,
                            },
                          },
                          {},
                        ],
                      },
                    },
                  ],
                },
              },
            ],
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "ColumnRef": {
                      "fields": [
                        {
                          "A_Star": {},
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3891 1`] = `
[
  "create or replace function conflict_test() returns setof int8_tbl as $$
#variable_conflict use_variable
declare r record;
  q1 bigint := 42;
begin
  for r in select q1,q2 from int8_tbl loop
    return next r;
  end loop;
end;
$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "conflict_test",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
#variable_conflict use_variable
declare r record;
  q1 bigint := 42;
begin
  for r in select q1,q2 from int8_tbl loop
    return next r;
  end loop;
end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 66,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 229,
                },
              },
            ],
            "replace": true,
            "returnType": {
              "location": 57,
              "names": [
                {
                  "String": {
                    "sval": "int8_tbl",
                  },
                },
              ],
              "setof": true,
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3917 1`] = `
[
  "drop function conflict_test()",
  {
    "stmts": [
      {
        "stmt": {
          "DropStmt": {
            "behavior": "DROP_RESTRICT",
            "objects": [
              {
                "ObjectWithArgs": {
                  "objname": [
                    {
                      "String": {
                        "sval": "conflict_test",
                      },
                    },
                  ],
                },
              },
            ],
            "removeType": "OBJECT_FUNCTION",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3930 1`] = `
[
  "select unreserved_test()",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "FuncCall": {
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "unreserved_test",
                          },
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3932 1`] = `
[
  "create or replace function unreserved_test() returns int as $$
declare
  return int := 42;
begin
  return := return + 1;
  return return;
end
$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "unreserved_test",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare
  return int := 42;
begin
  return := return + 1;
  return return;
end
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 57,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 145,
                },
              },
            ],
            "replace": true,
            "returnType": {
              "location": 53,
              "names": [
                {
                  "String": {
                    "sval": "pg_catalog",
                  },
                },
                {
                  "String": {
                    "sval": "int4",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3955 1`] = `
[
  "select obj_description('unreserved_test()'::regprocedure, 'pg_proc')",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "FuncCall": {
                      "args": [
                        {
                          "TypeCast": {
                            "arg": {
                              "A_Const": {
                                "location": 23,
                                "sval": {
                                  "sval": "unreserved_test()",
                                },
                              },
                            },
                            "location": 42,
                            "typeName": {
                              "location": 44,
                              "names": [
                                {
                                  "String": {
                                    "sval": "regprocedure",
                                  },
                                },
                              ],
                              "typemod": -1,
                            },
                          },
                        },
                        {
                          "A_Const": {
                            "location": 58,
                            "sval": {
                              "sval": "pg_proc",
                            },
                          },
                        },
                      ],
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "obj_description",
                          },
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3957 1`] = `
[
  "drop function unreserved_test()",
  {
    "stmts": [
      {
        "stmt": {
          "DropStmt": {
            "behavior": "DROP_RESTRICT",
            "objects": [
              {
                "ObjectWithArgs": {
                  "objname": [
                    {
                      "String": {
                        "sval": "unreserved_test",
                      },
                    },
                  ],
                },
              },
            ],
            "removeType": "OBJECT_FUNCTION",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3974 1`] = `
[
  "select foreach_test(ARRAY[1,2,3,4])",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "FuncCall": {
                      "args": [
                        {
                          "A_ArrayExpr": {
                            "elements": [
                              {
                                "A_Const": {
                                  "ival": {
                                    "ival": 1,
                                  },
                                  "location": 26,
                                },
                              },
                              {
                                "A_Const": {
                                  "ival": {
                                    "ival": 2,
                                  },
                                  "location": 28,
                                },
                              },
                              {
                                "A_Const": {
                                  "ival": {
                                    "ival": 3,
                                  },
                                  "location": 30,
                                },
                              },
                              {
                                "A_Const": {
                                  "ival": {
                                    "ival": 4,
                                  },
                                  "location": 32,
                                },
                              },
                            ],
                            "location": 20,
                          },
                        },
                      ],
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "foreach_test",
                          },
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 3977 1`] = `
[
  "create or replace function foreach_test(anyarray)
returns void as $$
declare x int;
begin
  foreach x slice 1 in array $1
  loop
    raise notice '%', x;
  end loop;
  end;
$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "foreach_test",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare x int;
begin
  foreach x slice 1 in array $1
  loop
    raise notice '%', x;
  end loop;
  end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 63,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 176,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 40,
                    "names": [
                      {
                        "String": {
                          "sval": "anyarray",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                },
              },
            ],
            "replace": true,
            "returnType": {
              "location": 58,
              "names": [
                {
                  "String": {
                    "sval": "void",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4021 1`] = `
[
  "select foreach_test(ARRAY[[1,2],[3,4]])",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "FuncCall": {
                      "args": [
                        {
                          "A_ArrayExpr": {
                            "elements": [
                              {
                                "A_ArrayExpr": {
                                  "elements": [
                                    {
                                      "A_Const": {
                                        "ival": {
                                          "ival": 1,
                                        },
                                        "location": 27,
                                      },
                                    },
                                    {
                                      "A_Const": {
                                        "ival": {
                                          "ival": 2,
                                        },
                                        "location": 29,
                                      },
                                    },
                                  ],
                                  "location": 26,
                                },
                              },
                              {
                                "A_ArrayExpr": {
                                  "elements": [
                                    {
                                      "A_Const": {
                                        "ival": {
                                          "ival": 3,
                                        },
                                        "location": 33,
                                      },
                                    },
                                    {
                                      "A_Const": {
                                        "ival": {
                                          "ival": 4,
                                        },
                                        "location": 35,
                                      },
                                    },
                                  ],
                                  "location": 32,
                                },
                              },
                            ],
                            "location": 20,
                          },
                        },
                      ],
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "foreach_test",
                          },
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4024 1`] = `
[
  "create type xy_tuple AS (x int, y int)",
  {
    "stmts": [
      {
        "stmt": {
          "CompositeTypeStmt": {
            "coldeflist": [
              {
                "ColumnDef": {
                  "colname": "x",
                  "is_local": true,
                  "location": 25,
                  "typeName": {
                    "location": 27,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                },
              },
              {
                "ColumnDef": {
                  "colname": "y",
                  "is_local": true,
                  "location": 32,
                  "typeName": {
                    "location": 34,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                },
              },
            ],
            "typevar": {
              "location": 12,
              "relname": "xy_tuple",
              "relpersistence": "p",
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4038 1`] = `
[
  "select foreach_test(ARRAY[(10,20),(40,69),(35,78)]::xy_tuple[])",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "FuncCall": {
                      "args": [
                        {
                          "TypeCast": {
                            "arg": {
                              "A_ArrayExpr": {
                                "elements": [
                                  {
                                    "RowExpr": {
                                      "args": [
                                        {
                                          "A_Const": {
                                            "ival": {
                                              "ival": 10,
                                            },
                                            "location": 27,
                                          },
                                        },
                                        {
                                          "A_Const": {
                                            "ival": {
                                              "ival": 20,
                                            },
                                            "location": 30,
                                          },
                                        },
                                      ],
                                      "location": 26,
                                      "row_format": "COERCE_IMPLICIT_CAST",
                                    },
                                  },
                                  {
                                    "RowExpr": {
                                      "args": [
                                        {
                                          "A_Const": {
                                            "ival": {
                                              "ival": 40,
                                            },
                                            "location": 35,
                                          },
                                        },
                                        {
                                          "A_Const": {
                                            "ival": {
                                              "ival": 69,
                                            },
                                            "location": 38,
                                          },
                                        },
                                      ],
                                      "location": 34,
                                      "row_format": "COERCE_IMPLICIT_CAST",
                                    },
                                  },
                                  {
                                    "RowExpr": {
                                      "args": [
                                        {
                                          "A_Const": {
                                            "ival": {
                                              "ival": 35,
                                            },
                                            "location": 43,
                                          },
                                        },
                                        {
                                          "A_Const": {
                                            "ival": {
                                              "ival": 78,
                                            },
                                            "location": 46,
                                          },
                                        },
                                      ],
                                      "location": 42,
                                      "row_format": "COERCE_IMPLICIT_CAST",
                                    },
                                  },
                                ],
                                "location": 20,
                              },
                            },
                            "location": 50,
                            "typeName": {
                              "arrayBounds": [
                                {
                                  "Integer": {},
                                },
                              ],
                              "location": 52,
                              "names": [
                                {
                                  "String": {
                                    "sval": "xy_tuple",
                                  },
                                },
                              ],
                              "typemod": -1,
                            },
                          },
                        },
                      ],
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "foreach_test",
                          },
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4070 1`] = `
[
  "drop function foreach_test(anyarray)",
  {
    "stmts": [
      {
        "stmt": {
          "DropStmt": {
            "behavior": "DROP_RESTRICT",
            "objects": [
              {
                "ObjectWithArgs": {
                  "objargs": [
                    {
                      "TypeName": {
                        "location": 27,
                        "names": [
                          {
                            "String": {
                              "sval": "anyarray",
                            },
                          },
                        ],
                        "typemod": -1,
                      },
                    },
                  ],
                  "objfuncargs": [
                    {
                      "FunctionParameter": {
                        "argType": {
                          "location": 27,
                          "names": [
                            {
                              "String": {
                                "sval": "anyarray",
                              },
                            },
                          ],
                          "typemod": -1,
                        },
                        "mode": "FUNC_PARAM_DEFAULT",
                      },
                    },
                  ],
                  "objname": [
                    {
                      "String": {
                        "sval": "foreach_test",
                      },
                    },
                  ],
                },
              },
            ],
            "removeType": "OBJECT_FUNCTION",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4079 1`] = `
[
  "create function arrayassign1() returns text[] language plpgsql as $$
declare
 r record;
begin
  r := row(12, '{foo,bar,baz}')::rtype;
  r.ar[2] := 'replace';
  return r.ar;
end$$",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "arrayassign1",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 46,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare
 r record;
begin
  r := row(12, '{foo,bar,baz}')::rtype;
  r.ar[2] := 'replace';
  return r.ar;
end",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 63,
                },
              },
            ],
            "returnType": {
              "arrayBounds": [
                {
                  "Integer": {},
                },
              ],
              "location": 39,
              "names": [
                {
                  "String": {
                    "sval": "text",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4088 1`] = `
[
  "select arrayassign1()",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "FuncCall": {
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "arrayassign1",
                          },
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4089 1`] = `
[
  " -- try again to exercise internal caching

create domain orderedarray as int[2]
  constraint sorted check (value[1] < value[2])",
  {
    "stmts": [
      {
        "stmt": {
          "CreateDomainStmt": {
            "constraints": [
              {
                "Constraint": {
                  "conname": "sorted",
                  "contype": "CONSTR_CHECK",
                  "initially_valid": true,
                  "location": 83,
                  "raw_expr": {
                    "A_Expr": {
                      "kind": "AEXPR_OP",
                      "lexpr": {
                        "A_Indirection": {
                          "arg": {
                            "ColumnRef": {
                              "fields": [
                                {
                                  "String": {
                                    "sval": "value",
                                  },
                                },
                              ],
                              "location": 108,
                            },
                          },
                          "indirection": [
                            {
                              "A_Indices": {
                                "uidx": {
                                  "A_Const": {
                                    "ival": {
                                      "ival": 1,
                                    },
                                    "location": 114,
                                  },
                                },
                              },
                            },
                          ],
                        },
                      },
                      "location": 117,
                      "name": [
                        {
                          "String": {
                            "sval": "<",
                          },
                        },
                      ],
                      "rexpr": {
                        "A_Indirection": {
                          "arg": {
                            "ColumnRef": {
                              "fields": [
                                {
                                  "String": {
                                    "sval": "value",
                                  },
                                },
                              ],
                              "location": 119,
                            },
                          },
                          "indirection": [
                            {
                              "A_Indices": {
                                "uidx": {
                                  "A_Const": {
                                    "ival": {
                                      "ival": 2,
                                    },
                                    "location": 125,
                                  },
                                },
                              },
                            },
                          ],
                        },
                      },
                    },
                  },
                },
              },
            ],
            "domainname": [
              {
                "String": {
                  "sval": "orderedarray",
                },
              },
            ],
            "typeName": {
              "arrayBounds": [
                {
                  "Integer": {
                    "ival": 2,
                  },
                },
              ],
              "location": 74,
              "names": [
                {
                  "String": {
                    "sval": "pg_catalog",
                  },
                },
                {
                  "String": {
                    "sval": "int4",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4094 1`] = `
[
  "select '{1,2}'::orderedarray",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "TypeCast": {
                      "arg": {
                        "A_Const": {
                          "location": 7,
                          "sval": {
                            "sval": "{1,2}",
                          },
                        },
                      },
                      "location": 14,
                      "typeName": {
                        "location": 16,
                        "names": [
                          {
                            "String": {
                              "sval": "orderedarray",
                            },
                          },
                        ],
                        "typemod": -1,
                      },
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4095 1`] = `
[
  "  -- fail

create function testoa(x1 int, x2 int, x3 int) returns orderedarray
language plpgsql as $$
declare res orderedarray;
begin
  res := array[x1, x2];
  res[2] := x3;
  return res;
end$$",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "testoa",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 79,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare res orderedarray;
begin
  res := array[x1, x2];
  res[2] := x3;
  return res;
end",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 96,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 37,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                  "name": "x1",
                },
              },
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 45,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                  "name": "x2",
                },
              },
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 53,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                  "name": "x3",
                },
              },
            ],
            "returnType": {
              "location": 66,
              "names": [
                {
                  "String": {
                    "sval": "orderedarray",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4106 1`] = `
[
  "select testoa(1,2,3)",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "FuncCall": {
                      "args": [
                        {
                          "A_Const": {
                            "ival": {
                              "ival": 1,
                            },
                            "location": 14,
                          },
                        },
                        {
                          "A_Const": {
                            "ival": {
                              "ival": 2,
                            },
                            "location": 16,
                          },
                        },
                        {
                          "A_Const": {
                            "ival": {
                              "ival": 3,
                            },
                            "location": 18,
                          },
                        },
                      ],
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "testoa",
                          },
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4109 1`] = `
[
  " -- fail at update

drop function arrayassign1()",
  {
    "stmts": [
      {
        "stmt": {
          "DropStmt": {
            "behavior": "DROP_RESTRICT",
            "objects": [
              {
                "ObjectWithArgs": {
                  "objname": [
                    {
                      "String": {
                        "sval": "arrayassign1",
                      },
                    },
                  ],
                },
              },
            ],
            "removeType": "OBJECT_FUNCTION",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4125 1`] = `
[
  "create function consumes_rw_array(int[]) returns int
language plpgsql as $$
  begin return $1[1]; end;
$$ stable",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "consumes_rw_array",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 53,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
  begin return $1[1]; end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 70,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "stable",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "volatility",
                  "location": 106,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "arrayBounds": [
                      {
                        "Integer": {},
                      },
                    ],
                    "location": 34,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                },
              },
            ],
            "returnType": {
              "location": 49,
              "names": [
                {
                  "String": {
                    "sval": "pg_catalog",
                  },
                },
                {
                  "String": {
                    "sval": "int4",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4130 1`] = `
[
  "select consumes_rw_array(returns_rw_array(42))",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "FuncCall": {
                      "args": [
                        {
                          "FuncCall": {
                            "args": [
                              {
                                "A_Const": {
                                  "ival": {
                                    "ival": 42,
                                  },
                                  "location": 42,
                                },
                              },
                            ],
                            "funcformat": "COERCE_EXPLICIT_CALL",
                            "funcname": [
                              {
                                "String": {
                                  "sval": "returns_rw_array",
                                },
                              },
                            ],
                            "location": 25,
                          },
                        },
                      ],
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "consumes_rw_array",
                          },
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4133 1`] = `
[
  "explain (verbose, costs off)
select i, a from
  (select returns_rw_array(1) as a offset 0) ss,
  lateral consumes_rw_array(a) i",
  {
    "stmts": [
      {
        "stmt": {
          "ExplainStmt": {
            "options": [
              {
                "DefElem": {
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "verbose",
                  "location": 9,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "off",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "costs",
                  "location": 18,
                },
              },
            ],
            "query": {
              "SelectStmt": {
                "fromClause": [
                  {
                    "RangeSubselect": {
                      "alias": {
                        "aliasname": "ss",
                      },
                      "subquery": {
                        "SelectStmt": {
                          "limitOffset": {
                            "A_Const": {
                              "ival": {},
                              "location": 88,
                            },
                          },
                          "limitOption": "LIMIT_OPTION_COUNT",
                          "op": "SETOP_NONE",
                          "targetList": [
                            {
                              "ResTarget": {
                                "location": 56,
                                "name": "a",
                                "val": {
                                  "FuncCall": {
                                    "args": [
                                      {
                                        "A_Const": {
                                          "ival": {
                                            "ival": 1,
                                          },
                                          "location": 73,
                                        },
                                      },
                                    ],
                                    "funcformat": "COERCE_EXPLICIT_CALL",
                                    "funcname": [
                                      {
                                        "String": {
                                          "sval": "returns_rw_array",
                                        },
                                      },
                                    ],
                                    "location": 56,
                                  },
                                },
                              },
                            },
                          ],
                        },
                      },
                    },
                  },
                  {
                    "RangeFunction": {
                      "alias": {
                        "aliasname": "i",
                      },
                      "functions": [
                        {
                          "List": {
                            "items": [
                              {
                                "FuncCall": {
                                  "args": [
                                    {
                                      "ColumnRef": {
                                        "fields": [
                                          {
                                            "String": {
                                              "sval": "a",
                                            },
                                          },
                                        ],
                                        "location": 123,
                                      },
                                    },
                                  ],
                                  "funcformat": "COERCE_EXPLICIT_CALL",
                                  "funcname": [
                                    {
                                      "String": {
                                        "sval": "consumes_rw_array",
                                      },
                                    },
                                  ],
                                  "location": 105,
                                },
                              },
                              {},
                            ],
                          },
                        },
                      ],
                      "lateral": true,
                    },
                  },
                ],
                "limitOption": "LIMIT_OPTION_DEFAULT",
                "op": "SETOP_NONE",
                "targetList": [
                  {
                    "ResTarget": {
                      "location": 36,
                      "val": {
                        "ColumnRef": {
                          "fields": [
                            {
                              "String": {
                                "sval": "i",
                              },
                            },
                          ],
                          "location": 36,
                        },
                      },
                    },
                  },
                  {
                    "ResTarget": {
                      "location": 39,
                      "val": {
                        "ColumnRef": {
                          "fields": [
                            {
                              "String": {
                                "sval": "a",
                              },
                            },
                          ],
                          "location": 39,
                        },
                      },
                    },
                  },
                ],
              },
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4138 1`] = `
[
  "select i, a from
  (select returns_rw_array(1) as a offset 0) ss,
  lateral consumes_rw_array(a) i",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "fromClause": [
              {
                "RangeSubselect": {
                  "alias": {
                    "aliasname": "ss",
                  },
                  "subquery": {
                    "SelectStmt": {
                      "limitOffset": {
                        "A_Const": {
                          "ival": {},
                          "location": 59,
                        },
                      },
                      "limitOption": "LIMIT_OPTION_COUNT",
                      "op": "SETOP_NONE",
                      "targetList": [
                        {
                          "ResTarget": {
                            "location": 27,
                            "name": "a",
                            "val": {
                              "FuncCall": {
                                "args": [
                                  {
                                    "A_Const": {
                                      "ival": {
                                        "ival": 1,
                                      },
                                      "location": 44,
                                    },
                                  },
                                ],
                                "funcformat": "COERCE_EXPLICIT_CALL",
                                "funcname": [
                                  {
                                    "String": {
                                      "sval": "returns_rw_array",
                                    },
                                  },
                                ],
                                "location": 27,
                              },
                            },
                          },
                        },
                      ],
                    },
                  },
                },
              },
              {
                "RangeFunction": {
                  "alias": {
                    "aliasname": "i",
                  },
                  "functions": [
                    {
                      "List": {
                        "items": [
                          {
                            "FuncCall": {
                              "args": [
                                {
                                  "ColumnRef": {
                                    "fields": [
                                      {
                                        "String": {
                                          "sval": "a",
                                        },
                                      },
                                    ],
                                    "location": 94,
                                  },
                                },
                              ],
                              "funcformat": "COERCE_EXPLICIT_CALL",
                              "funcname": [
                                {
                                  "String": {
                                    "sval": "consumes_rw_array",
                                  },
                                },
                              ],
                              "location": 76,
                            },
                          },
                          {},
                        ],
                      },
                    },
                  ],
                  "lateral": true,
                },
              },
            ],
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "ColumnRef": {
                      "fields": [
                        {
                          "String": {
                            "sval": "i",
                          },
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
              {
                "ResTarget": {
                  "location": 10,
                  "val": {
                    "ColumnRef": {
                      "fields": [
                        {
                          "String": {
                            "sval": "a",
                          },
                        },
                      ],
                      "location": 10,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4142 1`] = `
[
  "explain (verbose, costs off)
select consumes_rw_array(a), a from returns_rw_array(1) a",
  {
    "stmts": [
      {
        "stmt": {
          "ExplainStmt": {
            "options": [
              {
                "DefElem": {
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "verbose",
                  "location": 9,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "off",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "costs",
                  "location": 18,
                },
              },
            ],
            "query": {
              "SelectStmt": {
                "fromClause": [
                  {
                    "RangeFunction": {
                      "alias": {
                        "aliasname": "a",
                      },
                      "functions": [
                        {
                          "List": {
                            "items": [
                              {
                                "FuncCall": {
                                  "args": [
                                    {
                                      "A_Const": {
                                        "ival": {
                                          "ival": 1,
                                        },
                                        "location": 82,
                                      },
                                    },
                                  ],
                                  "funcformat": "COERCE_EXPLICIT_CALL",
                                  "funcname": [
                                    {
                                      "String": {
                                        "sval": "returns_rw_array",
                                      },
                                    },
                                  ],
                                  "location": 65,
                                },
                              },
                              {},
                            ],
                          },
                        },
                      ],
                    },
                  },
                ],
                "limitOption": "LIMIT_OPTION_DEFAULT",
                "op": "SETOP_NONE",
                "targetList": [
                  {
                    "ResTarget": {
                      "location": 36,
                      "val": {
                        "FuncCall": {
                          "args": [
                            {
                              "ColumnRef": {
                                "fields": [
                                  {
                                    "String": {
                                      "sval": "a",
                                    },
                                  },
                                ],
                                "location": 54,
                              },
                            },
                          ],
                          "funcformat": "COERCE_EXPLICIT_CALL",
                          "funcname": [
                            {
                              "String": {
                                "sval": "consumes_rw_array",
                              },
                            },
                          ],
                          "location": 36,
                        },
                      },
                    },
                  },
                  {
                    "ResTarget": {
                      "location": 58,
                      "val": {
                        "ColumnRef": {
                          "fields": [
                            {
                              "String": {
                                "sval": "a",
                              },
                            },
                          ],
                          "location": 58,
                        },
                      },
                    },
                  },
                ],
              },
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4145 1`] = `
[
  "select consumes_rw_array(a), a from returns_rw_array(1) a",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "fromClause": [
              {
                "RangeFunction": {
                  "alias": {
                    "aliasname": "a",
                  },
                  "functions": [
                    {
                      "List": {
                        "items": [
                          {
                            "FuncCall": {
                              "args": [
                                {
                                  "A_Const": {
                                    "ival": {
                                      "ival": 1,
                                    },
                                    "location": 53,
                                  },
                                },
                              ],
                              "funcformat": "COERCE_EXPLICIT_CALL",
                              "funcname": [
                                {
                                  "String": {
                                    "sval": "returns_rw_array",
                                  },
                                },
                              ],
                              "location": 36,
                            },
                          },
                          {},
                        ],
                      },
                    },
                  ],
                },
              },
            ],
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "FuncCall": {
                      "args": [
                        {
                          "ColumnRef": {
                            "fields": [
                              {
                                "String": {
                                  "sval": "a",
                                },
                              },
                            ],
                            "location": 25,
                          },
                        },
                      ],
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "consumes_rw_array",
                          },
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
              {
                "ResTarget": {
                  "location": 29,
                  "val": {
                    "ColumnRef": {
                      "fields": [
                        {
                          "String": {
                            "sval": "a",
                          },
                        },
                      ],
                      "location": 29,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4147 1`] = `
[
  "explain (verbose, costs off)
select consumes_rw_array(a), a from
  (values (returns_rw_array(1)), (returns_rw_array(2))) v(a)",
  {
    "stmts": [
      {
        "stmt": {
          "ExplainStmt": {
            "options": [
              {
                "DefElem": {
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "verbose",
                  "location": 9,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "off",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "costs",
                  "location": 18,
                },
              },
            ],
            "query": {
              "SelectStmt": {
                "fromClause": [
                  {
                    "RangeSubselect": {
                      "alias": {
                        "aliasname": "v",
                        "colnames": [
                          {
                            "String": {
                              "sval": "a",
                            },
                          },
                        ],
                      },
                      "subquery": {
                        "SelectStmt": {
                          "limitOption": "LIMIT_OPTION_DEFAULT",
                          "op": "SETOP_NONE",
                          "valuesLists": [
                            {
                              "List": {
                                "items": [
                                  {
                                    "FuncCall": {
                                      "args": [
                                        {
                                          "A_Const": {
                                            "ival": {
                                              "ival": 1,
                                            },
                                            "location": 93,
                                          },
                                        },
                                      ],
                                      "funcformat": "COERCE_EXPLICIT_CALL",
                                      "funcname": [
                                        {
                                          "String": {
                                            "sval": "returns_rw_array",
                                          },
                                        },
                                      ],
                                      "location": 76,
                                    },
                                  },
                                ],
                              },
                            },
                            {
                              "List": {
                                "items": [
                                  {
                                    "FuncCall": {
                                      "args": [
                                        {
                                          "A_Const": {
                                            "ival": {
                                              "ival": 2,
                                            },
                                            "location": 116,
                                          },
                                        },
                                      ],
                                      "funcformat": "COERCE_EXPLICIT_CALL",
                                      "funcname": [
                                        {
                                          "String": {
                                            "sval": "returns_rw_array",
                                          },
                                        },
                                      ],
                                      "location": 99,
                                    },
                                  },
                                ],
                              },
                            },
                          ],
                        },
                      },
                    },
                  },
                ],
                "limitOption": "LIMIT_OPTION_DEFAULT",
                "op": "SETOP_NONE",
                "targetList": [
                  {
                    "ResTarget": {
                      "location": 36,
                      "val": {
                        "FuncCall": {
                          "args": [
                            {
                              "ColumnRef": {
                                "fields": [
                                  {
                                    "String": {
                                      "sval": "a",
                                    },
                                  },
                                ],
                                "location": 54,
                              },
                            },
                          ],
                          "funcformat": "COERCE_EXPLICIT_CALL",
                          "funcname": [
                            {
                              "String": {
                                "sval": "consumes_rw_array",
                              },
                            },
                          ],
                          "location": 36,
                        },
                      },
                    },
                  },
                  {
                    "ResTarget": {
                      "location": 58,
                      "val": {
                        "ColumnRef": {
                          "fields": [
                            {
                              "String": {
                                "sval": "a",
                              },
                            },
                          ],
                          "location": 58,
                        },
                      },
                    },
                  },
                ],
              },
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4151 1`] = `
[
  "select consumes_rw_array(a), a from
  (values (returns_rw_array(1)), (returns_rw_array(2))) v(a)",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "fromClause": [
              {
                "RangeSubselect": {
                  "alias": {
                    "aliasname": "v",
                    "colnames": [
                      {
                        "String": {
                          "sval": "a",
                        },
                      },
                    ],
                  },
                  "subquery": {
                    "SelectStmt": {
                      "limitOption": "LIMIT_OPTION_DEFAULT",
                      "op": "SETOP_NONE",
                      "valuesLists": [
                        {
                          "List": {
                            "items": [
                              {
                                "FuncCall": {
                                  "args": [
                                    {
                                      "A_Const": {
                                        "ival": {
                                          "ival": 1,
                                        },
                                        "location": 64,
                                      },
                                    },
                                  ],
                                  "funcformat": "COERCE_EXPLICIT_CALL",
                                  "funcname": [
                                    {
                                      "String": {
                                        "sval": "returns_rw_array",
                                      },
                                    },
                                  ],
                                  "location": 47,
                                },
                              },
                            ],
                          },
                        },
                        {
                          "List": {
                            "items": [
                              {
                                "FuncCall": {
                                  "args": [
                                    {
                                      "A_Const": {
                                        "ival": {
                                          "ival": 2,
                                        },
                                        "location": 87,
                                      },
                                    },
                                  ],
                                  "funcformat": "COERCE_EXPLICIT_CALL",
                                  "funcname": [
                                    {
                                      "String": {
                                        "sval": "returns_rw_array",
                                      },
                                    },
                                  ],
                                  "location": 70,
                                },
                              },
                            ],
                          },
                        },
                      ],
                    },
                  },
                },
              },
            ],
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "FuncCall": {
                      "args": [
                        {
                          "ColumnRef": {
                            "fields": [
                              {
                                "String": {
                                  "sval": "a",
                                },
                              },
                            ],
                            "location": 25,
                          },
                        },
                      ],
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "consumes_rw_array",
                          },
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
              {
                "ResTarget": {
                  "location": 29,
                  "val": {
                    "ColumnRef": {
                      "fields": [
                        {
                          "String": {
                            "sval": "a",
                          },
                        },
                      ],
                      "location": 29,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4180 1`] = `
[
  "create or replace function outer_func(int)
returns int as $$
declare
  myresult int;
begin
  raise notice 'calling down into inner_func()';
  myresult := inner_func($1);
  raise notice 'inner_func() done';
  return myresult;
end;
$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "outer_func",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare
  myresult int;
begin
  raise notice 'calling down into inner_func()';
  myresult := inner_func($1);
  raise notice 'inner_func() done';
  return myresult;
end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 55,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 233,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 38,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                },
              },
            ],
            "replace": true,
            "returnType": {
              "location": 51,
              "names": [
                {
                  "String": {
                    "sval": "pg_catalog",
                  },
                },
                {
                  "String": {
                    "sval": "int4",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4192 1`] = `
[
  "create or replace function outer_outer_func(int)
returns int as $$
declare
  myresult int;
begin
  raise notice 'calling down into outer_func()';
  myresult := outer_func($1);
  raise notice 'outer_func() done';
  return myresult;
end;
$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "outer_outer_func",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare
  myresult int;
begin
  raise notice 'calling down into outer_func()';
  myresult := outer_func($1);
  raise notice 'outer_func() done';
  return myresult;
end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 61,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 239,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 44,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                },
              },
            ],
            "replace": true,
            "returnType": {
              "location": 57,
              "names": [
                {
                  "String": {
                    "sval": "pg_catalog",
                  },
                },
                {
                  "String": {
                    "sval": "int4",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4204 1`] = `
[
  "select outer_outer_func(10)",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "FuncCall": {
                      "args": [
                        {
                          "A_Const": {
                            "ival": {
                              "ival": 10,
                            },
                            "location": 24,
                          },
                        },
                      ],
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "outer_outer_func",
                          },
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4208 1`] = `
[
  "drop function outer_outer_func(int)",
  {
    "stmts": [
      {
        "stmt": {
          "DropStmt": {
            "behavior": "DROP_RESTRICT",
            "objects": [
              {
                "ObjectWithArgs": {
                  "objargs": [
                    {
                      "TypeName": {
                        "location": 31,
                        "names": [
                          {
                            "String": {
                              "sval": "pg_catalog",
                            },
                          },
                          {
                            "String": {
                              "sval": "int4",
                            },
                          },
                        ],
                        "typemod": -1,
                      },
                    },
                  ],
                  "objfuncargs": [
                    {
                      "FunctionParameter": {
                        "argType": {
                          "location": 31,
                          "names": [
                            {
                              "String": {
                                "sval": "pg_catalog",
                              },
                            },
                            {
                              "String": {
                                "sval": "int4",
                              },
                            },
                          ],
                          "typemod": -1,
                        },
                        "mode": "FUNC_PARAM_DEFAULT",
                      },
                    },
                  ],
                  "objname": [
                    {
                      "String": {
                        "sval": "outer_outer_func",
                      },
                    },
                  ],
                },
              },
            ],
            "removeType": "OBJECT_FUNCTION",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4213 1`] = `
[
  "create function inner_func(int)
returns int as $$
declare
  _context text;
  sx int := 5;
begin
  begin
    perform sx / 0;
  exception
    when division_by_zero then
      get diagnostics _context = pg_context;
      raise notice '***%***', _context;
  end;

  -- lets do it again, just for fun..
  get diagnostics _context = pg_context;
  raise notice '***%***', _context;
  raise notice 'lets make sure we didnt break anything';
  return 2 * $1;
end;
$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "inner_func",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare
  _context text;
  sx int := 5;
begin
  begin
    perform sx / 0;
  exception
    when division_by_zero then
      get diagnostics _context = pg_context;
      raise notice '***%***', _context;
  end;

  -- lets do it again, just for fun..
  get diagnostics _context = pg_context;
  raise notice '***%***', _context;
  raise notice 'lets make sure we didnt break anything';
  return 2 * $1;
end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 44,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 457,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 27,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                },
              },
            ],
            "returnType": {
              "location": 40,
              "names": [
                {
                  "String": {
                    "sval": "pg_catalog",
                  },
                },
                {
                  "String": {
                    "sval": "int4",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4268 1`] = `
[
  "create function current_function(text)
returns regprocedure as $$
declare
  fn_oid regprocedure;
begin
  get diagnostics fn_oid = pg_routine_oid;
  return fn_oid;
end;
$$ language plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "current_function",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
declare
  fn_oid regprocedure;
begin
  get diagnostics fn_oid = pg_routine_oid;
  return fn_oid;
end;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 60,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 171,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 33,
                    "names": [
                      {
                        "String": {
                          "sval": "text",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                },
              },
            ],
            "returnType": {
              "location": 47,
              "names": [
                {
                  "String": {
                    "sval": "regprocedure",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4278 1`] = `
[
  "select current_function('foo')",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "FuncCall": {
                      "args": [
                        {
                          "A_Const": {
                            "location": 24,
                            "sval": {
                              "sval": "foo",
                            },
                          },
                        },
                      ],
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "current_function",
                          },
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4280 1`] = `
[
  "drop function current_function(text)",
  {
    "stmts": [
      {
        "stmt": {
          "DropStmt": {
            "behavior": "DROP_RESTRICT",
            "objects": [
              {
                "ObjectWithArgs": {
                  "objargs": [
                    {
                      "TypeName": {
                        "location": 31,
                        "names": [
                          {
                            "String": {
                              "sval": "text",
                            },
                          },
                        ],
                        "typemod": -1,
                      },
                    },
                  ],
                  "objfuncargs": [
                    {
                      "FunctionParameter": {
                        "argType": {
                          "location": 31,
                          "names": [
                            {
                              "String": {
                                "sval": "text",
                              },
                            },
                          ],
                          "typemod": -1,
                        },
                        "mode": "FUNC_PARAM_DEFAULT",
                      },
                    },
                  ],
                  "objname": [
                    {
                      "String": {
                        "sval": "current_function",
                      },
                    },
                  ],
                },
              },
            ],
            "removeType": "OBJECT_FUNCTION",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4315 1`] = `
[
  "set plpgsql.check_asserts = off",
  {
    "stmts": [
      {
        "stmt": {
          "VariableSetStmt": {
            "args": [
              {
                "A_Const": {
                  "location": 28,
                  "sval": {
                    "sval": "off",
                  },
                },
              },
            ],
            "kind": "VAR_SET_VALUE",
            "name": "plpgsql.check_asserts",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4346 1`] = `
[
  "create domain plpgsql_domain as integer check(plpgsql_domain_check(value))",
  {
    "stmts": [
      {
        "stmt": {
          "CreateDomainStmt": {
            "constraints": [
              {
                "Constraint": {
                  "contype": "CONSTR_CHECK",
                  "initially_valid": true,
                  "location": 40,
                  "raw_expr": {
                    "FuncCall": {
                      "args": [
                        {
                          "ColumnRef": {
                            "fields": [
                              {
                                "String": {
                                  "sval": "value",
                                },
                              },
                            ],
                            "location": 67,
                          },
                        },
                      ],
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "plpgsql_domain_check",
                          },
                        },
                      ],
                      "location": 46,
                    },
                  },
                },
              },
            ],
            "domainname": [
              {
                "String": {
                  "sval": "plpgsql_domain",
                },
              },
            ],
            "typeName": {
              "location": 32,
              "names": [
                {
                  "String": {
                    "sval": "pg_catalog",
                  },
                },
                {
                  "String": {
                    "sval": "int4",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4368 1`] = `
[
  "create domain plpgsql_arr_domain as int[] check(plpgsql_arr_domain_check(value))",
  {
    "stmts": [
      {
        "stmt": {
          "CreateDomainStmt": {
            "constraints": [
              {
                "Constraint": {
                  "contype": "CONSTR_CHECK",
                  "initially_valid": true,
                  "location": 42,
                  "raw_expr": {
                    "FuncCall": {
                      "args": [
                        {
                          "ColumnRef": {
                            "fields": [
                              {
                                "String": {
                                  "sval": "value",
                                },
                              },
                            ],
                            "location": 73,
                          },
                        },
                      ],
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "plpgsql_arr_domain_check",
                          },
                        },
                      ],
                      "location": 48,
                    },
                  },
                },
              },
            ],
            "domainname": [
              {
                "String": {
                  "sval": "plpgsql_arr_domain",
                },
              },
            ],
            "typeName": {
              "arrayBounds": [
                {
                  "Integer": {},
                },
              ],
              "location": 36,
              "names": [
                {
                  "String": {
                    "sval": "pg_catalog",
                  },
                },
                {
                  "String": {
                    "sval": "int4",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4391 1`] = `
[
  "CREATE FUNCTION transition_table_base_ins_func()
  RETURNS trigger
  LANGUAGE plpgsql
AS $$
DECLARE
  t text;
  l text;
BEGIN
  t = '';
  FOR l IN EXECUTE
           $q$
             EXPLAIN (TIMING off, COSTS off, VERBOSE on)
             SELECT * FROM newtable
           $q$ LOOP
    t = t || l || E'\\n';
  END LOOP;

  RAISE INFO '%', t;
  RETURN new;
END;
$$",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "transition_table_base_ins_func",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 69,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
DECLARE
  t text;
  l text;
BEGIN
  t = '';
  FOR l IN EXECUTE
           $q$
             EXPLAIN (TIMING off, COSTS off, VERBOSE on)
             SELECT * FROM newtable
           $q$ LOOP
    t = t || l || E'\\n';
  END LOOP;

  RAISE INFO '%', t;
  RETURN new;
END;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 86,
                },
              },
            ],
            "returnType": {
              "location": 59,
              "names": [
                {
                  "String": {
                    "sval": "trigger",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4413 1`] = `
[
  "CREATE TRIGGER transition_table_base_ins_trig
  AFTER INSERT ON transition_table_base
  REFERENCING OLD TABLE AS oldtable NEW TABLE AS newtable
  FOR EACH STATEMENT
  EXECUTE PROCEDURE transition_table_base_ins_func()",
  {
    "stmts": [
      {
        "stmt": {
          "CreateTrigStmt": {
            "events": 4,
            "funcname": [
              {
                "String": {
                  "sval": "transition_table_base_ins_func",
                },
              },
            ],
            "relation": {
              "inh": true,
              "location": 64,
              "relname": "transition_table_base",
              "relpersistence": "p",
            },
            "transitionRels": [
              {
                "TriggerTransition": {
                  "isTable": true,
                  "name": "oldtable",
                },
              },
              {
                "TriggerTransition": {
                  "isNew": true,
                  "isTable": true,
                  "name": "newtable",
                },
              },
            ],
            "trigname": "transition_table_base_ins_trig",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4419 1`] = `
[
  "CREATE TRIGGER transition_table_base_ins_trig
  AFTER INSERT ON transition_table_base
  REFERENCING NEW TABLE AS newtable
  FOR EACH STATEMENT
  EXECUTE PROCEDURE transition_table_base_ins_func()",
  {
    "stmts": [
      {
        "stmt": {
          "CreateTrigStmt": {
            "events": 4,
            "funcname": [
              {
                "String": {
                  "sval": "transition_table_base_ins_func",
                },
              },
            ],
            "relation": {
              "inh": true,
              "location": 64,
              "relname": "transition_table_base",
              "relpersistence": "p",
            },
            "transitionRels": [
              {
                "TriggerTransition": {
                  "isNew": true,
                  "isTable": true,
                  "name": "newtable",
                },
              },
            ],
            "trigname": "transition_table_base_ins_trig",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4425 1`] = `
[
  "INSERT INTO transition_table_base VALUES (1, 'One'), (2, 'Two')",
  {
    "stmts": [
      {
        "stmt": {
          "InsertStmt": {
            "override": "OVERRIDING_NOT_SET",
            "relation": {
              "inh": true,
              "location": 12,
              "relname": "transition_table_base",
              "relpersistence": "p",
            },
            "selectStmt": {
              "SelectStmt": {
                "limitOption": "LIMIT_OPTION_DEFAULT",
                "op": "SETOP_NONE",
                "valuesLists": [
                  {
                    "List": {
                      "items": [
                        {
                          "A_Const": {
                            "ival": {
                              "ival": 1,
                            },
                            "location": 42,
                          },
                        },
                        {
                          "A_Const": {
                            "location": 45,
                            "sval": {
                              "sval": "One",
                            },
                          },
                        },
                      ],
                    },
                  },
                  {
                    "List": {
                      "items": [
                        {
                          "A_Const": {
                            "ival": {
                              "ival": 2,
                            },
                            "location": 54,
                          },
                        },
                        {
                          "A_Const": {
                            "location": 57,
                            "sval": {
                              "sval": "Two",
                            },
                          },
                        },
                      ],
                    },
                  },
                ],
              },
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4428 1`] = `
[
  "CREATE OR REPLACE FUNCTION transition_table_base_upd_func()
  RETURNS trigger
  LANGUAGE plpgsql
AS $$
DECLARE
  t text;
  l text;
BEGIN
  t = '';
  FOR l IN EXECUTE
           $q$
             EXPLAIN (TIMING off, COSTS off, VERBOSE on)
             SELECT * FROM oldtable ot FULL JOIN newtable nt USING (id)
           $q$ LOOP
    t = t || l || E'\\n';
  END LOOP;

  RAISE INFO '%', t;
  RETURN new;
END;
$$",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "transition_table_base_upd_func",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 80,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
DECLARE
  t text;
  l text;
BEGIN
  t = '';
  FOR l IN EXECUTE
           $q$
             EXPLAIN (TIMING off, COSTS off, VERBOSE on)
             SELECT * FROM oldtable ot FULL JOIN newtable nt USING (id)
           $q$ LOOP
    t = t || l || E'\\n';
  END LOOP;

  RAISE INFO '%', t;
  RETURN new;
END;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 97,
                },
              },
            ],
            "replace": true,
            "returnType": {
              "location": 70,
              "names": [
                {
                  "String": {
                    "sval": "trigger",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4450 1`] = `
[
  "CREATE TRIGGER transition_table_base_upd_trig
  AFTER UPDATE ON transition_table_base
  REFERENCING OLD TABLE AS oldtable NEW TABLE AS newtable
  FOR EACH STATEMENT
  EXECUTE PROCEDURE transition_table_base_upd_func()",
  {
    "stmts": [
      {
        "stmt": {
          "CreateTrigStmt": {
            "events": 16,
            "funcname": [
              {
                "String": {
                  "sval": "transition_table_base_upd_func",
                },
              },
            ],
            "relation": {
              "inh": true,
              "location": 64,
              "relname": "transition_table_base",
              "relpersistence": "p",
            },
            "transitionRels": [
              {
                "TriggerTransition": {
                  "isTable": true,
                  "name": "oldtable",
                },
              },
              {
                "TriggerTransition": {
                  "isNew": true,
                  "isTable": true,
                  "name": "newtable",
                },
              },
            ],
            "trigname": "transition_table_base_upd_trig",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4456 1`] = `
[
  "UPDATE transition_table_base
  SET val = '*' || val || '*'
  WHERE id BETWEEN 2 AND 3",
  {
    "stmts": [
      {
        "stmt": {
          "UpdateStmt": {
            "relation": {
              "inh": true,
              "location": 7,
              "relname": "transition_table_base",
              "relpersistence": "p",
            },
            "targetList": [
              {
                "ResTarget": {
                  "location": 35,
                  "name": "val",
                  "val": {
                    "A_Expr": {
                      "kind": "AEXPR_OP",
                      "lexpr": {
                        "A_Expr": {
                          "kind": "AEXPR_OP",
                          "lexpr": {
                            "A_Const": {
                              "location": 41,
                              "sval": {
                                "sval": "*",
                              },
                            },
                          },
                          "location": 45,
                          "name": [
                            {
                              "String": {
                                "sval": "||",
                              },
                            },
                          ],
                          "rexpr": {
                            "ColumnRef": {
                              "fields": [
                                {
                                  "String": {
                                    "sval": "val",
                                  },
                                },
                              ],
                              "location": 48,
                            },
                          },
                        },
                      },
                      "location": 52,
                      "name": [
                        {
                          "String": {
                            "sval": "||",
                          },
                        },
                      ],
                      "rexpr": {
                        "A_Const": {
                          "location": 55,
                          "sval": {
                            "sval": "*",
                          },
                        },
                      },
                    },
                  },
                },
              },
            ],
            "whereClause": {
              "A_Expr": {
                "kind": "AEXPR_BETWEEN",
                "lexpr": {
                  "ColumnRef": {
                    "fields": [
                      {
                        "String": {
                          "sval": "id",
                        },
                      },
                    ],
                    "location": 67,
                  },
                },
                "location": 70,
                "name": [
                  {
                    "String": {
                      "sval": "BETWEEN",
                    },
                  },
                ],
                "rexpr": {
                  "List": {
                    "items": [
                      {
                        "A_Const": {
                          "ival": {
                            "ival": 2,
                          },
                          "location": 78,
                        },
                      },
                      {
                        "A_Const": {
                          "ival": {
                            "ival": 3,
                          },
                          "location": 84,
                        },
                      },
                    ],
                  },
                },
              },
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4460 1`] = `
[
  "CREATE TABLE transition_table_level1
(
      level1_no serial NOT NULL ,
      level1_node_name varchar(255),
       PRIMARY KEY (level1_no)
) WITHOUT OIDS",
  {
    "stmts": [
      {
        "stmt": {
          "CreateStmt": {
            "oncommit": "ONCOMMIT_NOOP",
            "relation": {
              "inh": true,
              "location": 13,
              "relname": "transition_table_level1",
              "relpersistence": "p",
            },
            "tableElts": [
              {
                "ColumnDef": {
                  "colname": "level1_no",
                  "constraints": [
                    {
                      "Constraint": {
                        "contype": "CONSTR_NOTNULL",
                        "location": 62,
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 45,
                  "typeName": {
                    "location": 55,
                    "names": [
                      {
                        "String": {
                          "sval": "serial",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                },
              },
              {
                "ColumnDef": {
                  "colname": "level1_node_name",
                  "is_local": true,
                  "location": 79,
                  "typeName": {
                    "location": 96,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "varchar",
                        },
                      },
                    ],
                    "typemod": -1,
                    "typmods": [
                      {
                        "A_Const": {
                          "ival": {
                            "ival": 255,
                          },
                          "location": 104,
                        },
                      },
                    ],
                  },
                },
              },
              {
                "Constraint": {
                  "contype": "CONSTR_PRIMARY",
                  "keys": [
                    {
                      "String": {
                        "sval": "level1_no",
                      },
                    },
                  ],
                  "location": 117,
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4467 1`] = `
[
  "CREATE TABLE transition_table_level2
(
      level2_no serial NOT NULL ,
      parent_no int NOT NULL,
      level1_node_name varchar(255),
       PRIMARY KEY (level2_no)
) WITHOUT OIDS",
  {
    "stmts": [
      {
        "stmt": {
          "CreateStmt": {
            "oncommit": "ONCOMMIT_NOOP",
            "relation": {
              "inh": true,
              "location": 13,
              "relname": "transition_table_level2",
              "relpersistence": "p",
            },
            "tableElts": [
              {
                "ColumnDef": {
                  "colname": "level2_no",
                  "constraints": [
                    {
                      "Constraint": {
                        "contype": "CONSTR_NOTNULL",
                        "location": 62,
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 45,
                  "typeName": {
                    "location": 55,
                    "names": [
                      {
                        "String": {
                          "sval": "serial",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                },
              },
              {
                "ColumnDef": {
                  "colname": "parent_no",
                  "constraints": [
                    {
                      "Constraint": {
                        "contype": "CONSTR_NOTNULL",
                        "location": 93,
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 79,
                  "typeName": {
                    "location": 89,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                },
              },
              {
                "ColumnDef": {
                  "colname": "level1_node_name",
                  "is_local": true,
                  "location": 109,
                  "typeName": {
                    "location": 126,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "varchar",
                        },
                      },
                    ],
                    "typemod": -1,
                    "typmods": [
                      {
                        "A_Const": {
                          "ival": {
                            "ival": 255,
                          },
                          "location": 134,
                        },
                      },
                    ],
                  },
                },
              },
              {
                "Constraint": {
                  "contype": "CONSTR_PRIMARY",
                  "keys": [
                    {
                      "String": {
                        "sval": "level2_no",
                      },
                    },
                  ],
                  "location": 147,
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4475 1`] = `
[
  "CREATE TABLE transition_table_status
(
      level int NOT NULL,
      node_no int NOT NULL,
      status int,
       PRIMARY KEY (level, node_no)
) WITHOUT OIDS",
  {
    "stmts": [
      {
        "stmt": {
          "CreateStmt": {
            "oncommit": "ONCOMMIT_NOOP",
            "relation": {
              "inh": true,
              "location": 13,
              "relname": "transition_table_status",
              "relpersistence": "p",
            },
            "tableElts": [
              {
                "ColumnDef": {
                  "colname": "level",
                  "constraints": [
                    {
                      "Constraint": {
                        "contype": "CONSTR_NOTNULL",
                        "location": 55,
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 45,
                  "typeName": {
                    "location": 51,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                },
              },
              {
                "ColumnDef": {
                  "colname": "node_no",
                  "constraints": [
                    {
                      "Constraint": {
                        "contype": "CONSTR_NOTNULL",
                        "location": 83,
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 71,
                  "typeName": {
                    "location": 79,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                },
              },
              {
                "ColumnDef": {
                  "colname": "status",
                  "is_local": true,
                  "location": 99,
                  "typeName": {
                    "location": 106,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                },
              },
              {
                "Constraint": {
                  "contype": "CONSTR_PRIMARY",
                  "keys": [
                    {
                      "String": {
                        "sval": "level",
                      },
                    },
                    {
                      "String": {
                        "sval": "node_no",
                      },
                    },
                  ],
                  "location": 118,
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4483 1`] = `
[
  "CREATE FUNCTION transition_table_level1_ri_parent_del_func()
  RETURNS TRIGGER
  LANGUAGE plpgsql
AS $$
  DECLARE n bigint;
  BEGIN
    PERFORM FROM p JOIN transition_table_level2 c ON c.parent_no = p.level1_no;
    IF FOUND THEN
      RAISE EXCEPTION 'RI error';
    END IF;
    RETURN NULL;
  END;
$$",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "transition_table_level1_ri_parent_del_func",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 81,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
  DECLARE n bigint;
  BEGIN
    PERFORM FROM p JOIN transition_table_level2 c ON c.parent_no = p.level1_no;
    IF FOUND THEN
      RAISE EXCEPTION 'RI error';
    END IF;
    RETURN NULL;
  END;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 98,
                },
              },
            ],
            "returnType": {
              "location": 71,
              "names": [
                {
                  "String": {
                    "sval": "trigger",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4497 1`] = `
[
  "CREATE TRIGGER transition_table_level1_ri_parent_del_trigger
  AFTER DELETE ON transition_table_level1
  REFERENCING OLD TABLE AS p
  FOR EACH STATEMENT EXECUTE PROCEDURE
    transition_table_level1_ri_parent_del_func()",
  {
    "stmts": [
      {
        "stmt": {
          "CreateTrigStmt": {
            "events": 8,
            "funcname": [
              {
                "String": {
                  "sval": "transition_table_level1_ri_parent_del_func",
                },
              },
            ],
            "relation": {
              "inh": true,
              "location": 79,
              "relname": "transition_table_level1",
              "relpersistence": "p",
            },
            "transitionRels": [
              {
                "TriggerTransition": {
                  "isTable": true,
                  "name": "p",
                },
              },
            ],
            "trigname": "transition_table_level1_ri_parent_del_trigger",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4503 1`] = `
[
  "CREATE FUNCTION transition_table_level1_ri_parent_upd_func()
  RETURNS TRIGGER
  LANGUAGE plpgsql
AS $$
  DECLARE
    x int;
  BEGIN
    WITH p AS (SELECT level1_no, sum(delta) cnt
                 FROM (SELECT level1_no, 1 AS delta FROM i
                       UNION ALL
                       SELECT level1_no, -1 AS delta FROM d) w
                 GROUP BY level1_no
                 HAVING sum(delta) < 0)
    SELECT level1_no
      FROM p JOIN transition_table_level2 c ON c.parent_no = p.level1_no
      INTO x;
    IF FOUND THEN
      RAISE EXCEPTION 'RI error';
    END IF;
    RETURN NULL;
  END;
$$",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "transition_table_level1_ri_parent_upd_func",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 81,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
  DECLARE
    x int;
  BEGIN
    WITH p AS (SELECT level1_no, sum(delta) cnt
                 FROM (SELECT level1_no, 1 AS delta FROM i
                       UNION ALL
                       SELECT level1_no, -1 AS delta FROM d) w
                 GROUP BY level1_no
                 HAVING sum(delta) < 0)
    SELECT level1_no
      FROM p JOIN transition_table_level2 c ON c.parent_no = p.level1_no
      INTO x;
    IF FOUND THEN
      RAISE EXCEPTION 'RI error';
    END IF;
    RETURN NULL;
  END;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 98,
                },
              },
            ],
            "returnType": {
              "location": 71,
              "names": [
                {
                  "String": {
                    "sval": "trigger",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4526 1`] = `
[
  "CREATE TRIGGER transition_table_level1_ri_parent_upd_trigger
  AFTER UPDATE ON transition_table_level1
  REFERENCING OLD TABLE AS d NEW TABLE AS i
  FOR EACH STATEMENT EXECUTE PROCEDURE
    transition_table_level1_ri_parent_upd_func()",
  {
    "stmts": [
      {
        "stmt": {
          "CreateTrigStmt": {
            "events": 16,
            "funcname": [
              {
                "String": {
                  "sval": "transition_table_level1_ri_parent_upd_func",
                },
              },
            ],
            "relation": {
              "inh": true,
              "location": 79,
              "relname": "transition_table_level1",
              "relpersistence": "p",
            },
            "transitionRels": [
              {
                "TriggerTransition": {
                  "isTable": true,
                  "name": "d",
                },
              },
              {
                "TriggerTransition": {
                  "isNew": true,
                  "isTable": true,
                  "name": "i",
                },
              },
            ],
            "trigname": "transition_table_level1_ri_parent_upd_trigger",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4532 1`] = `
[
  "CREATE FUNCTION transition_table_level2_ri_child_insupd_func()
  RETURNS TRIGGER
  LANGUAGE plpgsql
AS $$
  BEGIN
    PERFORM FROM i
      LEFT JOIN transition_table_level1 p
        ON p.level1_no IS NOT NULL AND p.level1_no = i.parent_no
      WHERE p.level1_no IS NULL;
    IF FOUND THEN
      RAISE EXCEPTION 'RI error';
    END IF;
    RETURN NULL;
  END;
$$",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "transition_table_level2_ri_child_insupd_func",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 83,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
  BEGIN
    PERFORM FROM i
      LEFT JOIN transition_table_level1 p
        ON p.level1_no IS NOT NULL AND p.level1_no = i.parent_no
      WHERE p.level1_no IS NULL;
    IF FOUND THEN
      RAISE EXCEPTION 'RI error';
    END IF;
    RETURN NULL;
  END;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 100,
                },
              },
            ],
            "returnType": {
              "location": 73,
              "names": [
                {
                  "String": {
                    "sval": "trigger",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4548 1`] = `
[
  "CREATE TRIGGER transition_table_level2_ri_child_ins_trigger
  AFTER INSERT ON transition_table_level2
  REFERENCING NEW TABLE AS i
  FOR EACH STATEMENT EXECUTE PROCEDURE
    transition_table_level2_ri_child_insupd_func()",
  {
    "stmts": [
      {
        "stmt": {
          "CreateTrigStmt": {
            "events": 4,
            "funcname": [
              {
                "String": {
                  "sval": "transition_table_level2_ri_child_insupd_func",
                },
              },
            ],
            "relation": {
              "inh": true,
              "location": 78,
              "relname": "transition_table_level2",
              "relpersistence": "p",
            },
            "transitionRels": [
              {
                "TriggerTransition": {
                  "isNew": true,
                  "isTable": true,
                  "name": "i",
                },
              },
            ],
            "trigname": "transition_table_level2_ri_child_ins_trigger",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4554 1`] = `
[
  "CREATE TRIGGER transition_table_level2_ri_child_upd_trigger
  AFTER UPDATE ON transition_table_level2
  REFERENCING NEW TABLE AS i
  FOR EACH STATEMENT EXECUTE PROCEDURE
    transition_table_level2_ri_child_insupd_func()",
  {
    "stmts": [
      {
        "stmt": {
          "CreateTrigStmt": {
            "events": 16,
            "funcname": [
              {
                "String": {
                  "sval": "transition_table_level2_ri_child_insupd_func",
                },
              },
            ],
            "relation": {
              "inh": true,
              "location": 78,
              "relname": "transition_table_level2",
              "relpersistence": "p",
            },
            "transitionRels": [
              {
                "TriggerTransition": {
                  "isNew": true,
                  "isTable": true,
                  "name": "i",
                },
              },
            ],
            "trigname": "transition_table_level2_ri_child_upd_trigger",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4561 1`] = `
[
  "INSERT INTO transition_table_level1 (level1_no)
  SELECT generate_series(1,200)",
  {
    "stmts": [
      {
        "stmt": {
          "InsertStmt": {
            "cols": [
              {
                "ResTarget": {
                  "location": 37,
                  "name": "level1_no",
                },
              },
            ],
            "override": "OVERRIDING_NOT_SET",
            "relation": {
              "inh": true,
              "location": 12,
              "relname": "transition_table_level1",
              "relpersistence": "p",
            },
            "selectStmt": {
              "SelectStmt": {
                "limitOption": "LIMIT_OPTION_DEFAULT",
                "op": "SETOP_NONE",
                "targetList": [
                  {
                    "ResTarget": {
                      "location": 57,
                      "val": {
                        "FuncCall": {
                          "args": [
                            {
                              "A_Const": {
                                "ival": {
                                  "ival": 1,
                                },
                                "location": 73,
                              },
                            },
                            {
                              "A_Const": {
                                "ival": {
                                  "ival": 200,
                                },
                                "location": 75,
                              },
                            },
                          ],
                          "funcformat": "COERCE_EXPLICIT_CALL",
                          "funcname": [
                            {
                              "String": {
                                "sval": "generate_series",
                              },
                            },
                          ],
                          "location": 57,
                        },
                      },
                    },
                  },
                ],
              },
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4565 1`] = `
[
  "INSERT INTO transition_table_level2 (level2_no, parent_no)
  SELECT level2_no, level2_no / 50 + 1 AS parent_no
    FROM generate_series(1,9999) level2_no",
  {
    "stmts": [
      {
        "stmt": {
          "InsertStmt": {
            "cols": [
              {
                "ResTarget": {
                  "location": 37,
                  "name": "level2_no",
                },
              },
              {
                "ResTarget": {
                  "location": 48,
                  "name": "parent_no",
                },
              },
            ],
            "override": "OVERRIDING_NOT_SET",
            "relation": {
              "inh": true,
              "location": 12,
              "relname": "transition_table_level2",
              "relpersistence": "p",
            },
            "selectStmt": {
              "SelectStmt": {
                "fromClause": [
                  {
                    "RangeFunction": {
                      "alias": {
                        "aliasname": "level2_no",
                      },
                      "functions": [
                        {
                          "List": {
                            "items": [
                              {
                                "FuncCall": {
                                  "args": [
                                    {
                                      "A_Const": {
                                        "ival": {
                                          "ival": 1,
                                        },
                                        "location": 136,
                                      },
                                    },
                                    {
                                      "A_Const": {
                                        "ival": {
                                          "ival": 9999,
                                        },
                                        "location": 138,
                                      },
                                    },
                                  ],
                                  "funcformat": "COERCE_EXPLICIT_CALL",
                                  "funcname": [
                                    {
                                      "String": {
                                        "sval": "generate_series",
                                      },
                                    },
                                  ],
                                  "location": 120,
                                },
                              },
                              {},
                            ],
                          },
                        },
                      ],
                    },
                  },
                ],
                "limitOption": "LIMIT_OPTION_DEFAULT",
                "op": "SETOP_NONE",
                "targetList": [
                  {
                    "ResTarget": {
                      "location": 68,
                      "val": {
                        "ColumnRef": {
                          "fields": [
                            {
                              "String": {
                                "sval": "level2_no",
                              },
                            },
                          ],
                          "location": 68,
                        },
                      },
                    },
                  },
                  {
                    "ResTarget": {
                      "location": 79,
                      "name": "parent_no",
                      "val": {
                        "A_Expr": {
                          "kind": "AEXPR_OP",
                          "lexpr": {
                            "A_Expr": {
                              "kind": "AEXPR_OP",
                              "lexpr": {
                                "ColumnRef": {
                                  "fields": [
                                    {
                                      "String": {
                                        "sval": "level2_no",
                                      },
                                    },
                                  ],
                                  "location": 79,
                                },
                              },
                              "location": 89,
                              "name": [
                                {
                                  "String": {
                                    "sval": "/",
                                  },
                                },
                              ],
                              "rexpr": {
                                "A_Const": {
                                  "ival": {
                                    "ival": 50,
                                  },
                                  "location": 91,
                                },
                              },
                            },
                          },
                          "location": 94,
                          "name": [
                            {
                              "String": {
                                "sval": "+",
                              },
                            },
                          ],
                          "rexpr": {
                            "A_Const": {
                              "ival": {
                                "ival": 1,
                              },
                              "location": 96,
                            },
                          },
                        },
                      },
                    },
                  },
                ],
              },
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4570 1`] = `
[
  "INSERT INTO transition_table_status (level, node_no, status)
  SELECT 1, level1_no, 0 FROM transition_table_level1",
  {
    "stmts": [
      {
        "stmt": {
          "InsertStmt": {
            "cols": [
              {
                "ResTarget": {
                  "location": 37,
                  "name": "level",
                },
              },
              {
                "ResTarget": {
                  "location": 44,
                  "name": "node_no",
                },
              },
              {
                "ResTarget": {
                  "location": 53,
                  "name": "status",
                },
              },
            ],
            "override": "OVERRIDING_NOT_SET",
            "relation": {
              "inh": true,
              "location": 12,
              "relname": "transition_table_status",
              "relpersistence": "p",
            },
            "selectStmt": {
              "SelectStmt": {
                "fromClause": [
                  {
                    "RangeVar": {
                      "inh": true,
                      "location": 91,
                      "relname": "transition_table_level1",
                      "relpersistence": "p",
                    },
                  },
                ],
                "limitOption": "LIMIT_OPTION_DEFAULT",
                "op": "SETOP_NONE",
                "targetList": [
                  {
                    "ResTarget": {
                      "location": 70,
                      "val": {
                        "A_Const": {
                          "ival": {
                            "ival": 1,
                          },
                          "location": 70,
                        },
                      },
                    },
                  },
                  {
                    "ResTarget": {
                      "location": 73,
                      "val": {
                        "ColumnRef": {
                          "fields": [
                            {
                              "String": {
                                "sval": "level1_no",
                              },
                            },
                          ],
                          "location": 73,
                        },
                      },
                    },
                  },
                  {
                    "ResTarget": {
                      "location": 84,
                      "val": {
                        "A_Const": {
                          "ival": {},
                          "location": 84,
                        },
                      },
                    },
                  },
                ],
              },
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4573 1`] = `
[
  "INSERT INTO transition_table_status (level, node_no, status)
  SELECT 2, level2_no, 0 FROM transition_table_level2",
  {
    "stmts": [
      {
        "stmt": {
          "InsertStmt": {
            "cols": [
              {
                "ResTarget": {
                  "location": 37,
                  "name": "level",
                },
              },
              {
                "ResTarget": {
                  "location": 44,
                  "name": "node_no",
                },
              },
              {
                "ResTarget": {
                  "location": 53,
                  "name": "status",
                },
              },
            ],
            "override": "OVERRIDING_NOT_SET",
            "relation": {
              "inh": true,
              "location": 12,
              "relname": "transition_table_status",
              "relpersistence": "p",
            },
            "selectStmt": {
              "SelectStmt": {
                "fromClause": [
                  {
                    "RangeVar": {
                      "inh": true,
                      "location": 91,
                      "relname": "transition_table_level2",
                      "relpersistence": "p",
                    },
                  },
                ],
                "limitOption": "LIMIT_OPTION_DEFAULT",
                "op": "SETOP_NONE",
                "targetList": [
                  {
                    "ResTarget": {
                      "location": 70,
                      "val": {
                        "A_Const": {
                          "ival": {
                            "ival": 2,
                          },
                          "location": 70,
                        },
                      },
                    },
                  },
                  {
                    "ResTarget": {
                      "location": 73,
                      "val": {
                        "ColumnRef": {
                          "fields": [
                            {
                              "String": {
                                "sval": "level2_no",
                              },
                            },
                          ],
                          "location": 73,
                        },
                      },
                    },
                  },
                  {
                    "ResTarget": {
                      "location": 84,
                      "val": {
                        "A_Const": {
                          "ival": {},
                          "location": 84,
                        },
                      },
                    },
                  },
                ],
              },
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4582 1`] = `
[
  "CREATE FUNCTION transition_table_level2_bad_usage_func()
  RETURNS TRIGGER
  LANGUAGE plpgsql
AS $$
  BEGIN
    INSERT INTO dx VALUES (1000000, 1000000, 'x');
    RETURN NULL;
  END;
$$",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "transition_table_level2_bad_usage_func",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 77,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
  BEGIN
    INSERT INTO dx VALUES (1000000, 1000000, 'x');
    RETURN NULL;
  END;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 94,
                },
              },
            ],
            "returnType": {
              "location": 67,
              "names": [
                {
                  "String": {
                    "sval": "trigger",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4592 1`] = `
[
  "CREATE TRIGGER transition_table_level2_bad_usage_trigger
  AFTER DELETE ON transition_table_level2
  REFERENCING OLD TABLE AS dx
  FOR EACH STATEMENT EXECUTE PROCEDURE
    transition_table_level2_bad_usage_func()",
  {
    "stmts": [
      {
        "stmt": {
          "CreateTrigStmt": {
            "events": 8,
            "funcname": [
              {
                "String": {
                  "sval": "transition_table_level2_bad_usage_func",
                },
              },
            ],
            "relation": {
              "inh": true,
              "location": 75,
              "relname": "transition_table_level2",
              "relpersistence": "p",
            },
            "transitionRels": [
              {
                "TriggerTransition": {
                  "isTable": true,
                  "name": "dx",
                },
              },
            ],
            "trigname": "transition_table_level2_bad_usage_trigger",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4598 1`] = `
[
  "DELETE FROM transition_table_level2
  WHERE level2_no BETWEEN 301 AND 305",
  {
    "stmts": [
      {
        "stmt": {
          "DeleteStmt": {
            "relation": {
              "inh": true,
              "location": 12,
              "relname": "transition_table_level2",
              "relpersistence": "p",
            },
            "whereClause": {
              "A_Expr": {
                "kind": "AEXPR_BETWEEN",
                "lexpr": {
                  "ColumnRef": {
                    "fields": [
                      {
                        "String": {
                          "sval": "level2_no",
                        },
                      },
                    ],
                    "location": 44,
                  },
                },
                "location": 54,
                "name": [
                  {
                    "String": {
                      "sval": "BETWEEN",
                    },
                  },
                ],
                "rexpr": {
                  "List": {
                    "items": [
                      {
                        "A_Const": {
                          "ival": {
                            "ival": 301,
                          },
                          "location": 62,
                        },
                      },
                      {
                        "A_Const": {
                          "ival": {
                            "ival": 305,
                          },
                          "location": 70,
                        },
                      },
                    ],
                  },
                },
              },
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4601 1`] = `
[
  "DROP TRIGGER transition_table_level2_bad_usage_trigger
  ON transition_table_level2",
  {
    "stmts": [
      {
        "stmt": {
          "DropStmt": {
            "behavior": "DROP_RESTRICT",
            "objects": [
              {
                "List": {
                  "items": [
                    {
                      "String": {
                        "sval": "transition_table_level2",
                      },
                    },
                    {
                      "String": {
                        "sval": "transition_table_level2_bad_usage_trigger",
                      },
                    },
                  ],
                },
              },
            ],
            "removeType": "OBJECT_TRIGGER",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4605 1`] = `
[
  "DELETE FROM transition_table_level1
  WHERE level1_no = 25",
  {
    "stmts": [
      {
        "stmt": {
          "DeleteStmt": {
            "relation": {
              "inh": true,
              "location": 12,
              "relname": "transition_table_level1",
              "relpersistence": "p",
            },
            "whereClause": {
              "A_Expr": {
                "kind": "AEXPR_OP",
                "lexpr": {
                  "ColumnRef": {
                    "fields": [
                      {
                        "String": {
                          "sval": "level1_no",
                        },
                      },
                    ],
                    "location": 44,
                  },
                },
                "location": 54,
                "name": [
                  {
                    "String": {
                      "sval": "=",
                    },
                  },
                ],
                "rexpr": {
                  "A_Const": {
                    "ival": {
                      "ival": 25,
                    },
                    "location": 56,
                  },
                },
              },
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4608 1`] = `
[
  "UPDATE transition_table_level1 SET level1_no = -1
  WHERE level1_no = 30",
  {
    "stmts": [
      {
        "stmt": {
          "UpdateStmt": {
            "relation": {
              "inh": true,
              "location": 7,
              "relname": "transition_table_level1",
              "relpersistence": "p",
            },
            "targetList": [
              {
                "ResTarget": {
                  "location": 35,
                  "name": "level1_no",
                  "val": {
                    "A_Const": {
                      "ival": {},
                      "location": 47,
                    },
                  },
                },
              },
            ],
            "whereClause": {
              "A_Expr": {
                "kind": "AEXPR_OP",
                "lexpr": {
                  "ColumnRef": {
                    "fields": [
                      {
                        "String": {
                          "sval": "level1_no",
                        },
                      },
                    ],
                    "location": 58,
                  },
                },
                "location": 68,
                "name": [
                  {
                    "String": {
                      "sval": "=",
                    },
                  },
                ],
                "rexpr": {
                  "A_Const": {
                    "ival": {
                      "ival": 30,
                    },
                    "location": 70,
                  },
                },
              },
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4611 1`] = `
[
  "INSERT INTO transition_table_level2 (level2_no, parent_no)
  VALUES (10000, 10000)",
  {
    "stmts": [
      {
        "stmt": {
          "InsertStmt": {
            "cols": [
              {
                "ResTarget": {
                  "location": 37,
                  "name": "level2_no",
                },
              },
              {
                "ResTarget": {
                  "location": 48,
                  "name": "parent_no",
                },
              },
            ],
            "override": "OVERRIDING_NOT_SET",
            "relation": {
              "inh": true,
              "location": 12,
              "relname": "transition_table_level2",
              "relpersistence": "p",
            },
            "selectStmt": {
              "SelectStmt": {
                "limitOption": "LIMIT_OPTION_DEFAULT",
                "op": "SETOP_NONE",
                "valuesLists": [
                  {
                    "List": {
                      "items": [
                        {
                          "A_Const": {
                            "ival": {
                              "ival": 10000,
                            },
                            "location": 69,
                          },
                        },
                        {
                          "A_Const": {
                            "ival": {
                              "ival": 10000,
                            },
                            "location": 76,
                          },
                        },
                      ],
                    },
                  },
                ],
              },
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4614 1`] = `
[
  "UPDATE transition_table_level2 SET parent_no = 2000
  WHERE level2_no = 40",
  {
    "stmts": [
      {
        "stmt": {
          "UpdateStmt": {
            "relation": {
              "inh": true,
              "location": 7,
              "relname": "transition_table_level2",
              "relpersistence": "p",
            },
            "targetList": [
              {
                "ResTarget": {
                  "location": 35,
                  "name": "parent_no",
                  "val": {
                    "A_Const": {
                      "ival": {
                        "ival": 2000,
                      },
                      "location": 47,
                    },
                  },
                },
              },
            ],
            "whereClause": {
              "A_Expr": {
                "kind": "AEXPR_OP",
                "lexpr": {
                  "ColumnRef": {
                    "fields": [
                      {
                        "String": {
                          "sval": "level2_no",
                        },
                      },
                    ],
                    "location": 60,
                  },
                },
                "location": 70,
                "name": [
                  {
                    "String": {
                      "sval": "=",
                    },
                  },
                ],
                "rexpr": {
                  "A_Const": {
                    "ival": {
                      "ival": 40,
                    },
                    "location": 72,
                  },
                },
              },
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4619 1`] = `
[
  "DELETE FROM transition_table_level1
  WHERE level1_no BETWEEN 201 AND 1000",
  {
    "stmts": [
      {
        "stmt": {
          "DeleteStmt": {
            "relation": {
              "inh": true,
              "location": 12,
              "relname": "transition_table_level1",
              "relpersistence": "p",
            },
            "whereClause": {
              "A_Expr": {
                "kind": "AEXPR_BETWEEN",
                "lexpr": {
                  "ColumnRef": {
                    "fields": [
                      {
                        "String": {
                          "sval": "level1_no",
                        },
                      },
                    ],
                    "location": 44,
                  },
                },
                "location": 54,
                "name": [
                  {
                    "String": {
                      "sval": "BETWEEN",
                    },
                  },
                ],
                "rexpr": {
                  "List": {
                    "items": [
                      {
                        "A_Const": {
                          "ival": {
                            "ival": 201,
                          },
                          "location": 62,
                        },
                      },
                      {
                        "A_Const": {
                          "ival": {
                            "ival": 1000,
                          },
                          "location": 70,
                        },
                      },
                    ],
                  },
                },
              },
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4625 1`] = `
[
  "SELECT count(*) FROM transition_table_level1",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "fromClause": [
              {
                "RangeVar": {
                  "inh": true,
                  "location": 21,
                  "relname": "transition_table_level1",
                  "relpersistence": "p",
                },
              },
            ],
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "FuncCall": {
                      "agg_star": true,
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "count",
                          },
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4630 1`] = `
[
  "SELECT count(*) FROM transition_table_level2",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "fromClause": [
              {
                "RangeVar": {
                  "inh": true,
                  "location": 21,
                  "relname": "transition_table_level2",
                  "relpersistence": "p",
                },
              },
            ],
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "FuncCall": {
                      "agg_star": true,
                      "funcformat": "COERCE_EXPLICIT_CALL",
                      "funcname": [
                        {
                          "String": {
                            "sval": "count",
                          },
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4632 1`] = `
[
  "CREATE TABLE alter_table_under_transition_tables
(
  id int PRIMARY KEY,
  name text
)",
  {
    "stmts": [
      {
        "stmt": {
          "CreateStmt": {
            "oncommit": "ONCOMMIT_NOOP",
            "relation": {
              "inh": true,
              "location": 13,
              "relname": "alter_table_under_transition_tables",
              "relpersistence": "p",
            },
            "tableElts": [
              {
                "ColumnDef": {
                  "colname": "id",
                  "constraints": [
                    {
                      "Constraint": {
                        "contype": "CONSTR_PRIMARY",
                        "location": 60,
                      },
                    },
                  ],
                  "is_local": true,
                  "location": 53,
                  "typeName": {
                    "location": 56,
                    "names": [
                      {
                        "String": {
                          "sval": "pg_catalog",
                        },
                      },
                      {
                        "String": {
                          "sval": "int4",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                },
              },
              {
                "ColumnDef": {
                  "colname": "name",
                  "is_local": true,
                  "location": 75,
                  "typeName": {
                    "location": 80,
                    "names": [
                      {
                        "String": {
                          "sval": "text",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4638 1`] = `
[
  "CREATE FUNCTION alter_table_under_transition_tables_upd_func()
  RETURNS TRIGGER
  LANGUAGE plpgsql
AS $$
BEGIN
  RAISE WARNING 'old table = %, new table = %',
                  (SELECT string_agg(id || '=' || name, ',') FROM d),
                  (SELECT string_agg(id || '=' || name, ',') FROM i);
  RAISE NOTICE 'one = %', (SELECT 1 FROM alter_table_under_transition_tables LIMIT 1);
  RETURN NULL;
END;
$$",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "alter_table_under_transition_tables_upd_func",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 83,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
BEGIN
  RAISE WARNING 'old table = %, new table = %',
                  (SELECT string_agg(id || '=' || name, ',') FROM d),
                  (SELECT string_agg(id || '=' || name, ',') FROM i);
  RAISE NOTICE 'one = %', (SELECT 1 FROM alter_table_under_transition_tables LIMIT 1);
  RETURN NULL;
END;
",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 100,
                },
              },
            ],
            "returnType": {
              "location": 73,
              "names": [
                {
                  "String": {
                    "sval": "trigger",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4652 1`] = `
[
  "CREATE TRIGGER alter_table_under_transition_tables_upd_trigger
  AFTER TRUNCATE OR UPDATE ON alter_table_under_transition_tables
  REFERENCING OLD TABLE AS d NEW TABLE AS i
  FOR EACH STATEMENT EXECUTE PROCEDURE
    alter_table_under_transition_tables_upd_func()",
  {
    "stmts": [
      {
        "stmt": {
          "CreateTrigStmt": {
            "events": 48,
            "funcname": [
              {
                "String": {
                  "sval": "alter_table_under_transition_tables_upd_func",
                },
              },
            ],
            "relation": {
              "inh": true,
              "location": 93,
              "relname": "alter_table_under_transition_tables",
              "relpersistence": "p",
            },
            "transitionRels": [
              {
                "TriggerTransition": {
                  "isTable": true,
                  "name": "d",
                },
              },
              {
                "TriggerTransition": {
                  "isNew": true,
                  "isTable": true,
                  "name": "i",
                },
              },
            ],
            "trigname": "alter_table_under_transition_tables_upd_trigger",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4659 1`] = `
[
  "CREATE TRIGGER alter_table_under_transition_tables_upd_trigger
  AFTER UPDATE ON alter_table_under_transition_tables
  REFERENCING OLD TABLE AS d NEW TABLE AS i
  FOR EACH STATEMENT EXECUTE PROCEDURE
    alter_table_under_transition_tables_upd_func()",
  {
    "stmts": [
      {
        "stmt": {
          "CreateTrigStmt": {
            "events": 16,
            "funcname": [
              {
                "String": {
                  "sval": "alter_table_under_transition_tables_upd_func",
                },
              },
            ],
            "relation": {
              "inh": true,
              "location": 81,
              "relname": "alter_table_under_transition_tables",
              "relpersistence": "p",
            },
            "transitionRels": [
              {
                "TriggerTransition": {
                  "isTable": true,
                  "name": "d",
                },
              },
              {
                "TriggerTransition": {
                  "isNew": true,
                  "isTable": true,
                  "name": "i",
                },
              },
            ],
            "trigname": "alter_table_under_transition_tables_upd_trigger",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4665 1`] = `
[
  "INSERT INTO alter_table_under_transition_tables
  VALUES (1, '1'), (2, '2'), (3, '3')",
  {
    "stmts": [
      {
        "stmt": {
          "InsertStmt": {
            "override": "OVERRIDING_NOT_SET",
            "relation": {
              "inh": true,
              "location": 12,
              "relname": "alter_table_under_transition_tables",
              "relpersistence": "p",
            },
            "selectStmt": {
              "SelectStmt": {
                "limitOption": "LIMIT_OPTION_DEFAULT",
                "op": "SETOP_NONE",
                "valuesLists": [
                  {
                    "List": {
                      "items": [
                        {
                          "A_Const": {
                            "ival": {
                              "ival": 1,
                            },
                            "location": 58,
                          },
                        },
                        {
                          "A_Const": {
                            "location": 61,
                            "sval": {
                              "sval": "1",
                            },
                          },
                        },
                      ],
                    },
                  },
                  {
                    "List": {
                      "items": [
                        {
                          "A_Const": {
                            "ival": {
                              "ival": 2,
                            },
                            "location": 68,
                          },
                        },
                        {
                          "A_Const": {
                            "location": 71,
                            "sval": {
                              "sval": "2",
                            },
                          },
                        },
                      ],
                    },
                  },
                  {
                    "List": {
                      "items": [
                        {
                          "A_Const": {
                            "ival": {
                              "ival": 3,
                            },
                            "location": 78,
                          },
                        },
                        {
                          "A_Const": {
                            "location": 81,
                            "sval": {
                              "sval": "3",
                            },
                          },
                        },
                      ],
                    },
                  },
                ],
              },
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4671 1`] = `
[
  "ALTER TABLE alter_table_under_transition_tables
  ALTER COLUMN name TYPE int USING name::integer",
  {
    "stmts": [
      {
        "stmt": {
          "AlterTableStmt": {
            "cmds": [
              {
                "AlterTableCmd": {
                  "behavior": "DROP_RESTRICT",
                  "def": {
                    "ColumnDef": {
                      "location": 63,
                      "raw_default": {
                        "TypeCast": {
                          "arg": {
                            "ColumnRef": {
                              "fields": [
                                {
                                  "String": {
                                    "sval": "name",
                                  },
                                },
                              ],
                              "location": 83,
                            },
                          },
                          "location": 87,
                          "typeName": {
                            "location": 89,
                            "names": [
                              {
                                "String": {
                                  "sval": "pg_catalog",
                                },
                              },
                              {
                                "String": {
                                  "sval": "int4",
                                },
                              },
                            ],
                            "typemod": -1,
                          },
                        },
                      },
                      "typeName": {
                        "location": 73,
                        "names": [
                          {
                            "String": {
                              "sval": "pg_catalog",
                            },
                          },
                          {
                            "String": {
                              "sval": "int4",
                            },
                          },
                        ],
                        "typemod": -1,
                      },
                    },
                  },
                  "name": "name",
                  "subtype": "AT_AlterColumnType",
                },
              },
            ],
            "objtype": "OBJECT_TABLE",
            "relation": {
              "inh": true,
              "location": 12,
              "relname": "alter_table_under_transition_tables",
              "relpersistence": "p",
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4677 1`] = `
[
  "ALTER TABLE alter_table_under_transition_tables
  DROP column name",
  {
    "stmts": [
      {
        "stmt": {
          "AlterTableStmt": {
            "cmds": [
              {
                "AlterTableCmd": {
                  "behavior": "DROP_RESTRICT",
                  "name": "name",
                  "subtype": "AT_DropColumn",
                },
              },
            ],
            "objtype": "OBJECT_TABLE",
            "relation": {
              "inh": true,
              "location": 12,
              "relname": "alter_table_under_transition_tables",
              "relpersistence": "p",
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4680 1`] = `
[
  "  SET id = id",
  {
    "stmts": [
      {
        "stmt": {
          "VariableSetStmt": {
            "args": [
              {
                "A_Const": {
                  "location": 11,
                  "sval": {
                    "sval": "id",
                  },
                },
              },
            ],
            "kind": "VAR_SET_VALUE",
            "name": "id",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4689 1`] = `
[
  "CREATE OR REPLACE FUNCTION multi_test_trig() RETURNS trigger
LANGUAGE plpgsql AS $$
BEGIN
    RAISE NOTICE 'count = %', (SELECT COUNT(*) FROM new_test);
    RAISE NOTICE 'count union = %',
      (SELECT COUNT(*)
       FROM (SELECT * FROM new_test UNION ALL SELECT * FROM new_test) ss);
    RETURN NULL;
END$$",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "multi_test_trig",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 61,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
BEGIN
    RAISE NOTICE 'count = %', (SELECT COUNT(*) FROM new_test);
    RAISE NOTICE 'count union = %',
      (SELECT COUNT(*)
       FROM (SELECT * FROM new_test UNION ALL SELECT * FROM new_test) ss);
    RETURN NULL;
END",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 78,
                },
              },
            ],
            "replace": true,
            "returnType": {
              "location": 53,
              "names": [
                {
                  "String": {
                    "sval": "trigger",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4699 1`] = `
[
  "CREATE TRIGGER my_trigger AFTER UPDATE ON multi_test
  REFERENCING NEW TABLE AS new_test OLD TABLE as old_test
  FOR EACH STATEMENT EXECUTE PROCEDURE multi_test_trig()",
  {
    "stmts": [
      {
        "stmt": {
          "CreateTrigStmt": {
            "events": 16,
            "funcname": [
              {
                "String": {
                  "sval": "multi_test_trig",
                },
              },
            ],
            "relation": {
              "inh": true,
              "location": 42,
              "relname": "multi_test",
              "relpersistence": "p",
            },
            "transitionRels": [
              {
                "TriggerTransition": {
                  "isNew": true,
                  "isTable": true,
                  "name": "new_test",
                },
              },
              {
                "TriggerTransition": {
                  "isTable": true,
                  "name": "old_test",
                },
              },
            ],
            "trigname": "my_trigger",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4703 1`] = `
[
  "UPDATE multi_test SET i = i",
  {
    "stmts": [
      {
        "stmt": {
          "UpdateStmt": {
            "relation": {
              "inh": true,
              "location": 7,
              "relname": "multi_test",
              "relpersistence": "p",
            },
            "targetList": [
              {
                "ResTarget": {
                  "location": 22,
                  "name": "i",
                  "val": {
                    "ColumnRef": {
                      "fields": [
                        {
                          "String": {
                            "sval": "i",
                          },
                        },
                      ],
                      "location": 26,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4705 1`] = `
[
  "DROP TABLE multi_test",
  {
    "stmts": [
      {
        "stmt": {
          "DropStmt": {
            "behavior": "DROP_RESTRICT",
            "objects": [
              {
                "List": {
                  "items": [
                    {
                      "String": {
                        "sval": "multi_test",
                      },
                    },
                  ],
                },
              },
            ],
            "removeType": "OBJECT_TABLE",
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4716 1`] = `
[
  "INSERT INTO partitioned_table VALUES (1, 'Row 1')",
  {
    "stmts": [
      {
        "stmt": {
          "InsertStmt": {
            "override": "OVERRIDING_NOT_SET",
            "relation": {
              "inh": true,
              "location": 12,
              "relname": "partitioned_table",
              "relpersistence": "p",
            },
            "selectStmt": {
              "SelectStmt": {
                "limitOption": "LIMIT_OPTION_DEFAULT",
                "op": "SETOP_NONE",
                "valuesLists": [
                  {
                    "List": {
                      "items": [
                        {
                          "A_Const": {
                            "ival": {
                              "ival": 1,
                            },
                            "location": 38,
                          },
                        },
                        {
                          "A_Const": {
                            "location": 41,
                            "sval": {
                              "sval": "Row 1",
                            },
                          },
                        },
                      ],
                    },
                  },
                ],
              },
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4719 1`] = `
[
  "CREATE OR REPLACE FUNCTION get_from_partitioned_table(partitioned_table.a%type)
RETURNS partitioned_table AS $$
DECLARE
    a_val partitioned_table.a%TYPE;
    result partitioned_table%ROWTYPE;
BEGIN
    a_val := $1;
    SELECT * INTO result FROM partitioned_table WHERE a = a_val;
    RETURN result;
END; $$ LANGUAGE plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "get_from_partitioned_table",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
DECLARE
    a_val partitioned_table.a%TYPE;
    result partitioned_table%ROWTYPE;
BEGIN
    a_val := $1;
    SELECT * INTO result FROM partitioned_table WHERE a = a_val;
    RETURN result;
END; ",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 106,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 309,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 54,
                    "names": [
                      {
                        "String": {
                          "sval": "partitioned_table",
                        },
                      },
                      {
                        "String": {
                          "sval": "a",
                        },
                      },
                    ],
                    "pct_type": true,
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                },
              },
            ],
            "replace": true,
            "returnType": {
              "location": 88,
              "names": [
                {
                  "String": {
                    "sval": "partitioned_table",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4730 1`] = `
[
  "SELECT * FROM get_from_partitioned_table(1) AS t",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "fromClause": [
              {
                "RangeFunction": {
                  "alias": {
                    "aliasname": "t",
                  },
                  "functions": [
                    {
                      "List": {
                        "items": [
                          {
                            "FuncCall": {
                              "args": [
                                {
                                  "A_Const": {
                                    "ival": {
                                      "ival": 1,
                                    },
                                    "location": 41,
                                  },
                                },
                              ],
                              "funcformat": "COERCE_EXPLICIT_CALL",
                              "funcname": [
                                {
                                  "String": {
                                    "sval": "get_from_partitioned_table",
                                  },
                                },
                              ],
                              "location": 14,
                            },
                          },
                          {},
                        ],
                      },
                    },
                  ],
                },
              },
            ],
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "ColumnRef": {
                      "fields": [
                        {
                          "A_Star": {},
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4732 1`] = `
[
  "CREATE OR REPLACE FUNCTION list_partitioned_table()
RETURNS SETOF partitioned_table.a%TYPE AS $$
DECLARE
    row partitioned_table%ROWTYPE;
    a_val partitioned_table.a%TYPE;
BEGIN
    FOR row IN SELECT * FROM partitioned_table ORDER BY a LOOP
        a_val := row.a;
        RETURN NEXT a_val;
    END LOOP;
    RETURN;
END; $$ LANGUAGE plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "list_partitioned_table",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
DECLARE
    row partitioned_table%ROWTYPE;
    a_val partitioned_table.a%TYPE;
BEGIN
    FOR row IN SELECT * FROM partitioned_table ORDER BY a LOOP
        a_val := row.a;
        RETURN NEXT a_val;
    END LOOP;
    RETURN;
END; ",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 91,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 330,
                },
              },
            ],
            "replace": true,
            "returnType": {
              "location": 66,
              "names": [
                {
                  "String": {
                    "sval": "partitioned_table",
                  },
                },
                {
                  "String": {
                    "sval": "a",
                  },
                },
              ],
              "pct_type": true,
              "setof": true,
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4745 1`] = `
[
  "SELECT * FROM list_partitioned_table() AS t",
  {
    "stmts": [
      {
        "stmt": {
          "SelectStmt": {
            "fromClause": [
              {
                "RangeFunction": {
                  "alias": {
                    "aliasname": "t",
                  },
                  "functions": [
                    {
                      "List": {
                        "items": [
                          {
                            "FuncCall": {
                              "funcformat": "COERCE_EXPLICIT_CALL",
                              "funcname": [
                                {
                                  "String": {
                                    "sval": "list_partitioned_table",
                                  },
                                },
                              ],
                              "location": 14,
                            },
                          },
                          {},
                        ],
                      },
                    },
                  ],
                },
              },
            ],
            "limitOption": "LIMIT_OPTION_DEFAULT",
            "op": "SETOP_NONE",
            "targetList": [
              {
                "ResTarget": {
                  "location": 7,
                  "val": {
                    "ColumnRef": {
                      "fields": [
                        {
                          "A_Star": {},
                        },
                      ],
                      "location": 7,
                    },
                  },
                },
              },
            ],
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;

exports[`plpgsql.sql > line 4750 1`] = `
[
  "CREATE FUNCTION fx(x WSlot) RETURNS void AS $$
BEGIN
  GET DIAGNOSTICS x = ROW_COUNT;
  RETURN;
END; $$ LANGUAGE plpgsql",
  {
    "stmts": [
      {
        "stmt": {
          "CreateFunctionStmt": {
            "funcname": [
              {
                "String": {
                  "sval": "fx",
                },
              },
            ],
            "options": [
              {
                "DefElem": {
                  "arg": {
                    "List": {
                      "items": [
                        {
                          "String": {
                            "sval": "
BEGIN
  GET DIAGNOSTICS x = ROW_COUNT;
  RETURN;
END; ",
                          },
                        },
                      ],
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "as",
                  "location": 41,
                },
              },
              {
                "DefElem": {
                  "arg": {
                    "String": {
                      "sval": "plpgsql",
                    },
                  },
                  "defaction": "DEFELEM_UNSPEC",
                  "defname": "language",
                  "location": 104,
                },
              },
            ],
            "parameters": [
              {
                "FunctionParameter": {
                  "argType": {
                    "location": 21,
                    "names": [
                      {
                        "String": {
                          "sval": "wslot",
                        },
                      },
                    ],
                    "typemod": -1,
                  },
                  "mode": "FUNC_PARAM_DEFAULT",
                  "name": "x",
                },
              },
            ],
            "returnType": {
              "location": 36,
              "names": [
                {
                  "String": {
                    "sval": "void",
                  },
                },
              ],
              "typemod": -1,
            },
          },
        },
      },
    ],
    "version": 160001,
  },
]
`;
